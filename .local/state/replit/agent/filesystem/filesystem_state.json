{"file_contents":{"server/src/migrations/20250103000003_add_order_pin.js":{"content":"exports.up = function(knex) {\n  return knex.schema.alterTable('orders', table => {\n    table.string('pin', 8).unique();\n    table.string('payment_method').defaultTo('cash');\n  });\n};\n\nexports.down = function(knex) {\n  return knex.schema.alterTable('orders', table => {\n    table.dropColumn('pin');\n    table.dropColumn('payment_method');\n  });\n};","size_bytes":346},"frontend/src/pages/admin/LoginPage.jsx":{"content":"import { useState, useEffect } from 'react'\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport { useAuth } from '../../contexts/AuthContext'\nimport { EyeIcon, EyeSlashIcon } from '@heroicons/react/24/outline'\nimport toast from 'react-hot-toast'\n\nfunction LoginPage() {\n  const navigate = useNavigate()\n  const location = useLocation()\n  const { login, pinLogin, isAuthenticated } = useAuth()\n  \n  const [loginMode, setLoginMode] = useState('password') // 'password' or 'pin'\n  const [formData, setFormData] = useState({\n    username: '',\n    password: '',\n    pin: ''\n  })\n  const [showPassword, setShowPassword] = useState(false)\n  const [loading, setLoading] = useState(false)\n\n  const from = location.state?.from?.pathname || '/admin/dashboard'\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      navigate(from, { replace: true })\n    }\n  }, [isAuthenticated, navigate, from])\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    setLoading(true)\n\n    try {\n      let result\n      if (loginMode === 'password') {\n        result = await login({\n          username: formData.username,\n          password: formData.password\n        })\n      } else {\n        result = await pinLogin({\n          username: formData.username,\n          pin: formData.pin\n        })\n      }\n\n      if (result.success) {\n        // Get user from localStorage to check role\n        const userStr = localStorage.getItem('user')\n        if (userStr) {\n          const user = JSON.parse(userStr)\n          // Redirect based on role\n          if (user.role === 'owner') {\n            navigate('/owner/dashboard', { replace: true })\n          } else {\n            navigate(from, { replace: true })\n          }\n        } else {\n          navigate(from, { replace: true })\n        }\n      }\n    } catch (error) {\n      console.error('Login error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }))\n  }\n\n  const toggleLoginMode = () => {\n    setLoginMode(prev => prev === 'password' ? 'pin' : 'password')\n    setFormData({ username: '', password: '', pin: '' })\n    setShowPassword(false)\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8\">\n      <div className=\"sm:mx-auto sm:w-full sm:max-w-md animate-fadeInUp\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto h-20 w-20 flex items-center justify-center rounded-full bg-gradient-to-r from-blue-600 to-purple-600 shadow-xl mb-6\">\n            <span className=\"text-white font-bold text-2xl\">P</span>\n          </div>\n          <h1 className=\"text-4xl font-bold gradient-text mb-4\">POSQ Admin</h1>\n          <p className=\"text-lg text-gray-600\">Restaurant POS Management</p>\n        </div>\n      </div>\n\n      <div className=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\n        <div className=\"card py-8 px-4 sm:px-10\">\n          {/* Login Mode Toggle */}\n          <div className=\"flex rounded-xl shadow-lg mb-8 overflow-hidden\">\n            <button\n              type=\"button\"\n              onClick={() => setLoginMode('password')}\n              className={`flex-1 py-3 px-4 text-sm font-semibold transition-all duration-200 ${\n                loginMode === 'password'\n                  ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-lg'\n                  : 'bg-white text-gray-700 hover:bg-gray-50'\n              }`}\n            >\n              Password Login\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => setLoginMode('pin')}\n              className={`flex-1 py-3 px-4 text-sm font-semibold transition-all duration-200 ${\n                loginMode === 'pin'\n                  ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-lg'\n                  : 'bg-white text-gray-700 hover:bg-gray-50'\n              }`}\n            >\n              PIN Login\n            </button>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Username */}\n            <div>\n              <label htmlFor=\"username\" className=\"form-label\">\n                Username\n              </label>\n              <input\n                id=\"username\"\n                name=\"username\"\n                type=\"text\"\n                autoComplete=\"username\"\n                required\n                value={formData.username}\n                onChange={handleInputChange}\n                className=\"form-input\"\n                placeholder=\"Enter your username\"\n              />\n            </div>\n\n            {/* Password or PIN */}\n            <div>\n              <label htmlFor={loginMode === 'password' ? 'password' : 'pin'} className=\"form-label\">\n                {loginMode === 'password' ? 'Password' : 'PIN'}\n              </label>\n              <div className=\"relative\">\n                <input\n                  id={loginMode === 'password' ? 'password' : 'pin'}\n                  name={loginMode === 'password' ? 'password' : 'pin'}\n                  type={loginMode === 'password' && !showPassword ? 'password' : 'text'}\n                  autoComplete={loginMode === 'password' ? 'current-password' : 'off'}\n                  required\n                  value={loginMode === 'password' ? formData.password : formData.pin}\n                  onChange={handleInputChange}\n                  className=\"form-input pr-10\"\n                  placeholder={loginMode === 'password' ? 'Enter your password' : 'Enter your PIN'}\n                />\n                {loginMode === 'password' && (\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n                  >\n                    {showPassword ? (\n                      <EyeSlashIcon className=\"h-5 w-5 text-gray-400\" />\n                    ) : (\n                      <EyeIcon className=\"h-5 w-5 text-gray-400\" />\n                    )}\n                  </button>\n                )}\n              </div>\n            </div>\n\n            {/* Submit Button */}\n            <div>\n              <button\n                type=\"submit\"\n                disabled={loading}\n                className=\"btn-primary w-full btn-lg disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {loading ? (\n                  <>\n                    <div className=\"loading-spinner mr-2\"></div>\n                    Signing in...\n                  </>\n                ) : (\n                  `Sign in with ${loginMode === 'password' ? 'Password' : 'PIN'}`\n                )}\n              </button>\n            </div>\n          </form>\n\n          {/* Demo Credentials */}\n          <div className=\"mt-8 p-4 bg-gray-50 rounded-lg\">\n            <h3 className=\"text-sm font-medium text-gray-900 mb-2\">Demo Credentials:</h3>\n            <div className=\"text-xs text-gray-600 space-y-1\">\n              <p><strong>Admin:</strong> admin / admin123</p>\n              <p><strong>Cashier:</strong> cashier1 / cashier123 (PIN: 5678)</p>\n              <p><strong>Kitchen:</strong> kitchen1 / kitchen123 (PIN: 9999)</p>\n            </div>\n          </div>\n\n          {/* Customer Access */}\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              Customer?{' '}\n              <a\n                href=\"/menu\"\n                className=\"font-medium text-primary-600 hover:text-primary-500\"\n              >\n                Browse Menu\n              </a>\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default LoginPage","size_bytes":7828},"frontend/src/pages/customer/MenuPage.jsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { useCart } from \"../../contexts/CartContext\";\nimport { useTheme } from \"../../contexts/ThemeContext\";\nimport { menuAPI } from \"../../services/api\";\nimport { PlusIcon, MinusIcon } from \"@heroicons/react/24/outline\";\nimport CartBottomBar from \"../../components/CartBottomBar\";\nimport toast from \"react-hot-toast\";\n\nimport DefaultTemplate from \"./templates/DefaultTemplate\";\nimport ModernTemplate from \"./templates/ModernTemplate\";\nimport ElegantTemplate from \"./templates/ElegantTemplate\";\nimport MinimalTemplate from \"./templates/MinimalTemplate\";\n\nfunction MenuPage() {\n  const [searchParams] = useSearchParams();\n  const table = searchParams.get(\"table\");\n  const branch = searchParams.get(\"branch\") || \"1\";\n\n  const [menu, setMenu] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedItem, setSelectedItem] = useState(null);\n  const [quantity, setQuantity] = useState(1);\n  const [selectedModifiers, setSelectedModifiers] = useState([]);\n  const [note, setNote] = useState(\"\");\n\n  const { addItem, setBranchInfo } = useCart();\n  const { getSetting } = useTheme();\n\n  const menuTemplate = getSetting('menu_template') || 'default';\n\n  useEffect(() => {\n    console.log('MenuPage: Setting branch info', { branch: parseInt(branch), table });\n    setBranchInfo(parseInt(branch), table);\n  }, [branch, table]);\n\n  useEffect(() => {\n    loadMenu();\n  }, [branch]);\n\n  const loadMenu = async () => {\n    try {\n      setLoading(true);\n      const response = await menuAPI.getMenu({ branchId: parseInt(branch) });\n      setMenu(response.data.categories);\n    } catch (error) {\n      toast.error(\"Failed to load menu\");\n      console.error(\"Menu load error:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAddToCart = () => {\n    if (!selectedItem) return;\n\n    addItem(\n      selectedItem,\n      quantity,\n      selectedModifiers,\n      note,\n      parseInt(branch),\n      table,\n    );\n\n    toast.success(`${quantity}x ${selectedItem.name} added to cart`);\n    setSelectedItem(null);\n    setQuantity(1);\n    setSelectedModifiers([]);\n    setNote(\"\");\n  };\n\n  const toggleModifier = (modifier) => {\n    setSelectedModifiers((prev) => {\n      const exists = prev.find((m) => m.id === modifier.id);\n      if (exists) {\n        return prev.filter((m) => m.id !== modifier.id);\n      } else {\n        return [...prev, modifier];\n      }\n    });\n  };\n\n  const calculateItemTotal = (item) => {\n    const modifierTotal = selectedModifiers.reduce((sum, modifier) => {\n      return sum + parseFloat(modifier.extra_price || 0);\n    }, 0);\n    return (parseFloat(item.price || 0) + modifierTotal) * quantity;\n  };\n\n  const quickAddItem = (item) => {\n    addItem(item, 1, [], \"\", parseInt(branch), table);\n    toast.success(`${item.name} added to cart`);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"text-center\">\n          <div className=\"loading-spinner mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading menu...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const templates = {\n    default: DefaultTemplate,\n    modern: ModernTemplate,\n    elegant: ElegantTemplate,\n    minimal: MinimalTemplate\n  };\n\n  const SelectedTemplate = templates[menuTemplate] || DefaultTemplate;\n\n  return (\n    <>\n      <SelectedTemplate\n        menu={menu}\n        table={table}\n        addItem={quickAddItem}\n        onSelectItem={setSelectedItem}\n      />\n\n      {selectedItem && (\n        <div className=\"modal-overlay\">\n          <div className=\"modal-content\">\n            <div className=\"relative overflow-hidden\">\n              <img\n                src={\n                  selectedItem.image ||\n                  \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=400&h=300&fit=crop\"\n                }\n                alt={selectedItem.name}\n                className=\"w-full h-64 object-cover\"\n                onError={(e) => {\n                  e.target.src =\n                    \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=400&h=300&fit=crop\";\n                }}\n              />\n              <div className=\"absolute inset-0 bg-gradient-to-t from-black/30 to-transparent\"></div>\n              <div className=\"absolute top-4 right-4 bg-white/90 backdrop-blur-sm rounded-full px-4 py-2 text-lg font-bold text-gray-800 shadow-lg\">\n                {parseFloat(selectedItem.price || 0).toFixed(2)} MAD\n              </div>\n            </div>\n\n            <div className=\"p-6\">\n              <div className=\"flex justify-between items-start mb-4\">\n                <h3 className=\"text-lg font-semibold text-gray-900\">\n                  {selectedItem.name}\n                </h3>\n                <button\n                  onClick={() => setSelectedItem(null)}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  <span className=\"sr-only\">Close</span>\n                  <svg\n                    className=\"h-6 w-6\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M6 18L18 6M6 6l12 12\"\n                    />\n                  </svg>\n                </button>\n              </div>\n\n              {selectedItem.description && (\n                <p className=\"text-gray-600 mb-4\">{selectedItem.description}</p>\n              )}\n\n              {selectedItem.modifiers && selectedItem.modifiers.length > 0 && (\n                <div className=\"mb-4\">\n                  <h4 className=\"font-medium text-gray-900 mb-2\">Modifiers</h4>\n                  <div className=\"space-y-2\">\n                    {selectedItem.modifiers.map((modifier) => (\n                      <label key={modifier.id} className=\"flex items-center\">\n                        <input\n                          type=\"checkbox\"\n                          checked={selectedModifiers.some(\n                            (m) => m.id === modifier.id,\n                          )}\n                           onChange={() => toggleModifier(modifier)}\n                          className=\"rounded border-gray-300 text-primary-600 focus:ring-primary-500\"\n                        />\n                        <span className=\"ml-2 text-sm text-gray-700\">\n                          {modifier.name}\n                          {parseFloat(modifier.extra_price || 0) > 0 && (\n                            <span className=\"text-primary-600 ml-1\">\n                              (+\n                              {parseFloat(modifier.extra_price || 0).toFixed(\n                                2,\n                              )}{\" \"}\n                              MAD)\n                            </span>\n                          )}\n                        </span>\n                      </label>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              <div className=\"mb-4\">\n                <label className=\"form-label\">Special Instructions</label>\n                <textarea\n                  value={note}\n                  onChange={(e) => setNote(e.target.value)}\n                  placeholder=\"Any special requests?\"\n                  className=\"form-input\"\n                  rows={3}\n                />\n              </div>\n\n              <div className=\"mb-6\">\n                <label className=\"form-label\">Quantity</label>\n                <div className=\"flex items-center space-x-3\">\n                  <button\n                    onClick={() => setQuantity(Math.max(1, quantity - 1))}\n                    className=\"btn-outline btn-sm\"\n                  >\n                    <MinusIcon className=\"h-4 w-4\" />\n                  </button>\n                  <span className=\"text-lg font-medium\">{quantity}</span>\n                  <button\n                    onClick={() => setQuantity(quantity + 1)}\n                    className=\"btn-outline btn-sm\"\n                  >\n                    <PlusIcon className=\"h-4 w-4\" />\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"flex justify-between items-center mb-6\">\n                <span className=\"text-lg font-semibold\">Total:</span>\n                <span className=\"text-lg font-bold text-primary-600\">\n                  {calculateItemTotal(selectedItem).toFixed(2)} MAD\n                </span>\n              </div>\n\n              <div className=\"flex space-x-3\">\n                <button\n                  onClick={() => setSelectedItem(null)}\n                  className=\"btn-outline flex-1   transition-transform duration-200 rounded-md h-10 flex items-center justify-center  \"\n                >\n                  Cancel\n                </button>\n                <button\n                  onClick={handleAddToCart}\n                  className=\"btn-primary flex-1 transition-transform duration-200 rounded-md h-10 flex items-center justify-center\"\n                >\n                  Add to Cart\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <CartBottomBar />\n    </>\n  );\n}\n\nexport default MenuPage;\n","size_bytes":9425},"frontend/src/components/layout/AdminLayout.jsx":{"content":"import { Outlet, useLocation, useNavigate } from 'react-router-dom'\nimport { useAuth } from '../../contexts/AuthContext'\nimport { useSocket } from '../../contexts/SocketContext'\nimport { useTheme } from '../../contexts/ThemeContext'\nimport {\n  HomeIcon,\n  ClipboardDocumentListIcon,\n  TableCellsIcon,\n  QueueListIcon,\n  BeakerIcon,\n  ChartBarIcon,\n  CogIcon,\n  ArrowRightOnRectangleIcon,\n  BellIcon,\n  WifiIcon,\n  UserGroupIcon\n} from '@heroicons/react/24/outline'\nimport { useState } from 'react'\n\nconst navigation = [\n  { name: 'Dashboard', href: '/admin/dashboard', icon: HomeIcon, roles: ['admin', 'manager', 'cashier'] },\n  { name: 'Menu', href: '/admin/menu', icon: ClipboardDocumentListIcon, roles: ['admin', 'manager'] },\n  { name: 'Tables', href: '/admin/tables', icon: TableCellsIcon, roles: ['admin', 'manager'] },\n  { name: 'Orders', href: '/admin/orders', icon: QueueListIcon, roles: ['admin', 'manager', 'cashier'] },\n  { name: 'Kitchen', href: '/admin/kitchen', icon: BeakerIcon, roles: ['admin', 'manager', 'kitchen'] },\n  { name: 'Inventory', href: '/admin/inventory', icon: ChartBarIcon, roles: ['admin', 'manager'] },\n  { name: 'Employees', href: '/admin/employees', icon: UserGroupIcon, roles: ['admin', 'manager'] },\n  { name: 'Reports', href: '/admin/reports', icon: ChartBarIcon, roles: ['admin', 'manager'] },\n  { name: 'Settings', href: '/admin/settings', icon: CogIcon, roles: ['admin'] },\n]\n\nfunction AdminLayout() {\n  const location = useLocation()\n  const navigate = useNavigate()\n  const { user, logout } = useAuth()\n  const { isConnected } = useSocket()\n  const { getAppName, getSetting } = useTheme()\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n\n  const filteredNavigation = navigation.filter(item => \n    item.roles.includes(user?.role)\n  )\n\n  const handleLogout = () => {\n    logout()\n    navigate('/admin/login')\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Mobile sidebar */}\n      <div className={`fixed inset-0 z-50 lg:hidden ${sidebarOpen ? 'block' : 'hidden'}`}>\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-75\" onClick={() => setSidebarOpen(false)} />\n        <div className=\"fixed inset-y-0 left-0 flex w-64 flex-col bg-white border-r border-gray-200\">\n          <div className=\"flex h-16 items-center justify-between px-4 border-b border-gray-200\">\n            <h1 className=\"text-lg font-semibold text-gray-900\">{getAppName()} Admin</h1>\n            <button\n              onClick={() => setSidebarOpen(false)}\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              <span className=\"sr-only\">Close sidebar</span>\n              <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </button>\n          </div>\n          <nav className=\"flex-1 px-4 py-4 space-y-1\">\n            {filteredNavigation.map((item) => {\n              const isActive = location.pathname === item.href\n              return (\n                <a\n                  key={item.name}\n                  href={item.href}\n                  className={`group flex items-center px-2 py-2 text-sm font-medium rounded-md ${\n                    isActive\n                      ? 'bg-blue-100 text-blue-700 border border-blue-200'\n                      : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'\n                  }`}\n                >\n                  <item.icon className=\"mr-3 h-5 w-5\" />\n                  {item.name}\n                </a>\n              )\n            })}\n          </nav>\n        </div>\n      </div>\n\n      {/* Desktop sidebar */}\n      <div className=\"hidden lg:fixed lg:inset-y-0 lg:flex lg:w-64 lg:flex-col\">\n        <div className=\"flex flex-col flex-grow bg-white border-r border-gray-200\">\n          <div className=\"flex h-16 items-center px-4 border-b border-gray-200\">\n            <h1 className=\"text-lg font-semibold text-gray-900\">{getAppName()} Admin</h1>\n          </div>\n          <nav className=\"flex-1 px-4 py-4 space-y-1\">\n            {filteredNavigation.map((item) => {\n              const isActive = location.pathname === item.href\n              return (\n                <a\n                  key={item.name}\n                  href={item.href}\n                  className={`group flex items-center px-2 py-2 text-sm font-medium rounded-md ${\n                    isActive\n                      ? 'bg-blue-100 text-blue-700 border border-blue-200'\n                      : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'\n                  }`}\n                >\n                  <item.icon className=\"mr-3 h-5 w-5\" />\n                  {item.name}\n                </a>\n              )\n            })}\n          </nav>\n        </div>\n      </div>\n\n      {/* Main content */}\n      <div className=\"lg:pl-64\">\n        {/* Top bar */}\n        <div className=\"sticky top-0 z-40 bg-white border-b border-gray-200\">\n          <div className=\"flex h-16 items-center justify-between px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex items-center\">\n              <button\n                onClick={() => setSidebarOpen(true)}\n                className=\"lg:hidden text-gray-400 hover:text-gray-600\"\n              >\n                <span className=\"sr-only\">Open sidebar</span>\n                <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\n                </svg>\n              </button>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              {/* Connection status */}\n              <div className=\"flex items-center text-sm\">\n                {isConnected ? (\n                  <>\n                    <WifiIcon className=\"h-4 w-4 text-green-500 mr-1\" />\n                    <span className=\"text-green-600\">Connected</span>\n                  </>\n                ) : (\n                  <>\n                    <WifiIcon className=\"h-4 w-4 text-red-500 mr-1\" />\n                    <span className=\"text-red-600\">Disconnected</span>\n                  </>\n                )}\n              </div>\n\n              {/* User menu */}\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"text-sm text-gray-600\">\n                  {user?.fullName || user?.username}\n                </span>\n                <span className=\"text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded\">\n                  {user?.role}\n                </span>\n                <button\n                  onClick={handleLogout}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                  title=\"Logout\"\n                >\n                  <ArrowRightOnRectangleIcon className=\"h-5 w-5\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Page content */}\n        <main className=\"px-4 sm:px-6 lg:px-8 py-8\">\n          <Outlet />\n        </main>\n      </div>\n    </div>\n  )\n}\n\nexport default AdminLayout","size_bytes":7172},"server/src/socket/handlers.js":{"content":"const { db } = require('../database/init');\nconst { logger } = require('../middleware/errorHandler');\n\nfunction setupSocketHandlers(io) {\n  io.on('connection', (socket) => {\n    logger.info(`Socket connected: ${socket.id}`);\n\n    // Join branch-specific rooms\n    socket.on('join-branch', (branchId) => {\n      socket.join(`branch:${branchId}`);\n      socket.join(`branch:${branchId}:kitchen`);\n      logger.info(`Socket ${socket.id} joined branch ${branchId}`);\n    });\n\n    // Join kitchen room\n    socket.on('join-kitchen', (branchId) => {\n      socket.join(`branch:${branchId}:kitchen`);\n      logger.info(`Socket ${socket.id} joined kitchen for branch ${branchId}`);\n    });\n\n    // Join cashier room\n    socket.on('join-cashier', (branchId) => {\n      socket.join(`branch:${branchId}:cashier`);\n      logger.info(`Socket ${socket.id} joined cashier for branch ${branchId}`);\n    });\n\n    // Handle order status updates\n    socket.on('order-status-update', async (data) => {\n      try {\n        const { orderId, status, userId } = data;\n        \n        // Update order status in database\n        await db('orders')\n          .where({ id: orderId })\n          .update({ \n            status,\n            updated_at: db.raw('CURRENT_TIMESTAMP')\n          });\n\n        // Get updated order with details\n        const order = await db('orders')\n          .select('orders.*', 'tables.table_number', 'branches.name as branch_name')\n          .leftJoin('tables', 'orders.table_id', 'tables.id')\n          .leftJoin('branches', 'orders.branch_id', 'branches.id')\n          .where('orders.id', orderId)\n          .first();\n\n        // Log audit trail\n        await db('audit_logs').insert({\n          user_id: userId,\n          action: 'ORDER_STATUS_UPDATE',\n          meta: JSON.stringify({ orderId, status, socketId: socket.id })\n        });\n\n        // Emit to relevant rooms\n        io.to(`branch:${order.branch_id}:kitchen`).emit('order.updated', order);\n        io.to(`branch:${order.branch_id}:cashier`).emit('order.updated', order);\n        \n        logger.info(`Order ${orderId} status updated to ${status}`);\n      } catch (error) {\n        logger.error('Error updating order status:', error);\n        socket.emit('error', { message: 'Failed to update order status' });\n      }\n    });\n\n    // Handle kitchen acknowledgment\n    socket.on('kitchen-ack', async (data) => {\n      try {\n        const { orderId, userId } = data;\n        \n        await db('orders')\n          .where({ id: orderId })\n          .update({ \n            status: 'PREPARING',\n            updated_at: db.raw('CURRENT_TIMESTAMP')\n          });\n\n        const order = await db('orders')\n          .select('orders.*', 'tables.table_number')\n          .leftJoin('tables', 'orders.table_id', 'tables.id')\n          .where('orders.id', orderId)\n          .first();\n\n        // Emit acknowledgment\n        io.to(`branch:${order.branch_id}:cashier`).emit('kitchen.ack', {\n          orderId,\n          status: 'PREPARING',\n          timestamp: new Date().toISOString()\n        });\n\n        logger.info(`Kitchen acknowledged order ${orderId}`);\n      } catch (error) {\n        logger.error('Error processing kitchen acknowledgment:', error);\n        socket.emit('error', { message: 'Failed to process kitchen acknowledgment' });\n      }\n    });\n\n    // Handle payment updates\n    socket.on('payment-update', async (data) => {\n      try {\n        const { orderId, paymentStatus, userId } = data;\n        \n        await db('orders')\n          .where({ id: orderId })\n          .update({ \n            payment_status: paymentStatus,\n            updated_at: db.raw('CURRENT_TIMESTAMP')\n          });\n\n        const order = await db('orders')\n          .select('orders.*', 'tables.table_number')\n          .leftJoin('tables', 'orders.table_id', 'tables.id')\n          .where('orders.id', orderId)\n          .first();\n\n        // Emit payment update\n        io.to(`branch:${order.branch_id}:cashier`).emit('payment.updated', {\n          orderId,\n          paymentStatus,\n          timestamp: new Date().toISOString()\n        });\n\n        logger.info(`Payment status updated for order ${orderId}: ${paymentStatus}`);\n      } catch (error) {\n        logger.error('Error updating payment status:', error);\n        socket.emit('error', { message: 'Failed to update payment status' });\n      }\n    });\n\n    // Handle printer status\n    socket.on('printer-status', (data) => {\n      const { printerId, status, error } = data;\n      logger.info(`Printer ${printerId} status: ${status}`, error ? { error } : {});\n      \n      // Broadcast printer status to admin users\n      io.emit('printer.status', { printerId, status, error, timestamp: new Date().toISOString() });\n    });\n\n    // Handle disconnect\n    socket.on('disconnect', () => {\n      logger.info(`Socket disconnected: ${socket.id}`);\n    });\n\n    // Error handling\n    socket.on('error', (error) => {\n      logger.error(`Socket error from ${socket.id}:`, error);\n    });\n  });\n}\n\nmodule.exports = { setupSocketHandlers };","size_bytes":5035},"README.md":{"content":"# 🍽️ POSQ Restaurant System\n\nA comprehensive, modern restaurant Point of Sale (POS) and QR ordering system with luxury design and full functionality.\n\n## ✨ Features\n\n### 🎨 **Luxury Design**\n- **Modern Dark Theme**: Elegant black/gold color scheme with glass morphism effects\n- **Responsive Design**: Perfect mobile-first experience with luxury aesthetics\n- **Smooth Animations**: Professional hover effects and transitions\n- **Glass Morphism**: Beautiful backdrop blur effects throughout the interface\n\n### 📱 **Customer Experience**\n- **QR Code Ordering**: Scan table QR codes to access the menu\n- **Mobile-First PWA**: Progressive Web App for seamless mobile experience\n- **Real-time Cart**: Persistent cart with beautiful bottom bar on mobile\n- **Payment Flow**: Complete checkout with QR codes and PIN system\n- **Order Tracking**: Real-time order status updates\n\n### 🏪 **Admin Dashboard**\n- **Complete Management**: Menu, tables, orders, inventory, reports\n- **Role-Based Access**: Admin, manager, cashier, kitchen, waiter roles\n- **Real-time Updates**: Live order management and kitchen display\n- **Professional Reports**: Excel export with comprehensive analytics\n\n### 🗄️ **Database Flexibility**\n- **Dual Mode Support**: Switch between LOCAL (SQLite) and CLOUD (MySQL/PostgreSQL)\n- **Easy Migration**: Seamless switching between database modes\n- **Production Ready**: Optimized for both local and cloud deployment\n\n## 🚀 Quick Start\n\n### Option 1: SQLite (Local Development)\n```bash\n# Clone and setup\ngit clone <repository-url>\ncd posq-restaurant-system\n\n# Install dependencies\ncd server && npm install\ncd ../frontend && npm install\n\n# Run migrations and seeds\ncd ../server\nnpx knex migrate:latest\nnpx knex seed:run\n\n# Start the system\nnpm start  # Backend on port 3001\ncd ../frontend && npm run dev  # Frontend on port 5173\n```\n\n### Option 2: MySQL (Production Ready)\n```bash\n# Run the automated setup script\n./setup-mysql.sh\n\n# Or manual setup:\n# 1. Install MySQL\n# 2. Create database: CREATE DATABASE posq;\n# 3. Update server/.env with MySQL credentials\n# 4. Run: cd server && npx knex migrate:latest && npx knex seed:run\n```\n\n## 🔧 Configuration\n\n### Environment Variables\nCreate `server/.env`:\n```env\n# Database Configuration\nDB_TYPE=mysql2  # or sqlite3\nDB_HOST=localhost\nDB_PORT=3306\nDB_USER=posq\nDB_PASSWORD=posqpassword\nDB_NAME=posq\n\n# JWT Configuration\nJWT_SECRET=your-super-secret-jwt-key\nJWT_REFRESH_SECRET=your-super-secret-refresh-key\n\n# Server Configuration\nPORT=3001\nNODE_ENV=development\nFRONTEND_URL=http://localhost:5173\n```\n\n### Database Switching\nThe system supports runtime switching between database modes:\n1. Go to **Settings** → **Database** tab\n2. Choose **LOCAL** (SQLite) or **CLOUD** (MySQL/PostgreSQL)\n3. Configure connection details\n4. Test connection and apply changes\n\n## 📱 Mobile Experience\n\n### Customer Features\n- **QR Code Scanning**: Each table has a unique QR code\n- **Mobile Menu**: Touch-friendly interface with luxury design\n- **Cart Management**: Beautiful bottom bar with total and checkout\n- **Payment Flow**: Complete mobile payment experience\n- **Order Tracking**: Real-time status updates\n\n### Staff Features\n- **Mobile Admin**: Full admin functionality on mobile devices\n- **Kitchen Display**: Real-time order management\n- **Table Management**: QR code generation and printing\n- **Reports**: Mobile-friendly analytics dashboard\n\n## 🎨 Design System\n\n### Color Palette\n- **Primary**: Dark navy (#1a1a2e) with luxury gradients\n- **Secondary**: Deep blue (#16213e) for depth\n- **Accent**: Elegant red (#e94560) for highlights\n- **Gold**: Luxury gold (#ffd700) for premium elements\n- **Silver**: Sophisticated silver (#c0c0c0) for details\n\n### Typography\n- **Font**: Inter (Google Fonts) for modern readability\n- **Hierarchy**: Clear heading structure with luxury styling\n- **Responsive**: Scales perfectly across all devices\n\n### Components\n- **Buttons**: Gradient backgrounds with hover animations\n- **Cards**: Glass morphism with backdrop blur\n- **Forms**: Elegant inputs with luxury styling\n- **Modals**: Beautiful overlays with smooth transitions\n\n## 🏗️ Architecture\n\n### Backend (Node.js + Express)\n- **RESTful API**: Clean, well-documented endpoints\n- **Authentication**: JWT with role-based access control\n- **Real-time**: Socket.IO for live updates\n- **Database**: Knex.js with migration support\n- **Security**: Comprehensive validation and sanitization\n\n### Frontend (React + Vite)\n- **Modern React**: Hooks, Context API, and best practices\n- **State Management**: React Query for server state\n- **Styling**: TailwindCSS with custom luxury components\n- **PWA**: Progressive Web App capabilities\n- **Responsive**: Mobile-first design approach\n\n### Database Schema\n- **Users**: Role-based authentication system\n- **Branches**: Multi-location support\n- **Tables**: QR code management\n- **Menu**: Categories, items, modifiers\n- **Orders**: Complete order lifecycle\n- **Inventory**: Stock management and recipes\n- **Reports**: Comprehensive analytics\n\n## 📊 Reports & Analytics\n\n### Available Reports\n- **Sales Reports**: Daily, weekly, monthly sales analysis\n- **Top Items**: Best-selling menu items\n- **Table Turnover**: Table utilization metrics\n- **Payment Methods**: Payment analytics\n- **Inventory Usage**: Stock consumption reports\n- **Cash Reconciliation**: Cash management\n\n### Export Features\n- **Excel Export**: Professional Excel files with formatting\n- **Date Ranges**: Custom date range selection\n- **Real-time Data**: Live data from database\n- **Multiple Formats**: Various export options\n\n## 🔒 Security Features\n\n- **JWT Authentication**: Secure token-based authentication\n- **Role-Based Access**: Granular permission system\n- **Input Validation**: Comprehensive data validation\n- **SQL Injection Protection**: Parameterized queries\n- **XSS Protection**: Input sanitization\n- **CSRF Protection**: Cross-site request forgery prevention\n- **Rate Limiting**: API rate limiting\n- **Audit Logging**: Complete activity tracking\n\n## 🚀 Deployment\n\n### Docker Deployment\n```bash\n# Build and run with Docker Compose\ndocker-compose up -d\n```\n\n### Manual Deployment\n1. **Backend**: Deploy Node.js app with PM2\n2. **Frontend**: Build and serve with Nginx\n3. **Database**: Setup MySQL/PostgreSQL\n4. **SSL**: Configure HTTPS with Let's Encrypt\n5. **Monitoring**: Setup logging and monitoring\n\n### Production Checklist\n- [ ] Update JWT secrets\n- [ ] Configure production database\n- [ ] Setup SSL certificates\n- [ ] Configure domain and DNS\n- [ ] Setup backup strategy\n- [ ] Configure monitoring\n- [ ] Test all functionality\n- [ ] Setup user accounts\n\n## 🎯 Default Credentials\n\n### Admin Access\n- **Username**: `admin`\n- **Password**: `admin123`\n\n### Test Data\nThe system comes with sample data:\n- **Restaurant**: POSQ Restaurant\n- **Tables**: 10 sample tables with QR codes\n- **Menu**: Complete menu with categories and items\n- **Users**: Various role-based users\n\n## 📞 Support\n\n### Common Issues\n1. **Database Connection**: Check environment variables\n2. **QR Codes**: Ensure proper URL configuration\n3. **Mobile Issues**: Clear browser cache\n4. **Performance**: Check database indexes\n\n### Troubleshooting\n- Check server logs in `server/logs/`\n- Verify database migrations\n- Test API endpoints\n- Check browser console for errors\n\n## 🎉 Features Completed\n\n✅ **Complete Settings Page** - Full control over colors, restaurant name, database credentials  \n✅ **Fixed Cart Issues** - Persistent cart with mobile-friendly interface  \n✅ **Dynamic Category Management** - Full CRUD operations with database integration  \n✅ **Table Management** - QR generation, printing, and busy/free status  \n✅ **Kitchen Display** - Real-time orders for chefs  \n✅ **Inventory Management** - Stock management and recipe CRUD  \n✅ **Professional Reports** - Excel import/export with dynamic data  \n✅ **Luxury Design** - Modern dark theme with gold accents  \n✅ **Mobile Experience** - Perfect mobile-first design  \n✅ **Database Flexibility** - SQLite/MySQL/PostgreSQL support  \n\n## 🏆 Production Ready\n\nThe POSQ Restaurant System is now a **complete, professional, production-ready** restaurant management system with:\n\n- 🎨 **Luxury Design** with modern aesthetics\n- 📱 **Perfect Mobile Experience** \n- 🗄️ **Flexible Database Support**\n- 🔒 **Enterprise Security**\n- 📊 **Professional Analytics**\n- 🚀 **Easy Deployment**\n\nReady for immediate use in any restaurant environment! 🍽️✨","size_bytes":8509},"server/tests/auth.test.js":{"content":"const request = require('supertest');\nconst app = require('../index');\nconst { db } = require('../src/database/init');\n\ndescribe('Authentication API', () => {\n  beforeAll(async () => {\n    // Setup test database\n    await db.migrate.latest();\n    await db.seed.run();\n  });\n\n  afterAll(async () => {\n    // Cleanup\n    await db.destroy();\n  });\n\n  describe('POST /api/auth/login', () => {\n    it('should login with valid credentials', async () => {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          username: 'admin',\n          password: 'admin123'\n        });\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('accessToken');\n      expect(response.body).toHaveProperty('user');\n      expect(response.body.user.username).toBe('admin');\n    });\n\n    it('should reject invalid credentials', async () => {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          username: 'admin',\n          password: 'wrongpassword'\n        });\n\n      expect(response.status).toBe(401);\n      expect(response.body).toHaveProperty('error');\n    });\n\n    it('should require username and password', async () => {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          username: 'admin'\n        });\n\n      expect(response.status).toBe(400);\n    });\n  });\n\n  describe('POST /api/auth/pin-login', () => {\n    it('should login with valid PIN', async () => {\n      const response = await request(app)\n        .post('/api/auth/pin-login')\n        .send({\n          username: 'cashier1',\n          pin: '5678'\n        });\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('accessToken');\n      expect(response.body.user.username).toBe('cashier1');\n    });\n\n    it('should reject invalid PIN', async () => {\n      const response = await request(app)\n        .post('/api/auth/pin-login')\n        .send({\n          username: 'cashier1',\n          pin: '9999'\n        });\n\n      expect(response.status).toBe(401);\n    });\n  });\n\n  describe('GET /api/auth/profile', () => {\n    let authToken;\n\n    beforeAll(async () => {\n      const loginResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          username: 'admin',\n          password: 'admin123'\n        });\n      \n      authToken = loginResponse.body.accessToken;\n    });\n\n    it('should get user profile with valid token', async () => {\n      const response = await request(app)\n        .get('/api/auth/profile')\n        .set('Authorization', `Bearer ${authToken}`);\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('user');\n      expect(response.body.user.username).toBe('admin');\n    });\n\n    it('should reject request without token', async () => {\n      const response = await request(app)\n        .get('/api/auth/profile');\n\n      expect(response.status).toBe(401);\n    });\n  });\n});","size_bytes":2985},"frontend/src/pages/customer/CartPage.jsx":{"content":"import { useCart } from '../../contexts/CartContext'\nimport { useNavigate } from 'react-router-dom'\nimport { PlusIcon, MinusIcon, TrashIcon, ShoppingBagIcon, ArrowRightIcon } from '@heroicons/react/24/outline'\nimport toast from 'react-hot-toast'\nimport { useSearchParams } from 'react-router-dom'\nfunction CartPage() {\n  const navigate = useNavigate()\n  const { items, total, updateQuantity, removeItem, clearCart } = useCart()\n\n  const [searchParams] = useSearchParams();\n   const table = searchParams.get(\"table\");\n   const branch = searchParams.get(\"branch\") || \"1\";\n\n  const handleQuantityChange = (itemId, newQuantity) => {\n    if (newQuantity <= 0) {\n      removeItem(itemId)\n      toast.success('Item removed from cart')\n    } else {\n      updateQuantity(itemId, newQuantity)\n    }\n  }\n\n  const handleCheckout = () => {\n    if (items.length === 0) {\n      toast.error('Your cart is empty')\n      return\n    }\n    navigate(`/checkout?table=${table}&branch=${branch}`)\n  }\n\n  const handleClearCart = () => {\n    if (items.length === 0) return\n    \n    if (window.confirm('Are you sure you want to clear your cart?')) {\n      clearCart()\n      toast.success('Cart cleared')\n    }\n  }\n\n  if (items.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-50 flex items-center justify-center p-4\">\n        <div className=\"text-center max-w-md\">\n          <div className=\"inline-flex items-center justify-center w-32 h-32 bg-gradient-to-br from-gray-100 to-gray-200 rounded-full mb-6\">\n            <ShoppingBagIcon className=\"h-16 w-16 text-gray-400\" />\n          </div>\n          <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">Your Cart is Empty</h2>\n          <p className=\"text-lg text-gray-600 mb-8\">\n            Discover our delicious menu and add your favorite items!\n          </p>\n          <button\n            onClick={() => navigate(`/menu?table=${table}&branch=${branch}`)}\n            className=\"px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-bold rounded-xl shadow-lg hover:shadow-xl transition-all active:scale-95 flex items-center justify-center gap-2 mx-auto\"\n          >\n            <span>Browse Menu</span>\n            <ArrowRightIcon className=\"h-5 w-5\" />\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-50 py-8\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        \n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-4xl font-black bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent mb-2\">\n              Your Cart\n            </h1>\n            <p className=\"text-gray-600 font-medium\">\n              {items.reduce((sum, item) => sum + item.quantity, 0)} items\n            </p>\n          </div>\n          <button\n            onClick={handleClearCart}\n            className=\"px-4 py-2 bg-red-50 hover:bg-red-100 text-red-600 font-semibold rounded-xl transition-all active:scale-95 flex items-center gap-2\"\n          >\n            <TrashIcon className=\"h-5 w-5\" />\n            <span>Clear Cart</span>\n          </button>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          \n          <div className=\"lg:col-span-2 space-y-4\">\n            {items?.map((item) => (\n              <div \n                key={item.id} \n                className=\"bg-white rounded-2xl shadow-lg border border-gray-100 overflow-hidden hover:shadow-xl transition-shadow\"\n              >\n                <div className=\"p-6\">\n                  <div className=\"flex gap-4\">\n                    {item.image && (\n                      <div className=\"flex-shrink-0\">\n                        <img\n                          src={item.image}\n                          alt={item.name}\n                          className=\"w-24 h-24 object-cover rounded-xl\"\n                          onError={(e) => {\n                            e.target.src = 'https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=100&h=100&fit=crop';\n                          }}\n                        />\n                      </div>\n                    )}\n                    \n                    <div className=\"flex-1 min-w-0\">\n                      <h3 className=\"font-bold text-lg text-gray-900 mb-1\">{item.name}</h3>\n                      <p className=\"text-sm text-gray-600 mb-2\">\n                        {item?.unitPrice?.toFixed(2) || 0} MAD each\n                      </p>\n                      \n                      {item.modifiers && item.modifiers.length > 0 && (\n                        <div className=\"mb-2\">\n                          <p className=\"text-xs font-semibold text-gray-700 mb-1\">Extras:</p>\n                          <div className=\"flex flex-wrap gap-1\">\n                            {item.modifiers.map((modifier) => (\n                              <span \n                                key={modifier.id} \n                                className=\"inline-flex items-center px-2 py-1 bg-blue-50 text-blue-700 text-xs font-medium rounded-lg\"\n                              >\n                                {modifier.name}\n                                {modifier.extra_price > 0 && (\n                                  <span className=\"ml-1\">+{modifier.extra_price.toFixed(2)}</span>\n                                )}\n                              </span>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                      \n                      {item.note && (\n                        <div className=\"mt-2 p-2 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                          <p className=\"text-xs font-semibold text-yellow-800 mb-1\">Note:</p>\n                          <p className=\"text-xs text-yellow-700 italic\">\"{item.note}\"</p>\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"flex flex-col items-end justify-between\">\n                      <button\n                        onClick={() => {\n                          removeItem(item.id)\n                          toast.success('Item removed')\n                        }}\n                        className=\"p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors\"\n                        title=\"Remove item\"\n                      >\n                        <TrashIcon className=\"h-5 w-5\" />\n                      </button>\n\n                      <div className=\"text-right\">\n                        <p className=\"text-2xl font-bold text-gray-900\">\n                          {item.total.toFixed(2)}\n                        </p>\n                        <p className=\"text-xs text-gray-600\">MAD</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"mt-4 flex items-center justify-center gap-3 bg-gray-50 rounded-xl p-2\">\n                    <button\n                      onClick={() => handleQuantityChange(item.id, item.quantity - 1)}\n                      className=\"p-2 bg-white hover:bg-gray-100 rounded-lg transition-colors shadow-sm\"\n                    >\n                      <MinusIcon className=\"h-5 w-5 text-gray-700\" />\n                    </button>\n                    <span className=\"text-xl font-bold text-gray-900 min-w-[3rem] text-center\">\n                      {item.quantity}\n                    </span>\n                    <button\n                      onClick={() => handleQuantityChange(item.id, item.quantity + 1)}\n                      className=\"p-2 bg-white hover:bg-gray-100 rounded-lg transition-colors shadow-sm\"\n                    >\n                      <PlusIcon className=\"h-5 w-5 text-gray-700\" />\n                    </button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"lg:col-span-1\">\n            <div className=\"sticky top-4 space-y-6\">\n              \n              <div className=\"bg-gradient-to-br from-blue-50 to-purple-50 rounded-2xl shadow-lg border-2 border-blue-100 p-6\">\n                <h2 className=\"text-xl font-bold text-gray-900 mb-6\">Order Summary</h2>\n                \n                <div className=\"space-y-3 mb-6\">\n                  <div className=\"flex justify-between text-gray-700\">\n                    <span>Subtotal:</span>\n                    <span className=\"font-semibold\">{total.toFixed(2)} MAD</span>\n                  </div>\n                  <div className=\"flex justify-between text-gray-700\">\n                    <span>Items:</span>\n                    <span className=\"font-semibold\">{items.reduce((sum, item) => sum + item.quantity, 0)}</span>\n                  </div>\n                </div>\n\n                <div className=\"border-t-2 border-blue-200 pt-4 mb-6\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-lg font-bold text-gray-900\">Total:</span>\n                    <div className=\"text-right\">\n                      <div className=\"text-3xl font-black bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                        {total.toFixed(2)}\n                      </div>\n                      <div className=\"text-sm text-gray-600\">MAD</div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <button\n                    onClick={handleCheckout}\n                    className=\"w-full py-4 px-6 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-bold rounded-xl shadow-lg hover:shadow-xl transition-all active:scale-95 flex items-center justify-center gap-2\"\n                  >\n                    <span>Proceed to Checkout</span>\n                    <ArrowRightIcon className=\"h-5 w-5\" />\n                  </button>\n                  \n                  <button\n                    onClick={() => navigate(`/menu?table=${table}&branch=${branch}`)}\n                    className=\"w-full py-4 px-6 bg-white hover:bg-gray-50 text-gray-700 font-semibold rounded-xl border-2 border-gray-200 transition-all active:scale-95\"\n                  >\n                    Continue Shopping\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"bg-white rounded-2xl shadow-lg border border-gray-100 p-6\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"flex-shrink-0\">\n                    <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                      <span className=\"text-xl\">🔥</span>\n                    </div>\n                  </div>\n                  <div>\n                    <h3 className=\"font-bold text-gray-900 mb-1\">Fresh & Fast</h3>\n                    <p className=\"text-sm text-gray-600\">\n                      Your order will be prepared fresh when you complete payment!\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default CartPage\n","size_bytes":11375},"frontend/src/components/TableForm.jsx":{"content":"import { useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { tablesAPI } from '../services/api'\nimport toast from 'react-hot-toast'\n\nfunction TableForm({ \n  table = null, \n  onSave, \n  onCancel,\n  branchId = 1 \n}) {\n  const [loading, setLoading] = useState(false)\n  \n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n    watch\n  } = useForm({\n    defaultValues: {\n      number: table?.table_number || '',\n      capacity: table?.capacity || 4,\n      location: table?.location || '',\n      isActive: table?.is_active !== false\n    }\n  })\n\n  const onSubmit = async (data) => {\n    try {\n      setLoading(true)\n      \n      const tableData = {\n        number: data.number,\n        capacity: parseInt(data.capacity),\n        location: data.location || '',\n        isActive: data.isActive\n      }\n\n      let response\n      if (table) {\n        // Update existing table\n        response = await tablesAPI.updateTable(table.id, tableData)\n      } else {\n        // Create new table\n        response = await tablesAPI.createTable(tableData)\n      }\n\n      toast.success(`Table ${table ? 'updated' : 'created'} successfully`)\n      onSave(response.data.table)\n    } catch (error) {\n      console.error('Table save error:', error)\n      toast.error(error.response?.data?.error || 'Failed to save table')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n      {/* Basic Information */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <label className=\"form-label\">Table Number *</label>\n          <input\n            type=\"text\"\n            {...register('number', { required: 'Table number is required' })}\n            className=\"form-input\"\n            placeholder=\"e.g., T1, Table 1\"\n          />\n          {errors.number && (\n            <p className=\"form-error\">{errors.number.message}</p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"form-label\">Capacity *</label>\n          <input\n            type=\"number\"\n            min=\"1\"\n            max=\"20\"\n            {...register('capacity', { \n              required: 'Capacity is required',\n              min: { value: 1, message: 'Capacity must be at least 1' },\n              max: { value: 20, message: 'Capacity cannot exceed 20' }\n            })}\n            className=\"form-input\"\n            placeholder=\"4\"\n          />\n          {errors.capacity && (\n            <p className=\"form-error\">{errors.capacity.message}</p>\n          )}\n        </div>\n      </div>\n\n      <div>\n        <label className=\"form-label\">Location</label>\n        <input\n          type=\"text\"\n          {...register('location')}\n          className=\"form-input\"\n          placeholder=\"e.g., Main Hall, Terrace, VIP Section\"\n        />\n      </div>\n\n      {/* Status */}\n      <div>\n        <label className=\"flex items-center\">\n          <input\n            type=\"checkbox\"\n            {...register('isActive')}\n            className=\"form-checkbox\"\n          />\n          <span className=\"ml-2 text-sm text-gray-700\">Active (available for customers)</span>\n        </label>\n      </div>\n\n      {/* Actions */}\n      <div className=\"flex justify-end space-x-3 pt-6 border-t border-gray-200\">\n        <button\n          type=\"button\"\n          onClick={onCancel}\n          className=\"btn-outline\"\n          disabled={loading}\n        >\n          Cancel\n        </button>\n        <button\n          type=\"submit\"\n          className=\"btn-primary\"\n          disabled={loading}\n        >\n          {loading ? (\n            <>\n              <div className=\"loading-spinner mr-2\"></div>\n              {table ? 'Updating...' : 'Creating...'}\n            </>\n          ) : (\n            table ? 'Update Table' : 'Create Table'\n          )}\n        </button>\n      </div>\n    </form>\n  )\n}\n\nexport default TableForm","size_bytes":3922},"frontend/src/pages/admin/SettingsPage.jsx":{"content":"import { useState, useEffect } from 'react'\nimport { settingsAPI, appSettingsAPI, backupAPI } from '../../services/api'\nimport { useTheme } from '../../contexts/ThemeContext'\nimport { \n  CogIcon, \n  PaintBrushIcon, \n  CloudIcon, \n  ComputerDesktopIcon,\n  CheckIcon,\n  XMarkIcon,\n  EyeIcon,\n  EyeSlashIcon,\n  BuildingOfficeIcon,\n  PhotoIcon,\n  AdjustmentsHorizontalIcon,\n  ArrowDownTrayIcon,\n  ArrowUpTrayIcon,\n  TrashIcon,\n  CircleStackIcon\n} from '@heroicons/react/24/outline'\nimport toast from 'react-hot-toast'\n\nfunction SettingsPage() {\n  const { settings, updateSettings, getSetting, loading } = useTheme()\n  const [activeTab, setActiveTab] = useState('general')\n  const [saving, setSaving] = useState(false)\n  const [showPassword, setShowPassword] = useState(false)\n  const [localSettings, setLocalSettings] = useState({})\n  const [backups, setBackups] = useState([])\n  const [loadingBackups, setLoadingBackups] = useState(false)\n  const [creatingBackup, setCreatingBackup] = useState(false)\n\n  useEffect(() => {\n    // Initialize local settings with current theme settings\n    if (settings && Object.keys(settings).length > 0) {\n      const initialSettings = {}\n      Object.keys(settings).forEach(key => {\n        initialSettings[key] = settings[key].value\n      })\n      console.log('Initializing local settings:', initialSettings)\n      setLocalSettings(initialSettings)\n    }\n  }, [settings])\n\n  const handleSettingChange = (key, value) => {\n    setLocalSettings(prev => ({\n      ...prev,\n      [key]: value\n    }))\n  }\n\n  const handleSaveSettings = async () => {\n    try {\n      setSaving(true)\n      \n      const success = await updateSettings(localSettings)\n      \n      if (success) {\n        toast.success('Settings saved successfully!')\n      } else {\n        toast.error('Failed to save settings')\n      }\n    } catch (error) {\n      console.error('Failed to save settings:', error)\n      toast.error('Failed to save settings')\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const testDatabaseConnection = async () => {\n    try {\n      setSaving(true)\n      const response = await settingsAPI.testDatabaseConnection({\n        type: localSettings.dbType || 'sqlite3',\n        host: localSettings.dbHost || 'localhost',\n        port: localSettings.dbPort || 3306,\n        name: localSettings.dbName || 'posq',\n        user: localSettings.dbUser || 'posq',\n        password: localSettings.dbPassword || '',\n        filename: localSettings.dbPath || './data/posq.db'\n      })\n      \n      if (response.data.success) {\n        toast.success(response.data.message || 'Database connection successful!')\n      } else {\n        toast.error(response.data.error || 'Database connection failed')\n      }\n    } catch (error) {\n      console.error('Database connection test failed:', error)\n      toast.error(error.response?.data?.error || 'Database connection test failed')\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const initializeDatabase = async () => {\n    try {\n      setSaving(true)\n      const response = await settingsAPI.initializeDatabase({\n        type: localSettings.dbType || 'sqlite3',\n        host: localSettings.dbHost || 'localhost',\n        port: localSettings.dbPort || 3306,\n        name: localSettings.dbName || 'posq',\n        user: localSettings.dbUser || 'posq',\n        password: localSettings.dbPassword || '',\n        filename: localSettings.dbPath || './data/posq.db'\n      })\n      \n      if (response.data.success) {\n        toast.success(response.data.message || 'Database initialized successfully!')\n      } else {\n        toast.error(response.data.error || 'Database initialization failed')\n      }\n    } catch (error) {\n      console.error('Database initialization failed:', error)\n      toast.error(error.response?.data?.error || 'Database initialization failed')\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const exportDatabase = async () => {\n    try {\n      setSaving(true)\n      const response = await settingsAPI.exportDatabase()\n      \n      // Create blob and download\n      const blob = new Blob([response.data])\n      const url = window.URL.createObjectURL(blob)\n      const link = document.createElement('a')\n      link.href = url\n      \n      // Get filename from Content-Disposition header or use default\n      const contentDisposition = response.headers['content-disposition']\n      let filename = `posq-backup-${Date.now()}.db`\n      \n      if (contentDisposition) {\n        const filenameMatch = contentDisposition.match(/filename=\"?(.+)\"?/)\n        if (filenameMatch) {\n          filename = filenameMatch[1]\n        }\n      }\n      \n      link.setAttribute('download', filename)\n      document.body.appendChild(link)\n      link.click()\n      link.remove()\n      window.URL.revokeObjectURL(url)\n      \n      toast.success('Database exported successfully!')\n    } catch (error) {\n      console.error('Database export failed:', error)\n      toast.error('Database export failed')\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const switchOperatingMode = async (mode) => {\n    try {\n      setSaving(true)\n      const response = await settingsAPI.changeOperatingMode(mode)\n      \n      if (response.data.success) {\n        handleSettingChange('operatingMode', mode)\n        \n        // Automatically set the correct database type based on mode\n        if (mode === 'LOCAL') {\n          handleSettingChange('dbType', 'sqlite3')\n        } else if (mode === 'CLOUD') {\n          handleSettingChange('dbType', 'mysql2')\n        }\n        \n        toast.success(`Operating mode changed to ${mode}`)\n      } else {\n        toast.error('Failed to change operating mode')\n      }\n    } catch (error) {\n      console.error('Operating mode change failed:', error)\n      toast.error('Failed to change operating mode')\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const loadBackups = async () => {\n    try {\n      setLoadingBackups(true)\n      const response = await backupAPI.listBackups()\n      if (response.data.success) {\n        setBackups(response.data.backups || [])\n      }\n    } catch (error) {\n      console.error('Failed to load backups:', error)\n      toast.error('Failed to load backups')\n    } finally {\n      setLoadingBackups(false)\n    }\n  }\n\n  const createBackup = async () => {\n    try {\n      setCreatingBackup(true)\n      const response = await backupAPI.createBackup()\n      if (response.data.success) {\n        toast.success('Backup created successfully!')\n        await loadBackups()\n      } else {\n        toast.error('Failed to create backup')\n      }\n    } catch (error) {\n      console.error('Failed to create backup:', error)\n      toast.error('Failed to create backup')\n    } finally {\n      setCreatingBackup(false)\n    }\n  }\n\n  const restoreBackup = async (filename) => {\n    if (!confirm(`Are you sure you want to restore from ${filename}? This will replace all current data!`)) {\n      return\n    }\n\n    try {\n      setSaving(true)\n      const response = await backupAPI.restoreBackup(filename)\n      if (response.data.success) {\n        toast.success('Backup restored successfully! Please refresh the page.')\n      } else {\n        toast.error('Failed to restore backup')\n      }\n    } catch (error) {\n      console.error('Failed to restore backup:', error)\n      toast.error('Failed to restore backup')\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const deleteBackup = async (filename) => {\n    if (!confirm(`Are you sure you want to delete ${filename}?`)) {\n      return\n    }\n\n    try {\n      const response = await backupAPI.deleteBackup(filename)\n      if (response.data.success) {\n        toast.success('Backup deleted successfully!')\n        await loadBackups()\n      } else {\n        toast.error('Failed to delete backup')\n      }\n    } catch (error) {\n      console.error('Failed to delete backup:', error)\n      toast.error('Failed to delete backup')\n    }\n  }\n\n  useEffect(() => {\n    if (activeTab === 'backup') {\n      loadBackups()\n    }\n  }, [activeTab])\n\n  const tabs = [\n    { id: 'general', name: 'General', icon: CogIcon },\n    { id: 'branding', name: 'Branding', icon: BuildingOfficeIcon },\n    { id: 'theme', name: 'Theme', icon: BuildingOfficeIcon },\n    { id: 'layout', name: 'Layout', icon: AdjustmentsHorizontalIcon },\n    { id: 'ui_text', name: 'UI Text', icon: PhotoIcon },\n    { id: 'menu_templates', name: 'Menu Templates', icon: PaintBrushIcon },\n    { id: 'payment', name: 'Payment', icon: CloudIcon },\n    { id: 'database', name: 'Database', icon: CloudIcon },\n    { id: 'backup', name: 'Backup', icon: ArrowDownTrayIcon },\n    { id: 'printer', name: 'Printer', icon: ComputerDesktopIcon }\n  ]\n\n  if (loading && Object.keys(settings).length === 0) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"text-center\">\n          <div className=\"loading-spinner mb-4\"></div>\n          <p className=\"text-gray-600\">Loading settings...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Settings</h1>\n          <p className=\"text-gray-600 mt-2\">Configure your restaurant system</p>\n        </div>\n        <button\n          onClick={handleSaveSettings}\n          disabled={saving}\n          className=\"btn-primary\"\n        >\n          {saving ? (\n            <>\n              <div className=\"loading-spinner mr-2\"></div>\n              Saving...\n            </>\n          ) : (\n            <>\n              <CheckIcon className=\"h-5 w-5 mr-2\" />\n              Save Settings\n            </>\n          )}\n        </button>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"border-b border-gray-200\">\n        <nav className=\"-mb-px flex space-x-8\">\n          {tabs.map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id)}\n              className={`py-2 px-1 border-b-2 font-medium text-sm ${\n                activeTab === tab.id\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              <tab.icon className=\"h-5 w-5 inline mr-2\" />\n              {tab.name}\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Tab Content */}\n      <div className=\"space-y-6\">\n        {/* General Settings */}\n        {activeTab === 'general' && (\n  <div className=\"card\">\n    <div className=\"card-header\">\n      <h2 className=\"text-xl font-semibold text-gray-900\">General Settings</h2>\n      <p className=\"text-gray-600\">Basic application configuration</p>\n    </div>\n    <div className=\"card-body space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <label className=\"form-label\">Application Name</label>\n          <input\n            type=\"text\"\n            value={localSettings.app_name || ''}\n            onChange={(e) => handleSettingChange('app_name', e.target.value)}\n            className=\"form-input\"\n            placeholder=\"Enter application name\"\n          />\n        </div>\n        <div>\n          <label className=\"form-label\">Currency</label>\n          <select\n            value={localSettings.currency || 'MAD'}\n            onChange={(e) => handleSettingChange('currency', e.target.value)}\n            className=\"form-input\"\n          >\n            <option value=\"MAD\">MAD (Moroccan Dirham)</option>\n            <option value=\"USD\">USD (US Dollar)</option>\n            <option value=\"EUR\">EUR (Euro)</option>\n            <option value=\"GBP\">GBP (British Pound)</option>\n          </select>\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <label className=\"form-label\">Tax Rate (%)</label>\n          <input\n            type=\"number\"\n            min=\"0\"\n            max=\"100\"\n            step=\"0.1\"\n            value={localSettings.tax_rate || 10}\n            onChange={(e) => handleSettingChange('tax_rate', parseFloat(e.target.value))}\n            className=\"form-input\"\n            placeholder=\"10\"\n          />\n        </div>\n        <div>\n          <label className=\"form-label\">Service Charge (%)</label>\n          <input\n            type=\"number\"\n            min=\"0\"\n            max=\"100\"\n            step=\"0.1\"\n            value={localSettings.service_charge || 5}\n            onChange={(e) => handleSettingChange('service_charge', parseFloat(e.target.value))}\n            className=\"form-input\"\n            placeholder=\"5\"\n          />\n        </div>\n      </div>\n\n      {/* Contact Information Section */}\n      <div className=\"border-t border-gray-200 pt-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Contact Information</h3>\n        <div className=\"grid grid-cols-1 gap-6\">\n          <div>\n            <label className=\"form-label\">Restaurant Address</label>\n            <textarea\n              value={localSettings.restaurant_address || ''}\n              onChange={(e) => handleSettingChange('restaurant_address', e.target.value)}\n              className=\"form-input\"\n              rows={2}\n              placeholder=\"Enter your restaurant address\"\n            />\n            <p className=\"text-sm text-gray-500 mt-1\">This address will appear on invoices and receipts</p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <label className=\"form-label\">Phone Number</label>\n              <input\n                type=\"text\"\n                value={localSettings.restaurant_phone || ''}\n                onChange={(e) => handleSettingChange('restaurant_phone', e.target.value)}\n                className=\"form-input\"\n                placeholder=\"+1 234 567 8900\"\n              />\n              <p className=\"text-sm text-gray-500 mt-1\">Your restaurant's contact number</p>\n            </div>\n            \n            <div>\n              <label className=\"form-label\">Email Address</label>\n              <input\n                type=\"email\"\n                value={localSettings.restaurant_email || ''}\n                onChange={(e) => handleSettingChange('restaurant_email', e.target.value)}\n                className=\"form-input\"\n                placeholder=\"info@restaurant.com\"\n              />\n              <p className=\"text-sm text-gray-500 mt-1\">Your restaurant's email address</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div>\n        <label className=\"form-label\">Welcome Message</label>\n        <textarea\n          value={localSettings.welcome_message || ''}\n          onChange={(e) => handleSettingChange('welcome_message', e.target.value)}\n          className=\"form-input\"\n          rows={3}\n          placeholder=\"Welcome to our restaurant!\"\n        />\n      </div>\n    </div>\n  </div>\n        )}\n\n        {/* Branding Settings */}\n        {activeTab === 'branding' && (\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Branding</h2>\n              <p className=\"text-gray-600\">Customize your restaurant's appearance</p>\n            </div>\n            <div className=\"card-body space-y-6\">\n              <div>\n                <label className=\"form-label\">Logo URL</label>\n                <input\n                  type=\"url\"\n                  value={localSettings.logo_url || ''}\n                  onChange={(e) => handleSettingChange('logo_url', e.target.value)}\n                  className=\"form-input\"\n                  placeholder=\"https://example.com/logo.png\"\n                />\n                <p className=\"text-sm text-gray-500 mt-1\">Enter the URL of your restaurant logo</p>\n              </div>\n              \n              <div>\n                <label className=\"form-label\">Favicon URL</label>\n                <input\n                  type=\"url\"\n                  value={localSettings.favicon_url || ''}\n                  onChange={(e) => handleSettingChange('favicon_url', e.target.value)}\n                  className=\"form-input\"\n                  placeholder=\"https://example.com/favicon.ico\"\n                />\n                <p className=\"text-sm text-gray-500 mt-1\">Enter the URL of your favicon</p>\n              </div>\n\n              {localSettings.logo_url && (\n                <div className=\"mt-4\">\n                  <label className=\"form-label\">Logo Preview</label>\n                  <div className=\"mt-2 p-4 border border-gray-200 rounded-lg bg-gray-50\">\n                    <img\n                      src={localSettings.logo_url}\n                      alt=\"Logo Preview\"\n                      className=\"h-16 w-auto object-contain\"\n                      onError={(e) => {\n                        e.target.style.display = 'none'\n                      }}\n                    />\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Theme Settings */}\n        {activeTab === 'theme' && (\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Theme Colors</h2>\n              <p className=\"text-gray-600\">Customize your application's color scheme</p>\n            </div>\n            <div className=\"card-body space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                <div>\n                  <label className=\"form-label\">Primary Color</label>\n                  <div className=\"flex items-center space-x-3\">\n                    <input\n                      type=\"color\"\n                      value={localSettings.primary_color || '#3B82F6'}\n                      onChange={(e) => handleSettingChange('primary_color', e.target.value)}\n                      className=\"w-12 h-12 rounded-lg border border-gray-300 cursor-pointer\"\n                    />\n                    <input\n                      type=\"text\"\n                      value={localSettings.primary_color || '#3B82F6'}\n                      onChange={(e) => handleSettingChange('primary_color', e.target.value)}\n                      className=\"form-input flex-1\"\n                      placeholder=\"#3B82F6\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"form-label\">Secondary Color</label>\n                  <div className=\"flex items-center space-x-3\">\n                    <input\n                      type=\"color\"\n                      value={localSettings.secondary_color || '#1E40AF'}\n                      onChange={(e) => handleSettingChange('secondary_color', e.target.value)}\n                      className=\"w-12 h-12 rounded-lg border border-gray-300 cursor-pointer\"\n                    />\n                    <input\n                      type=\"text\"\n                      value={localSettings.secondary_color || '#1E40AF'}\n                      onChange={(e) => handleSettingChange('secondary_color', e.target.value)}\n                      className=\"form-input flex-1\"\n                      placeholder=\"#1E40AF\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"form-label\">Accent Color</label>\n                  <div className=\"flex items-center space-x-3\">\n                    <input\n                      type=\"color\"\n                      value={localSettings.accent_color || '#60A5FA'}\n                      onChange={(e) => handleSettingChange('accent_color', e.target.value)}\n                      className=\"w-12 h-12 rounded-lg border border-gray-300 cursor-pointer\"\n                    />\n                    <input\n                      type=\"text\"\n                      value={localSettings.accent_color || '#60A5FA'}\n                      onChange={(e) => handleSettingChange('accent_color', e.target.value)}\n                      className=\"form-input flex-1\"\n                      placeholder=\"#60A5FA\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"form-label\">Success Color</label>\n                  <div className=\"flex items-center space-x-3\">\n                    <input\n                      type=\"color\"\n                      value={localSettings.success_color || '#10B981'}\n                      onChange={(e) => handleSettingChange('success_color', e.target.value)}\n                      className=\"w-12 h-12 rounded-lg border border-gray-300 cursor-pointer\"\n                    />\n                    <input\n                      type=\"text\"\n                      value={localSettings.success_color || '#10B981'}\n                      onChange={(e) => handleSettingChange('success_color', e.target.value)}\n                      className=\"form-input flex-1\"\n                      placeholder=\"#10B981\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"form-label\">Warning Color</label>\n                  <div className=\"flex items-center space-x-3\">\n                    <input\n                      type=\"color\"\n                      value={localSettings.warning_color || '#F59E0B'}\n                      onChange={(e) => handleSettingChange('warning_color', e.target.value)}\n                      className=\"w-12 h-12 rounded-lg border border-gray-300 cursor-pointer\"\n                    />\n                    <input\n                      type=\"text\"\n                      value={localSettings.warning_color || '#F59E0B'}\n                      onChange={(e) => handleSettingChange('warning_color', e.target.value)}\n                      className=\"form-input flex-1\"\n                      placeholder=\"#F59E0B\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"form-label\">Error Color</label>\n                  <div className=\"flex items-center space-x-3\">\n                    <input\n                      type=\"color\"\n                      value={localSettings.error_color || '#EF4444'}\n                      onChange={(e) => handleSettingChange('error_color', e.target.value)}\n                      className=\"w-12 h-12 rounded-lg border border-gray-300 cursor-pointer\"\n                    />\n                    <input\n                      type=\"text\"\n                      value={localSettings.error_color || '#EF4444'}\n                      onChange={(e) => handleSettingChange('error_color', e.target.value)}\n                      className=\"form-input flex-1\"\n                      placeholder=\"#EF4444\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"form-label\">Background Color</label>\n                  <div className=\"flex items-center space-x-3\">\n                    <input\n                      type=\"color\"\n                      value={localSettings.background_color || '#F8FAFC'}\n                      onChange={(e) => handleSettingChange('background_color', e.target.value)}\n                      className=\"w-12 h-12 rounded-lg border border-gray-300 cursor-pointer\"\n                    />\n                    <input\n                      type=\"text\"\n                      value={localSettings.background_color || '#F8FAFC'}\n                      onChange={(e) => handleSettingChange('background_color', e.target.value)}\n                      className=\"form-input flex-1\"\n                      placeholder=\"#F8FAFC\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"form-label\">Surface Color</label>\n                  <div className=\"flex items-center space-x-3\">\n                    <input\n                      type=\"color\"\n                      value={localSettings.surface_color || '#FFFFFF'}\n                      onChange={(e) => handleSettingChange('surface_color', e.target.value)}\n                      className=\"w-12 h-12 rounded-lg border border-gray-300 cursor-pointer\"\n                    />\n                    <input\n                      type=\"text\"\n                      value={localSettings.surface_color || '#FFFFFF'}\n                      onChange={(e) => handleSettingChange('surface_color', e.target.value)}\n                      className=\"form-input flex-1\"\n                      placeholder=\"#FFFFFF\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Layout Settings */}\n        {activeTab === 'layout' && (\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Layout Settings</h2>\n              <p className=\"text-gray-600\">Customize the application layout</p>\n            </div>\n            <div className=\"card-body space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"form-label\">Border Radius (px)</label>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"24\"\n                    value={localSettings.border_radius || 12}\n                    onChange={(e) => handleSettingChange('border_radius', parseInt(e.target.value))}\n                    className=\"form-input\"\n                    placeholder=\"12\"\n                  />\n                </div>\n                <div>\n                  <label className=\"form-label\">Sidebar Width (px)</label>\n                  <input\n                    type=\"number\"\n                    min=\"200\"\n                    max=\"400\"\n                    value={localSettings.sidebar_width || 256}\n                    onChange={(e) => handleSettingChange('sidebar_width', parseInt(e.target.value))}\n                    className=\"form-input\"\n                    placeholder=\"256\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label className=\"form-label\">Shadow Intensity</label>\n                <select\n                  value={localSettings.shadow_intensity || 'medium'}\n                  onChange={(e) => handleSettingChange('shadow_intensity', e.target.value)}\n                  className=\"form-input\"\n                >\n                  <option value=\"light\">Light</option>\n                  <option value=\"medium\">Medium</option>\n                  <option value=\"heavy\">Heavy</option>\n                </select>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Database Settings */}\n        {activeTab === 'database' && (\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Database Settings</h2>\n              <p className=\"text-gray-600\">Configure and manage your database connection</p>\n            </div>\n            <div className=\"card-body space-y-6\">\n              {/* Information Banner */}\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                <div className=\"flex\">\n                  <div className=\"flex-shrink-0\">\n                    <CircleStackIcon className=\"h-5 w-5 text-blue-400\" />\n                  </div>\n                  <div className=\"ml-3\">\n                    <h3 className=\"text-sm font-medium text-blue-800\">Database Management</h3>\n                    <div className=\"mt-2 text-sm text-blue-700 space-y-1\">\n                      <p>• <strong>Local Mode:</strong> Uses SQLite - perfect for single-device setup</p>\n                      <p>• <strong>Cloud Mode:</strong> Uses MySQL - for multi-device/production environments</p>\n                      <p>• <strong>Initialize:</strong> Creates database, tables, and admin user automatically</p>\n                      <p>• <strong>Export:</strong> Download a backup of your entire database</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Operating Mode Toggle */}\n              <div>\n                <label className=\"form-label\">Operating Mode</label>\n                <div className=\"flex space-x-4 mt-2\">\n                  <button\n                    onClick={() => switchOperatingMode('LOCAL')}\n                    className={`flex-1 p-4 rounded-xl border-2 transition-all duration-200 ${\n                      localSettings.operatingMode === 'LOCAL'\n                        ? 'border-blue-500 bg-blue-50 text-blue-700'\n                        : 'border-gray-300 hover:border-gray-400'\n                    }`}\n                  >\n                    <ComputerDesktopIcon className=\"h-8 w-8 mx-auto mb-2\" />\n                    <h3 className=\"font-semibold\">Local Mode</h3>\n                    <p className=\"text-sm text-gray-600\">SQLite Database</p>\n                  </button>\n                  <button\n                    onClick={() => switchOperatingMode('CLOUD')}\n                    className={`flex-1 p-4 rounded-xl border-2 transition-all duration-200 ${\n                      localSettings.operatingMode === 'CLOUD'\n                        ? 'border-blue-500 bg-blue-50 text-blue-700'\n                        : 'border-gray-300 hover:border-gray-400'\n                    }`}\n                  >\n                    <CloudIcon className=\"h-8 w-8 mx-auto mb-2\" />\n                    <h3 className=\"font-semibold\">Cloud Mode</h3>\n                    <p className=\"text-sm text-gray-600\">MySQL Database</p>\n                  </button>\n                </div>\n              </div>\n\n              {/* Database Configuration */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"form-label\">Database Type</label>\n                  <select\n                    value={localSettings.dbType || 'sqlite3'}\n                    onChange={(e) => handleSettingChange('dbType', e.target.value)}\n                    className=\"form-input\"\n                  >\n                    <option value=\"sqlite3\">SQLite</option>\n                    <option value=\"mysql2\">MySQL</option>\n                    <option value=\"pg\">PostgreSQL</option>\n                  </select>\n                </div>\n                <div>\n                  <label className=\"form-label\">Database Host</label>\n                  <input\n                    type=\"text\"\n                    value={localSettings.dbHost || 'localhost'}\n                    onChange={(e) => handleSettingChange('dbHost', e.target.value)}\n                    className=\"form-input\"\n                    placeholder=\"localhost\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"form-label\">Database Port</label>\n                  <input\n                    type=\"number\"\n                    value={localSettings.dbPort || 3306}\n                    onChange={(e) => handleSettingChange('dbPort', parseInt(e.target.value))}\n                    className=\"form-input\"\n                    placeholder=\"3306\"\n                  />\n                </div>\n                <div>\n                  <label className=\"form-label\">Database Name</label>\n                  <input\n                    type=\"text\"\n                    value={localSettings.dbName || 'posq'}\n                    onChange={(e) => handleSettingChange('dbName', e.target.value)}\n                    className=\"form-input\"\n                    placeholder=\"posq\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"form-label\">Database User</label>\n                  <input\n                    type=\"text\"\n                    value={localSettings.dbUser || 'posq'}\n                    onChange={(e) => handleSettingChange('dbUser', e.target.value)}\n                    className=\"form-input\"\n                    placeholder=\"posq\"\n                  />\n                </div>\n                <div>\n                  <label className=\"form-label\">Database Password</label>\n                  <div className=\"relative\">\n                    <input\n                      type={showPassword ? 'text' : 'password'}\n                      value={localSettings.dbPassword || 'posqpassword'}\n                      onChange={(e) => handleSettingChange('dbPassword', e.target.value)}\n                      className=\"form-input pr-10\"\n                      placeholder=\"posqpassword\"\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n                    >\n                      {showPassword ? (\n                        <EyeSlashIcon className=\"h-5 w-5 text-gray-400\" />\n                      ) : (\n                        <EyeIcon className=\"h-5 w-5 text-gray-400\" />\n                      )}\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              {/* Show Database Path only in LOCAL mode */}\n              {localSettings.operatingMode === 'LOCAL' && (\n                <div>\n                  <label className=\"form-label\">Database Path (SQLite only)</label>\n                  <input\n                    type=\"text\"\n                    value={localSettings.dbPath || './data/posq.db'}\n                    onChange={(e) => handleSettingChange('dbPath', e.target.value)}\n                    className=\"form-input\"\n                    placeholder=\"./data/posq.db\"\n                  />\n                </div>\n              )}\n\n              <div className=\"flex justify-end space-x-3\">\n                <button\n                  onClick={testDatabaseConnection}\n                  disabled={saving}\n                  className=\"btn-outline\"\n                >\n                  {saving ? (\n                    <>\n                      <div className=\"loading-spinner mr-2\"></div>\n                      Testing...\n                    </>\n                  ) : (\n                    <>\n                      <CircleStackIcon className=\"h-5 w-5 mr-2\" />\n                      Test Connection\n                    </>\n                  )}\n                </button>\n                \n                <button\n                  onClick={initializeDatabase}\n                  disabled={saving}\n                  className=\"btn-primary\"\n                >\n                  {saving ? (\n                    <>\n                      <div className=\"loading-spinner mr-2\"></div>\n                      Initializing...\n                    </>\n                  ) : (\n                    <>\n                      <CircleStackIcon className=\"h-5 w-5 mr-2\" />\n                      Initialize Database\n                    </>\n                  )}\n                </button>\n                \n                <button\n                  onClick={exportDatabase}\n                  disabled={saving}\n                  className=\"btn-outline\"\n                >\n                  {saving ? (\n                    <>\n                      <div className=\"loading-spinner mr-2\"></div>\n                      Exporting...\n                    </>\n                  ) : (\n                    <>\n                      <ArrowDownTrayIcon className=\"h-5 w-5 mr-2\" />\n                      Export Database\n                    </>\n                  )}\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* UI Text Settings */}\n        {activeTab === 'ui_text' && (\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">UI Text Settings</h2>\n              <p className=\"text-gray-600\">Customize text displayed to customers</p>\n            </div>\n            <div className=\"card-body space-y-6\">\n              <div>\n                <label className=\"form-label\">Header Text</label>\n                <input\n                  type=\"text\"\n                  value={localSettings.header_text || ''}\n                  onChange={(e) => handleSettingChange('header_text', e.target.value)}\n                  className=\"form-input\"\n                  placeholder=\"Welcome to our restaurant!\"\n                />\n                <p className=\"text-sm text-gray-500 mt-1\">Text displayed at the top of the menu page</p>\n              </div>\n              \n              <div>\n                <label className=\"form-label\">Footer Text</label>\n                <input\n                  type=\"text\"\n                  value={localSettings.footer_text || ''}\n                  onChange={(e) => handleSettingChange('footer_text', e.target.value)}\n                  className=\"form-input\"\n                  placeholder=\"Thank you for choosing us!\"\n                />\n                <p className=\"text-sm text-gray-500 mt-1\">Text displayed at the bottom of the menu page</p>\n              </div>\n\n              <div>\n                <label className=\"form-label\">Order Instructions</label>\n                <input\n                  type=\"text\"\n                  value={localSettings.order_instructions || ''}\n                  onChange={(e) => handleSettingChange('order_instructions', e.target.value)}\n                  className=\"form-input\"\n                  placeholder=\"Scan QR code to order • Pay at cashier\"\n                />\n                <p className=\"text-sm text-gray-500 mt-1\">Instructions shown to customers</p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Payment Settings */}\n        {activeTab === 'payment' && (\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Payment Settings</h2>\n              <p className=\"text-gray-600\">Configure payment methods and gateways</p>\n            </div>\n            <div className=\"card-body space-y-6\">\n              {/* Payment Methods */}\n              <div>\n                <label className=\"form-label\">Payment Methods</label>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      checked={localSettings.payment_methods?.includes('cash') || false}\n                      onChange={(e) => {\n                        const methods = localSettings.payment_methods || []\n                        if (e.target.checked) {\n                          handleSettingChange('payment_methods', [...methods, 'cash'])\n                        } else {\n                          handleSettingChange('payment_methods', methods.filter(m => m !== 'cash'))\n                        }\n                      }}\n                      className=\"form-checkbox\"\n                    />\n                    <label className=\"ml-2 text-sm text-gray-700\">Cash Payment</label>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      checked={localSettings.payment_methods?.includes('card') || false}\n                      onChange={(e) => {\n                        const methods = localSettings.payment_methods || []\n                        if (e.target.checked) {\n                          handleSettingChange('payment_methods', [...methods, 'card'])\n                        } else {\n                          handleSettingChange('payment_methods', methods.filter(m => m !== 'card'))\n                        }\n                      }}\n                      className=\"form-checkbox\"\n                    />\n                    <label className=\"ml-2 text-sm text-gray-700\">Card Payment</label>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={localSettings.cash_only_mode || false}\n                  onChange={(e) => handleSettingChange('cash_only_mode', e.target.checked)}\n                  className=\"form-checkbox\"\n                />\n                <label className=\"ml-2 text-sm text-gray-700\">Cash Only Mode</label>\n                <p className=\"text-xs text-gray-500 ml-2\">Hide card payment option from customers</p>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"form-label\">Stripe Public Key</label>\n                  <input\n                    type=\"text\"\n                    value={localSettings.stripePublicKey || ''}\n                    onChange={(e) => handleSettingChange('stripePublicKey', e.target.value)}\n                    className=\"form-input\"\n                    placeholder=\"pk_test_...\"\n                  />\n                </div>\n                <div>\n                  <label className=\"form-label\">Stripe Secret Key</label>\n                  <div className=\"relative\">\n                    <input\n                      type={showPassword ? 'text' : 'password'}\n                      value={localSettings.stripeSecretKey || ''}\n                      onChange={(e) => handleSettingChange('stripeSecretKey', e.target.value)}\n                      className=\"form-input pr-10\"\n                      placeholder=\"sk_test_...\"\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n                    >\n                      {showPassword ? (\n                        <EyeSlashIcon className=\"h-5 w-5 text-gray-400\" />\n                      ) : (\n                        <EyeIcon className=\"h-5 w-5 text-gray-400\" />\n                      )}\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Backup Settings */}\n        {activeTab === 'backup' && (\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h2 className=\"text-xl font-semibold text-gray-900\">Backup & Restore</h2>\n                  <p className=\"text-gray-600\">Create and manage database backups</p>\n                </div>\n                <button\n                  onClick={createBackup}\n                  disabled={creatingBackup}\n                  className=\"btn-primary flex items-center space-x-2\"\n                >\n                  <ArrowDownTrayIcon className=\"h-5 w-5\" />\n                  <span>{creatingBackup ? 'Creating...' : 'Create Backup'}</span>\n                </button>\n              </div>\n            </div>\n            <div className=\"card-body\">\n              {loadingBackups ? (\n                <div className=\"flex items-center justify-center py-12\">\n                  <div className=\"text-center\">\n                    <div className=\"loading-spinner mb-4\"></div>\n                    <p className=\"text-gray-600\">Loading backups...</p>\n                  </div>\n                </div>\n              ) : backups.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <ArrowDownTrayIcon className=\"h-16 w-16 mx-auto text-gray-400 mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No backups available</h3>\n                  <p className=\"text-gray-600 mb-4\">Create your first backup to get started</p>\n                  <button\n                    onClick={createBackup}\n                    disabled={creatingBackup}\n                    className=\"btn-primary\"\n                  >\n                    {creatingBackup ? 'Creating...' : 'Create Backup'}\n                  </button>\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  <div className=\"mb-4\">\n                    <h3 className=\"text-sm font-medium text-gray-700 mb-2\">\n                      Available Backups ({backups.length})\n                    </h3>\n                    <p className=\"text-sm text-gray-500\">\n                      Click restore to revert your database to a previous state. \n                      <span className=\"text-red-600 font-medium\"> Warning: This will replace all current data!</span>\n                    </p>\n                  </div>\n                  \n                  {backups.map((backup) => (\n                    <div\n                      key={backup.filename}\n                      className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg border border-gray-200 hover:border-gray-300 transition-colors\"\n                    >\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-gray-900\">{backup.filename}</h4>\n                        <div className=\"flex items-center space-x-4 mt-1 text-sm text-gray-500\">\n                          <span className=\"flex items-center\">\n                            <span className=\"font-medium mr-1\">Type:</span>\n                            <span className=\"capitalize\">{backup.type}</span>\n                          </span>\n                          <span className=\"flex items-center\">\n                            <span className=\"font-medium mr-1\">Size:</span>\n                            {(backup.size / 1024).toFixed(2)} KB\n                          </span>\n                          <span className=\"flex items-center\">\n                            <span className=\"font-medium mr-1\">Created:</span>\n                            {new Date(backup.created).toLocaleString()}\n                          </span>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2 ml-4\">\n                        <button\n                          onClick={() => restoreBackup(backup.filename)}\n                          disabled={saving}\n                          className=\"btn-secondary flex items-center space-x-1 text-sm\"\n                          title=\"Restore this backup\"\n                        >\n                          <ArrowUpTrayIcon className=\"h-4 w-4\" />\n                          <span>Restore</span>\n                        </button>\n                        <button\n                          onClick={() => deleteBackup(backup.filename)}\n                          className=\"btn-danger flex items-center space-x-1 text-sm\"\n                          title=\"Delete this backup\"\n                        >\n                          <TrashIcon className=\"h-4 w-4\" />\n                          <span>Delete</span>\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n              \n              <div className=\"mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200\">\n                <h4 className=\"font-medium text-blue-900 mb-2 flex items-center\">\n                  <span className=\"inline-block w-2 h-2 bg-blue-500 rounded-full mr-2\"></span>\n                  Backup Information\n                </h4>\n                <ul className=\"text-sm text-blue-800 space-y-1\">\n                  <li>• Backups include all database tables, settings, and configurations</li>\n                  <li>• Regular backups help protect against data loss</li>\n                  <li>• Restore operations will replace ALL current data</li>\n                  <li>• Keep multiple backups for different restore points</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Menu Templates */}\n        {activeTab === 'menu_templates' && (\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Menu Templates</h2>\n              <p className=\"text-gray-600\">Choose the perfect layout for your restaurant menu</p>\n            </div>\n            <div className=\"card-body\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Default Template */}\n                <div \n                  onClick={() => handleSettingChange('menu_template', 'default')}\n                  className={`cursor-pointer border-2 rounded-xl p-6 transition-all duration-200 ${\n                    localSettings.menu_template === 'default' \n                      ? 'border-blue-600 bg-blue-50 shadow-lg' \n                      : 'border-gray-200 hover:border-blue-300 hover:shadow-md'\n                  }`}\n                >\n                  <div className=\"flex justify-between items-start mb-4\">\n                    <div>\n                      <h3 className=\"text-lg font-bold text-gray-900\">Default - Luxury Gradient</h3>\n                      <p className=\"text-sm text-gray-600 mt-1\">Modern cards with gradient accents</p>\n                    </div>\n                    {localSettings.menu_template === 'default' && (\n                      <div className=\"w-6 h-6 bg-blue-600 rounded-full flex items-center justify-center\">\n                        <CheckIcon className=\"w-4 h-4 text-white\" />\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"bg-white rounded-lg p-4 border border-gray-200\">\n                    <div className=\"space-y-2\">\n                      <div className=\"h-3 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full w-1/2\"></div>\n                      <div className=\"grid grid-cols-3 gap-2\">\n                        <div className=\"aspect-square bg-gray-100 rounded\"></div>\n                        <div className=\"aspect-square bg-gray-100 rounded\"></div>\n                        <div className=\"aspect-square bg-gray-100 rounded\"></div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"mt-3 flex items-center text-xs text-gray-500\">\n                    <span className=\"inline-block w-2 h-2 bg-blue-500 rounded-full mr-2\"></span>\n                    3-column grid • Gradient hero • Card layout\n                  </div>\n                </div>\n\n                {/* Modern Template */}\n                <div \n                  onClick={() => handleSettingChange('menu_template', 'modern')}\n                  className={`cursor-pointer border-2 rounded-xl p-6 transition-all duration-200 ${\n                    localSettings.menu_template === 'modern' \n                      ? 'border-blue-600 bg-blue-50 shadow-lg' \n                      : 'border-gray-200 hover:border-blue-300 hover:shadow-md'\n                  }`}\n                >\n                  <div className=\"flex justify-between items-start mb-4\">\n                    <div>\n                      <h3 className=\"text-lg font-bold text-gray-900\">Modern - Minimalist</h3>\n                      <p className=\"text-sm text-gray-600 mt-1\">Clean layout with bold typography</p>\n                    </div>\n                    {localSettings.menu_template === 'modern' && (\n                      <div className=\"w-6 h-6 bg-blue-600 rounded-full flex items-center justify-center\">\n                        <CheckIcon className=\"w-4 h-4 text-white\" />\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"bg-white rounded-lg p-4 border border-gray-200\">\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-1 h-8 bg-blue-600\"></div>\n                        <div className=\"h-3 bg-gray-900 rounded w-1/3\"></div>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex gap-2\">\n                          <div className=\"w-16 h-16 bg-gray-100 rounded-lg\"></div>\n                          <div className=\"flex-1 space-y-1\">\n                            <div className=\"h-2 bg-gray-200 rounded w-2/3\"></div>\n                            <div className=\"h-2 bg-gray-100 rounded w-full\"></div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"mt-3 flex items-center text-xs text-gray-500\">\n                    <span className=\"inline-block w-2 h-2 bg-gray-900 rounded-full mr-2\"></span>\n                    2-column list • Large images • Bold headers\n                  </div>\n                </div>\n\n                {/* Elegant Template */}\n                <div \n                  onClick={() => handleSettingChange('menu_template', 'elegant')}\n                  className={`cursor-pointer border-2 rounded-xl p-6 transition-all duration-200 ${\n                    localSettings.menu_template === 'elegant' \n                      ? 'border-blue-600 bg-blue-50 shadow-lg' \n                      : 'border-gray-200 hover:border-blue-300 hover:shadow-md'\n                  }`}\n                >\n                  <div className=\"flex justify-between items-start mb-4\">\n                    <div>\n                      <h3 className=\"text-lg font-bold text-gray-900\">Elegant - Sophisticated</h3>\n                      <p className=\"text-sm text-gray-600 mt-1\">Premium list with large imagery</p>\n                    </div>\n                    {localSettings.menu_template === 'elegant' && (\n                      <div className=\"w-6 h-6 bg-blue-600 rounded-full flex items-center justify-center\">\n                        <CheckIcon className=\"w-4 h-4 text-white\" />\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"bg-white rounded-lg p-4 border border-gray-200\">\n                    <div className=\"space-y-2\">\n                      <div className=\"h-3 bg-gradient-to-r from-amber-500 to-orange-500 rounded w-1/3 mx-auto\"></div>\n                      <div className=\"flex gap-2\">\n                        <div className=\"w-24 h-16 bg-gradient-to-br from-amber-100 to-orange-100 rounded\"></div>\n                        <div className=\"flex-1 space-y-1\">\n                          <div className=\"h-2 bg-gray-200 rounded w-3/4\"></div>\n                          <div className=\"h-2 bg-gray-100 rounded w-full\"></div>\n                          <div className=\"h-2 bg-gray-100 rounded w-5/6\"></div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"mt-3 flex items-center text-xs text-gray-500\">\n                    <span className=\"inline-block w-2 h-2 bg-amber-500 rounded-full mr-2\"></span>\n                    Full-width list • Serif fonts • Luxury feel\n                  </div>\n                </div>\n\n                {/* Minimal Template */}\n                <div \n                  onClick={() => handleSettingChange('menu_template', 'minimal')}\n                  className={`cursor-pointer border-2 rounded-xl p-6 transition-all duration-200 ${\n                    localSettings.menu_template === 'minimal' \n                      ? 'border-blue-600 bg-blue-50 shadow-lg' \n                      : 'border-gray-200 hover:border-blue-300 hover:shadow-md'\n                  }`}\n                >\n                  <div className=\"flex justify-between items-start mb-4\">\n                    <div>\n                      <h3 className=\"text-lg font-bold text-gray-900\">Minimal - Grid</h3>\n                      <p className=\"text-sm text-gray-600 mt-1\">Simple grid with clean aesthetic</p>\n                    </div>\n                    {localSettings.menu_template === 'minimal' && (\n                      <div className=\"w-6 h-6 bg-blue-600 rounded-full flex items-center justify-center\">\n                        <CheckIcon className=\"w-4 h-4 text-white\" />\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"bg-white rounded-lg p-4 border border-gray-200\">\n                    <div className=\"space-y-2\">\n                      <div className=\"h-2 bg-gray-900 rounded w-1/4\"></div>\n                      <div className=\"grid grid-cols-4 gap-1\">\n                        <div className=\"aspect-square bg-gray-50 border border-gray-200 rounded\"></div>\n                        <div className=\"aspect-square bg-gray-50 border border-gray-200 rounded\"></div>\n                        <div className=\"aspect-square bg-gray-50 border border-gray-200 rounded\"></div>\n                        <div className=\"aspect-square bg-gray-50 border border-gray-200 rounded\"></div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"mt-3 flex items-center text-xs text-gray-500\">\n                    <span className=\"inline-block w-2 h-2 bg-gray-900 rounded-full mr-2\"></span>\n                    4-column grid • Minimal borders • Light typography\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"mt-8 p-4 bg-blue-50 rounded-lg border border-blue-200\">\n                <h4 className=\"font-medium text-blue-900 mb-2 flex items-center\">\n                  <PaintBrushIcon className=\"w-5 h-5 mr-2\" />\n                  Template Preview\n                </h4>\n                <p className=\"text-sm text-blue-800\">\n                  Choose the template that best matches your restaurant's style. The selected template will be used for all customer-facing menu pages accessed via QR codes.\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Printer Settings */}\n        {activeTab === 'printer' && (\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Printer Settings</h2>\n              <p className=\"text-gray-600\">Configure thermal printer settings</p>\n            </div>\n            <div className=\"card-body space-y-6\">\n              <div className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={localSettings.printerEnabled || false}\n                  onChange={(e) => handleSettingChange('printerEnabled', e.target.checked)}\n                  className=\"form-checkbox\"\n                />\n                <label className=\"ml-2 text-sm text-gray-700\">Enable Printer</label>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"form-label\">Printer IP Address</label>\n                  <input\n                    type=\"text\"\n                    value={localSettings.printerIp || '192.168.1.100'}\n                    onChange={(e) => handleSettingChange('printerIp', e.target.value)}\n                    className=\"form-input\"\n                    placeholder=\"192.168.1.100\"\n                  />\n                </div>\n                <div>\n                  <label className=\"form-label\">Printer Port</label>\n                  <input\n                    type=\"number\"\n                    value={localSettings.printerPort || 9100}\n                    onChange={(e) => handleSettingChange('printerPort', parseInt(e.target.value))}\n                    className=\"form-input\"\n                    placeholder=\"9100\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default SettingsPage","size_bytes":60137},"frontend/src/components/CategoryForm.jsx":{"content":"import { useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { menuAPI } from '../services/api'\nimport toast from 'react-hot-toast'\n\nfunction CategoryForm({ \n  category = null, \n  onSave, \n  onCancel,\n  branchId = 1 \n}) {\n  const [loading, setLoading] = useState(false)\n  \n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n    watch\n  } = useForm({\n    defaultValues: {\n      name: category?.name || '',\n      description: category?.description || '',\n      position: category?.position || 1,\n      isActive: category?.is_active !== false,\n      branchId: branchId\n    }\n  })\n\n  const onSubmit = async (data) => {\n    try {\n      setLoading(true)\n      \n      const categoryData = {\n        ...data,\n        branchId: parseInt(data.branchId),\n        isActive: data.isActive\n      }\n\n      let response\n      if (category) {\n        // Update existing category\n        response = await menuAPI.updateCategory(category.id, categoryData)\n      } else {\n        // Create new category\n        response = await menuAPI.createCategory(categoryData)\n      }\n\n      toast.success(`Category ${category ? 'updated' : 'created'} successfully`)\n      onSave(response.data.category)\n    } catch (error) {\n      console.error('Category save error:', error)\n      toast.error(error.response?.data?.error || 'Failed to save category')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n      {/* Basic Information */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <label className=\"form-label\">Category Name *</label>\n          <input\n            type=\"text\"\n            {...register('name', { required: 'Category name is required' })}\n            className=\"form-input\"\n            placeholder=\"Enter category name\"\n          />\n          {errors.name && (\n            <p className=\"form-error\">{errors.name.message}</p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"form-label\">Position</label>\n          <input\n            type=\"number\"\n            min=\"1\"\n            {...register('position', { \n              required: 'Position is required',\n              min: { value: 1, message: 'Position must be at least 1' }\n            })}\n            className=\"form-input\"\n            placeholder=\"1\"\n          />\n          {errors.position && (\n            <p className=\"form-error\">{errors.position.message}</p>\n          )}\n        </div>\n      </div>\n\n      <div>\n        <label className=\"form-label\">Description</label>\n        <textarea\n          {...register('description')}\n          rows={3}\n          className=\"form-input\"\n          placeholder=\"Enter category description\"\n        />\n      </div>\n\n      {/* Status */}\n      <div>\n        <label className=\"flex items-center\">\n          <input\n            type=\"checkbox\"\n            {...register('isActive')}\n            className=\"form-checkbox\"\n          />\n          <span className=\"ml-2 text-sm text-gray-700\">Active (visible to customers)</span>\n        </label>\n      </div>\n\n      {/* Actions */}\n      <div className=\"flex justify-end space-x-3 pt-6 border-t border-gray-200\">\n        <button\n          type=\"button\"\n          onClick={onCancel}\n          className=\"btn-outline\"\n          disabled={loading}\n        >\n          Cancel\n        </button>\n        <button\n          type=\"submit\"\n          className=\"btn-primary\"\n          disabled={loading}\n        >\n          {loading ? (\n            <>\n              <div className=\"loading-spinner mr-2\"></div>\n              {category ? 'Updating...' : 'Creating...'}\n            </>\n          ) : (\n            category ? 'Update Category' : 'Create Category'\n          )}\n        </button>\n      </div>\n    </form>\n  )\n}\n\nexport default CategoryForm","size_bytes":3857},"PROJECT_COMPLETION_REPORT.md":{"content":"# 🎉 POSQ Restaurant System - Complete Project Report\n\n## ✅ **ALL ISSUES FIXED & FEATURES IMPLEMENTED**\n\n### 🔧 **Critical Fixes Completed**\n\n#### 1. **PIN System Implementation** ✅\n- **8-Digit Unique PIN**: Each order now generates a unique 8-digit PIN\n- **PIN Database Field**: Added `pin` column to orders table with migration\n- **PIN Generation**: Secure random PIN generation with uniqueness validation\n- **PIN Lookup API**: New endpoint `/api/orders/pin/:pin` for customer order status\n- **Customer Order Status Page**: Beautiful page for customers to check order status by PIN\n- **PIN Display**: PIN shown in checkout confirmation and order details\n\n#### 2. **Orders Display Fixed** ✅\n- **Admin Dashboard**: Orders now properly display in admin dashboard\n- **API Response Format**: Fixed orders API to return `{ success: true, orders }`\n- **Order Loading**: Proper order fetching with items and modifiers\n- **Real-time Updates**: Orders update in real-time across admin interface\n\n#### 3. **Kitchen Display Enhanced** ✅\n- **Detailed Food Items**: Kitchen now shows complete order details\n- **Item Names**: Fixed menu item name display (`item_name` field)\n- **Modifiers Display**: Shows all modifiers for each item\n- **Notes Display**: Customer notes displayed for kitchen staff\n- **Quantity Information**: Clear quantity display for each item\n- **Modern Design**: Updated with luxury dark theme\n\n#### 4. **Modern Luxury Design** ✅\n- **Dark Theme**: Elegant black/gold color scheme throughout\n- **Glass Morphism**: Beautiful backdrop blur effects\n- **Gold Accents**: Luxury gold (#ffd700) highlights\n- **Consistent Styling**: All components use luxury design system\n- **Mobile Optimized**: Perfect mobile experience with luxury design\n- **Admin Interface**: Complete admin dashboard with luxury styling\n\n### 🎨 **Design System Updates**\n\n#### **Color Palette**\n- **Primary**: Dark navy (#1a1a2e) with luxury gradients\n- **Secondary**: Deep blue (#16213e) for depth\n- **Accent**: Elegant red (#e94560) for highlights\n- **Gold**: Luxury gold (#ffd700) for premium elements\n- **Silver**: Sophisticated silver (#c0c0c0) for details\n\n#### **Component Styling**\n- **Buttons**: Gradient backgrounds with luxury hover effects\n- **Cards**: Glass morphism with backdrop blur and gold borders\n- **Forms**: Elegant inputs with luxury styling\n- **Modals**: Beautiful overlays with smooth transitions\n- **Navigation**: Dark sidebar with gold accents\n\n### 📱 **Mobile Experience**\n\n#### **Customer Features**\n- **Bottom Cart Bar**: Fixed and beautifully styled with luxury design\n- **Touch-Friendly**: Perfect mobile interface with luxury aesthetics\n- **PIN System**: Easy PIN entry and order status checking\n- **Real-time Updates**: Live cart and order updates\n- **PWA Support**: Progressive Web App capabilities\n\n#### **Staff Features**\n- **Mobile Admin**: Full admin functionality on mobile devices\n- **Kitchen Display**: Real-time order management with luxury design\n- **Table Management**: QR code generation and printing\n- **Reports**: Mobile-friendly analytics dashboard\n\n### 🗄️ **Database & Backend**\n\n#### **Database Schema Updates**\n- **Orders Table**: Added `pin` and `payment_method` columns\n- **Migration System**: Proper migration for new fields\n- **Data Integrity**: Unique PIN constraints and validation\n\n#### **API Enhancements**\n- **PIN Endpoint**: New `/api/orders/pin/:pin` endpoint\n- **Order Creation**: Enhanced with PIN generation\n- **Response Format**: Consistent API responses with `success` field\n- **Error Handling**: Improved error messages and validation\n\n### 🔒 **Security & Validation**\n\n#### **PIN Security**\n- **Unique Generation**: Ensures no duplicate PINs\n- **8-Digit Format**: Standardized PIN format validation\n- **Public Access**: Safe public endpoint for order status\n- **Limited Data**: Only shows necessary order information\n\n#### **Data Validation**\n- **Input Sanitization**: Proper validation for all inputs\n- **SQL Injection Protection**: Parameterized queries\n- **Error Handling**: Comprehensive error management\n\n### 🚀 **New Features Implemented**\n\n#### **Order Status System**\n- **Customer PIN Lookup**: Customers can check order status by PIN\n- **Status Tracking**: Complete order lifecycle tracking\n- **Real-time Updates**: Live status updates\n- **Beautiful UI**: Luxury design for order status page\n\n#### **Enhanced Kitchen Display**\n- **Complete Order Details**: Shows all food items with modifiers\n- **Customer Notes**: Displays special instructions\n- **Quantity Information**: Clear quantity display\n- **Status Management**: Easy order status updates\n\n#### **Modern Admin Interface**\n- **Luxury Design**: Complete dark theme with gold accents\n- **Consistent Styling**: All admin pages use luxury design\n- **Mobile Responsive**: Perfect mobile admin experience\n- **Real-time Updates**: Live data updates throughout\n\n### 📊 **System Architecture**\n\n#### **Frontend (React + Vite)**\n- **Modern React**: Hooks, Context API, and best practices\n- **State Management**: React Query for server state\n- **Styling**: TailwindCSS with custom luxury components\n- **PWA**: Progressive Web App capabilities\n- **Responsive**: Mobile-first design approach\n\n#### **Backend (Node.js + Express)**\n- **RESTful API**: Clean, well-documented endpoints\n- **Authentication**: JWT with role-based access control\n- **Real-time**: Socket.IO for live updates\n- **Database**: Knex.js with migration support\n- **Security**: Comprehensive validation and sanitization\n\n#### **Database (SQLite/MySQL)**\n- **Flexible**: Supports both SQLite and MySQL\n- **Migrations**: Proper database versioning\n- **Seeds**: Sample data for testing\n- **Performance**: Optimized queries and indexes\n\n### 🎯 **Testing & Quality Assurance**\n\n#### **Functionality Testing**\n- ✅ **Order Creation**: PIN generation and order placement\n- ✅ **Order Display**: Admin dashboard shows orders correctly\n- ✅ **Kitchen Display**: Detailed food items display properly\n- ✅ **PIN Lookup**: Customer order status by PIN works\n- ✅ **Mobile Experience**: Perfect mobile functionality\n- ✅ **Real-time Updates**: Live updates across all interfaces\n\n#### **Design Testing**\n- ✅ **Luxury Theme**: Consistent dark/gold design throughout\n- ✅ **Mobile Responsive**: Perfect scaling across all devices\n- ✅ **User Experience**: Smooth interactions and animations\n- ✅ **Accessibility**: Proper contrast and readability\n\n### 🏆 **Production Readiness**\n\n#### **Deployment Ready**\n- **Docker Support**: Containerized deployment\n- **Environment Configuration**: Proper environment variables\n- **Database Flexibility**: SQLite for development, MySQL for production\n- **Security**: Production-ready security measures\n- **Performance**: Optimized for production use\n\n#### **Documentation**\n- **Complete README**: Comprehensive setup instructions\n- **API Documentation**: Well-documented endpoints\n- **Database Schema**: Clear database structure\n- **Deployment Guide**: Production deployment instructions\n\n### 🎉 **Final Status: COMPLETE & PROFESSIONAL**\n\nThe POSQ Restaurant System is now a **complete, professional, luxury restaurant management system** with:\n\n#### **✅ All Requested Features**\n- **8-Digit PIN System**: Unique PINs for each order\n- **Order Status by PIN**: Customers can check status\n- **Fixed Order Display**: Orders show in admin dashboard\n- **Kitchen Food Details**: Complete order details for kitchen\n- **Modern Luxury Design**: Beautiful dark/gold theme\n- **Mobile Experience**: Perfect mobile functionality\n\n#### **✅ Technical Excellence**\n- **Clean Architecture**: Well-structured codebase\n- **Security**: Production-ready security measures\n- **Performance**: Optimized for speed and efficiency\n- **Scalability**: Supports multiple database systems\n- **Maintainability**: Clean, documented code\n\n#### **✅ User Experience**\n- **Luxury Design**: Professional restaurant aesthetics\n- **Mobile-First**: Perfect mobile experience\n- **Real-time**: Live updates throughout\n- **Intuitive**: Easy to use for all user types\n- **Accessible**: Proper contrast and readability\n\n### 🚀 **Ready for Immediate Use**\n\nThe system is now ready for immediate deployment in any luxury restaurant environment with:\n\n- 🎨 **Luxury Design** with dark theme and gold accents\n- 📱 **Perfect Mobile Experience** with bottom cart bar\n- 🗄️ **Flexible Database** (SQLite/MySQL/PostgreSQL)\n- 🔒 **Enterprise Security** with JWT and RBAC\n- 📊 **Professional Analytics** with Excel export\n- 🚀 **Easy Deployment** with Docker support\n\n**The POSQ Restaurant System is now a complete, professional, production-ready luxury restaurant management system!** 🍽️✨\n\n---\n\n## 📞 **Support & Next Steps**\n\n### **Immediate Use**\n1. **Start Server**: `cd server && npm start`\n2. **Start Frontend**: `cd frontend && npm run dev`\n3. **Access System**: `http://localhost:5173`\n4. **Admin Login**: `admin` / `admin123`\n\n### **Production Deployment**\n1. **Setup MySQL**: Run `./setup-mysql.sh`\n2. **Configure Environment**: Update `.env` files\n3. **Deploy with Docker**: Use `docker-compose up`\n4. **Setup SSL**: Configure HTTPS with Let's Encrypt\n\n### **Customization**\n- **Colors**: Update CSS variables in `frontend/src/index.css`\n- **Branding**: Modify restaurant name and logo\n- **Features**: Add new functionality as needed\n- **Integration**: Connect with payment gateways\n\n**The system is now complete and ready for professional restaurant use!** 🏆","size_bytes":9480},"index.js":{"content":"require('dotenv').config();\nconst express = require(\"express\");\nconst mysql = require(\"mysql\");\nconst crypto = require(\"crypto\");\nconst https = require(\"follow-redirects\").https;\nconst qs = require(\"querystring\");\nconst cors = require(\"cors\");\nconst bodyParser = require(\"body-parser\");\nconst { v4: uuidv4 } = require(\"uuid\");\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst app = express();\nconst port = 5000;\nconst multer = require(\"multer\");\nconst http = require('http');\nconst cron = require('node-cron');\nconst moment = require('moment');\nconst { Expo } = require('expo-server-sdk');\n\n\nconst expo = new Expo();\napp.use(cors());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\n\n// Set up multer for file uploadss\n\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    const uploadDir = path.join(__dirname, \"uploads\", \"temp\");\n    if (!fs.existsSync(uploadDir)) {\n      fs.mkdirSync(uploadDir, { recursive: true });\n    }\n    cb(null, uploadDir);\n  },\n  filename: (req, file, cb) => {\n    cb(null, `${Date.now()}-${file.originalname}`);\n  },\n});\n\n\n\nconst upload = multer({ storage });\n\n\n\n\nconst db = mysql.createConnection({\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n});\n\n\ndb.connect((err) => {\n  if (err) {\n    console.error('Error connecting to database:', err.stack);\n    return;\n  }\n  console.log('Connected to MySQL database');\n});\n\n\nconst sendVerificationCode = async (to, message) => {\n    const baseUrl = 'http://82.212.81.40:8080/websmpp/websms';\n    const params = new URLSearchParams({\n        user: 'JbuyApp1',\n        pass: '429J@NewY',\n        sid: 'Jbuy.App',\n        mno: to,\n        type: '4', // Unicode for Arabic messages\n        text: message\n    });\n\n    const url = `${baseUrl}?${params.toString()}`;\n    \n    try {\n        const response = await fetch(url);\n        const body = await response.text();\n        \n        // Check if the response indicates success\n        if (response.ok) {\n            return body;\n        } else {\n            throw new Error(`SMS API Error (${response.status}): ${body}`);\n        }\n    } catch (error) {\n        throw new Error(`Failed to send SMS: ${error}`);\n    }\n};\n\n\n\n\napp.get(\"/\",(req , res)=>{\n    res.send(\"work\" )\n})\n\n\n\nconst logAdminAction = ({ adminToken, actionType, placeId, actionMessage }, callback) => {\n    // 1. Validate input parameters\n    if (!adminToken || !actionType || !placeId || !actionMessage) {\n        return callback(new Error('جميع الحقول مطلوبة')); // All fields are required\n    }\n\n    // 2. Fetch admin details using the adminToken\n    const fetchAdminQuery = 'SELECT id, name FROM admins WHERE token = ?';\n    db.query(fetchAdminQuery, [adminToken], (fetchErr, fetchResults) => {\n        if (fetchErr) {\n            console.error('Database error (fetch admin):', fetchErr);\n            return callback(new Error('فشل في جلب بيانات المدير')); // Failed to fetch admin details\n        }\n\n        if (fetchResults.length === 0) {\n            return callback(new Error('المدير غير موجود')); // Admin not found\n        }\n\n        const admin = fetchResults[0]; // Get the first matching admin\n        const adminId = admin.id;\n        const adminName = admin.name;\n\n        // 3. Insert the admin action into the history table\n        const insertQuery = `\n            INSERT INTO admin_actions_history \n            (admin_id, admin_name, action_type, place_id, action_message)\n            VALUES (?, ?, ?, ?, ?)\n        `;\n\n        const values = [adminId, adminName, actionType, placeId, actionMessage];\n\n        db.query(insertQuery, values, (insertErr, insertResults) => {\n            if (insertErr) {\n                console.error('Database error (insert action):', insertErr);\n                return callback(new Error('فشل في تسجيل عمل المدير')); // Failed to log admin action\n            }\n\n            // Return success\n            callback(null, {\n                success: true,\n                message: 'تم تسجيل عمل المدير بنجاح', // Admin action logged successfully\n                actionId: insertResults.insertId // Return the ID of the inserted action\n            });\n        });\n    });\n};\n\nconst sendNotification = ({ title, message, redirectId, redirectType, userId, fromId }, callback) => {\n    // Validate input parameters\n    if (!title || !message || !userId || !fromId || !redirectId || !redirectType) {\n        return callback(new Error('Missing required parameters.'));\n    }\n\n    // Fetch user's notification token\n    const fetchUserQuery = 'SELECT id, notificationToken FROM users WHERE id = ?';\n    db.query(fetchUserQuery, [userId], (fetchErr, fetchResults) => {\n        if (fetchErr) {\n            console.error('Database error fetching user:', fetchErr);\n            return callback(new Error('Failed to fetch user.'));\n        }\n        if (fetchResults.length === 0) {\n            return callback(new Error('User not found.'));\n        }\n\n        const user = fetchResults[0];\n\n        // Send push notification if token exists\n        if (user.notificationToken) {\n            const notification = {\n                to: user.notificationToken,\n                sound: 'default',\n                title,\n                body: message,\n                data: { redirectType, redirectId }\n            };\n            expo.sendPushNotificationsAsync([notification])\n                .then(() => {\n                    console.log('Notification sent successfully.');\n                })\n                .catch((expoErr) => {\n                    console.error('Expo error:', expoErr);\n                    return callback(new Error('Failed to send notification.'));\n                });\n        }\n\n        // Determine the correct column for redirection\n        const column = redirectType === 'post' ? 'placeId' :\n                       redirectType === 'user' ? 'profileId' : 'profileId';\n\n        // Insert notification into the database\n        const insertQuery = `\n            INSERT INTO notifications \n            (user_id, from_id, title, message, ${column})\n            VALUES (?, ?, ?, ?, ?)\n        `;\n        db.query(insertQuery, [userId, fromId, title, message, redirectId || null], (insertErr, insertResults) => {\n            if (insertErr) {\n                console.error('Database error inserting notification:', insertErr);\n                return callback(new Error('Failed to insert notification.'));\n            }\n\n            // Return success\n            callback(null, {\n                success: true,\n                sent: user.notificationToken ? 1 : 0,\n                message: 'Notification processed successfully'\n            });\n        });\n    });\n};\n\ncron.schedule('0 0 * * *', () => { // Runs every midnight\n    const sql = `\n        UPDATE places \n        SET sponsored = 0 \n        WHERE vipExpiresAt <= NOW() AND sponsored = 1`;\n\n    db.query(sql, (err, result) => {\n        if (err) console.error('Error updating expired VIP places:', err);\n        else console.log('Expired VIP places updated successfully.');\n    });\n});\n\napp.post('/send-notification', (req, res) => {\n    const { title, body: message, redirectId, redirectType, userIds } = req.body;\n\n    if (!userIds || !Array.isArray(userIds) || userIds.length === 0) {\n        return res.status(400).json({ error: 'Invalid user IDs' });\n    }\n\n    // 1. First get all user notification tokens\n    db.query(\n        'SELECT id, notificationToken FROM users WHERE id IN (?)',\n        [userIds],\n        async (userErr, users) => {\n            if (userErr) {\n                console.error('Database error:', userErr);\n                return res.status(500).json({ error: 'Failed to fetch users' });\n            }\n\n            // 2. Prepare and send notifications\n            try {\n                const validTokens = users\n                    .filter(user => user.notificationToken)\n                    .map(user => ({\n                        to: user.notificationToken,\n                        sound: 'default',\n                        title,\n                        body: message,\n                        data: { redirectType, redirectId }\n                    }));\n\n                if (validTokens.length > 0) {\n                    await expo.sendPushNotificationsAsync(validTokens);\n                }\n\n                // 3. Insert notifications into database\n                const column = redirectType === 'post' ? 'placeId' : \n                            redirectType === 'user' ? 'profileId' : \"profileId\";\n\n                const insertQuery = `\n                    INSERT INTO notifications \n                    (user_id, title, message, ${column})\n                    VALUES ?\n                `;\n\n                const values = userIds.map(userId => [\n                    userId,\n                    title,\n                    message,\n                    redirectId || null\n                ]);\n\n                db.query(insertQuery, [values], (insertErr, result) => {\n                    if (insertErr) {\n                        console.error('Insert error:', insertErr);\n                        return res.status(500).json({ error: insertErr});\n                    }\n\n                    res.json({\n                        success: true,\n                        sent: validTokens.length,\n                        total: userIds.length,\n                        message: `Notifications processed successfully`\n                    });\n                });\n\n            } catch (expoErr) {\n                console.error('Expo error:', expoErr);\n                res.status(500).json({ error: 'Failed to send push notifications' });\n            }\n        }\n    );\n});\n\n\n\napp.post('/toggle_blocked/:id', (req, res) => {\n  const userId = req.params.id;\n\n  // Query to get the current 'blocked' value\n  db.query('SELECT blocked FROM users WHERE id = ?', [userId], (err, results) => {\n    if (err) {\n      return res.status(500).json({ error: 'Database error' });\n    }\n\n    if (results.length === 0) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    const currentBlocked = results[0].blocked;\n    const newBlockedValue = currentBlocked === 1 ? 0 : 1; // Toggle between 0 and 1\n\n    // Update the 'blocked' value\n    db.query('UPDATE users SET blocked = ? WHERE id = ?', [newBlockedValue, userId], (err, result) => {\n      if (err) {\n        return res.status(500).json({ error: 'Error updating user' });\n      }\n\n      // Return the updated value of 'blocked'\n      res.json({ blocked: newBlockedValue });\n    });\n  });\n});\n\n\napp.post('/toggle_trustable/:id', (req, res) => {\n  const userId = req.params.id;\n\n  // Fetch the current 'trustable' value for the user\n  db.query('SELECT trustable FROM users WHERE id = ?', [userId], (err, results) => {\n    if (err) {\n      return res.status(500).json({ error: 'Database error' });\n    }\n\n    if (results.length === 0) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    const currentTrustable = results[0].trustable;\n    const newTrustableValue = currentTrustable === 1 ? 0 : 1; // Toggle between 1 and 0\n\n    // Update the 'trustable' value\n    db.query('UPDATE users SET trustable = ? WHERE id = ?', [newTrustableValue, userId], (err, result) => {\n      if (err) {\n        return res.status(500).json({ error: 'Error updating user' });\n      }\n\n      // Return the updated value of 'trustable'\n      res.json({ trustable: newTrustableValue });\n    });\n  });\n});\n\n\napp.get('/api/notifications/:userId', (req, res) => {\n    const { userId } = req.params;\n    const query = `\n        SELECT n.*, u.name, u.phone, u.trustable, u.picture_url , u.image_name\n        FROM notifications n\n        JOIN users u ON n.from_id = u.id\n        WHERE n.user_id = ?\n    `;\n\n    db.query(query, [userId], (err, results) => {\n        if (err) return res.status(500).send(err);\n        res.json(results.reverse());\n    });\n});\n\n\n\n// Mark a notification as read\napp.post('/api/notifications/read/:id', (req, res) => {\n    const { id } = req.params;\n    db.query('UPDATE notifications SET is_read = TRUE WHERE id = ?', [id], (err, result) => {\n        if (err) return res.status(500).send(err);\n        res.json({ message: 'Notification marked as read' });\n    });\n});\n\n\napp.delete('/api/notifications/:id', (req, res) => {\n    const notificationId = req.params.id;\n    \n    // Validate ID format first\n    if (!Number.isInteger(Number(notificationId))) {\n        return res.status(400).json({ error: 'Invalid notification ID format' });\n    }\n\n    const query = 'DELETE FROM notifications WHERE id = ?';\n    \n    db.query(query, [notificationId], (err, result) => {\n        if (err) {\n            console.error('Database error:', err);\n            return res.status(500).json({ error: 'Internal server error' });\n        }\n\n        if (result.affectedRows === 0) {\n            return res.status(404).json({ error: 'Notification not found' });\n        }\n\n        res.json({ \n            success: true,\n            message: 'Notification deleted successfully',\n            deletedId: notificationId\n        });\n    });\n});\n\napp.get('/api/notifications/unread/:userId', (req, res) => {\n  const userId = req.params.userId;\n\n  // SQL query to count unread notifications for the user\n  const query = `\n    SELECT COUNT(*) AS unreadCount\n    FROM notifications\n    WHERE user_id = ? AND is_read = 0\n  `;\n\n  db.query(query, [userId], (err, results) => {\n    if (err) {\n      console.error('Error fetching unread notifications:', err);\n      return res.status(500).json({ error: 'Failed to fetch unread notifications' });\n    }\n\n    // Send the unread notifications count back to the frontend\n    res.json({ unreadCount: results[0].unreadCount });\n  });\n});\n\n\napp.get('/user/blocked-status/:userId', (req, res) => {\n  const userId = req.params.userId;\n\n  // Query to get the blocked value from the users table\n  const query = 'SELECT blocked FROM users WHERE session_token = ?';\n\n  db.query(query, [userId], (err, results) => {\n    if (err) {\n      console.error('Error fetching blocked status:', err);\n      return res.status(500).json({ error: 'Internal Server Error' });\n    }\n\n    if (results.length === 0) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    const blocked = results[0].blocked;\n    res.json({ userId, blocked });\n  });\n});\n\n\napp.get(\"/server/status\",(req , res)=>{\n    res.json({message : \"work\"})\n})\n\napp.get(\"/test/sms\", async (req, res) => {\n    try {\n        const response = await sendVerificationCode(\"+962782950000\", \"This is a test message!\");\n        const parsedResponse = response // Correctly parsing the response\n        res.json({ success: true, response: parsedResponse });\n    } catch (error) {\n        res.status(500).json({ success: false, error: error.message });\n    }\n});\n\n\n\napp.post('/api/make-vip', (req, res) => {\n    const { placeId, duration, adminToken } = req.body;\n\n    // Validate placeId and duration\n    if (!placeId || !duration) {\n        return res.status(400).json({ error: 'Place ID and duration are required.' });\n    }\n\n    let vipExpiresAt;\n    let arabicTime;\n\n    // Handle multiple durations using a switch statement\n    switch (duration) {\n        case '24h':\n            vipExpiresAt = moment().add(24, 'hours').format('YYYY-MM-DD HH:mm:ss');\n            arabicTime = \"24 ساعة\";\n            break;\n        case '1week':\n            vipExpiresAt = moment().add(7, 'days').format('YYYY-MM-DD HH:mm:ss');\n            arabicTime = \"اسبوع\";\n            break;\n        case '15days':\n            vipExpiresAt = moment().add(15, 'days').format('YYYY-MM-DD HH:mm:ss');\n            arabicTime = \"15 يوما\";\n            break;\n        case '30days':\n            vipExpiresAt = moment().add(30, 'days').format('YYYY-MM-DD HH:mm:ss');\n            arabicTime = \"30 يوم\";\n            break;\n        default:\n            return res.status(400).json({ error: 'Invalid subscription duration.' });\n    }\n\n    // 1. Fetch the owner_id of the place\n    const fetchOwnerQuery = 'SELECT owner_id FROM places WHERE id = ?';\n    db.query(fetchOwnerQuery, [placeId], (fetchErr, fetchResults) => {\n        if (fetchErr) {\n            console.error('Database error:', fetchErr);\n            return res.status(500).json({ error: 'Failed to fetch place owner.' });\n        }\n\n        if (fetchResults.length === 0) {\n            return res.status(404).json({ error: 'Place not found.' });\n        }\n\n        const ownerId = fetchResults[0].owner_id;\n\n        // 2. Update the place with the selected subscription\n        const updateQuery = `\n            UPDATE places \n            SET sponsored = 1, vipExpiresAt = ? \n            WHERE id = ?`;\n        \n        db.query(updateQuery, [vipExpiresAt, placeId], (updateErr, updateResults) => {\n            if (updateErr) {\n                console.error('Database error:', updateErr);\n                return res.status(500).json({ error: 'Failed to update place.' });\n            }\n\n            // 3. Fetch admin details using the adminToken\n            const fetchAdminQuery = 'SELECT id, name FROM admins WHERE token = ?';\n            db.query(fetchAdminQuery, [adminToken], (adminErr, adminResults) => {\n                if (adminErr) {\n                    console.error('Database error (fetch admin):', adminErr);\n                    return res.status(500).json({ error: 'Failed to fetch admin details.' });\n                }\n\n                if (adminResults.length === 0) {\n                    return res.status(404).json({ error: 'Admin not found.' });\n                }\n\n                const admin = adminResults[0];\n                const adminId = admin.id;\n                const adminName = admin.name;\n\n                // 4. Log the admin action\n                const actionType = 'ترقية الاعلان';\n                const actionMessage = `تمت ترقية الاعلان رقم ${placeId} لمدة ${arabicTime}`;\n\n                const insertActionQuery = `\n                    INSERT INTO admin_actions_history \n                    (admin_id, admin_name, action_type, place_id, action_message)\n                    VALUES (?, ?, ?, ?, ?)\n                `;\n\n                db.query(insertActionQuery, [adminId, adminName, actionType, placeId, actionMessage], (insertErr, insertResults) => {\n                    if (insertErr) {\n                        console.error('Database error (insert action):', insertErr);\n                        return res.status(500).json({ error: 'Failed to log admin action.' });\n                    }\n\n                    // 5. Send a notification to the owner\n                    const notificationData = {\n                        title: \"ترقية الاعلان\",\n                        message: `تمت ترقية اعلانك رقم ${placeId} لمدة ${arabicTime}`,\n                        redirectId: placeId,\n                        redirectType: \"post\",\n                        userId: ownerId, // ID of the user receiving the notification\n                        fromId: 1 // ID of the user who triggered the notification (e.g., admin)\n                    };\n\n                    sendNotification(notificationData, (notifyErr, notifyResult) => {\n                        if (notifyErr) {\n                            console.error('Error sending notification:', notifyErr);\n                        } else {\n                            console.log('Notification sent successfully:', notifyResult);\n                        }\n\n                        // 6. Return success response\n                        res.json({\n                            success: true,\n                            message: 'Place is now VIP!',\n                            vipExpiresAt: vipExpiresAt\n                        });\n                    });\n                });\n            });\n        });\n    });\n});\n\napp.get('/api/admin/getData', (req, res) => {\n  const token = req.headers.authorization?.split(' ')[1]; // Extract token from header\n\n  if (!token) {\n    return res.status(401).json({ message: 'Unauthorized' });\n  }\n\n  // Check if the token exists in the admins table\n  db.query('SELECT * FROM admins WHERE token = ?', [token], (err, results) => {\n    if (err) {\n      return res.status(500).json({ error: err.message });\n    }\n    \n    if (results.length === 0) {\n      return res.status(403).json({ message: 'Invalid session' });\n    }\n\n    res.status(200).json({ user: results[0] });\n  });\n});\n\n\n\n\n\napp.get('/api/admin-actions/:placeId', (req, res) => {\n    const placeId = req.params.placeId;\n\n    // Query to fetch admin actions for the given place_id\n    const fetchActionsQuery = `\n        SELECT id, admin_id, admin_name, action_type, action_message, action_time \n        FROM admin_actions_history \n        WHERE place_id = ?\n        ORDER BY action_time DESC\n    `;\n\n    db.query(fetchActionsQuery, [placeId], (err, results) => {\n        if (err) {\n            console.error('Database error:', err);\n            return res.status(500).json({ error: 'Failed to fetch admin actions.' });\n        }\n\n        // Return the admin actions\n        res.status(200).json({\n            success: true,\n            actions: results\n        });\n    });\n});\n\n\n\napp.get('/api/subscriptions', (req, res) => {\n    const sql = 'SELECT * FROM subscriptions';\n\n    db.query(sql, (err, result) => {\n        if (err) {\n            return res.status(500).send('Error fetching subscriptions.');\n        }\n        res.json(result); // Send the result (subscriptions) as a JSON response\n    });\n});\n\n\napp.post(\"/register\", (req, res) => {\n    const { name, phone, password, notificationToken, accountType } = req.body;\n    if (!name || !phone || !password) {\n        return res.status(400).json({\n            message: \"الاسم ورقم الهاتف وكلمة المرور مطلوبة\",\n        });\n    }\n    \n    \n\n    // Normalize phone number\n    const normalizedPhone = phone.replace(/^\\+9620/, \"+962\");\n\n    const token = crypto.randomBytes(64).toString(\"hex\");\n    const verificationCode = Math.floor(1000 + Math.random() * 9000).toString();\n    const message = `رمز التحقق الخاص بك هو ${verificationCode}`;\n\n    // Check if phone number already exists\n    const sqlCheck = \"SELECT * FROM users WHERE phone = ?\";\n    db.query(sqlCheck, [normalizedPhone], (err, result) => {\n        if (err) {\n            console.error(err);\n            return res.status(500).json({ message: \"خطأ في الخادم الداخلي\", error: err });\n        }\n\n        if (result.length > 0) {\n            return res.status(400).json({ message: \"رقم الهاتف مستخدم بالفعل\" });\n        }\n\n        // Insert the new user\n\n         const sqlInsert = `\n        INSERT INTO users (\n            name, \n            phone, \n            password, \n            phone_verified, \n            session_token, \n            notificationToken, \n            accountType,\n            limitPosts\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, \n            CASE \n                WHEN ? = 'business' THEN 100 \n                ELSE DEFAULT(limitPosts) \n            END\n        )\n    `;\n\n    // Single parameters array\n    const params = [\n        name,\n        normalizedPhone,\n        password,\n        false,\n        token,\n        notificationToken || null,\n        accountType || \"personal\",\n        accountType || \"personal\" // Repeat for CASE condition\n    ];\n        \n        db.query(sqlInsert, params, (err, result) => {\n            if (err) {\n                console.error(err);\n                return res.status(500).json({ message: \"خطأ في الخادم الداخلي\", error: err });\n            }\n\n            // Fetch the newly inserted user\n            const sqlSelect = \"SELECT * FROM users WHERE id = ?\";\n            db.query(sqlSelect, [result.insertId], (err, userResult) => {\n                if (err) {\n                    return res.status(500).json({ message: \"خطأ في الخادم الداخلي\", error: err });\n                }\n\n                const registeredUser = userResult[0];\n\n                // Send verification code\n                sendVerificationCode(normalizedPhone, message)\n                    .then(() => {\n                        const sqlVerifyInsert = \"INSERT INTO verifications (phone, code) VALUES (?, ?)\";\n                        db.query(sqlVerifyInsert, [normalizedPhone, verificationCode], (err) => {\n                            if (err) {\n                                return res.status(500).json({ message: \"خطأ في الخادم الداخلي\", error: err });\n                            }\n\n                            // If notificationToken is provided, trigger notification function\n                            if (notificationToken) {\n                                sendBetaNotification(registeredUser.id, notificationToken);\n                            }\n\n                            res.status(200).json({ message: \"تم تسجيل المستخدم بنجاح.\", user: registeredUser });\n                        });\n                    })\n                    .catch((error) => {\n                        res.status(500).json({ message: \"فشل في إرسال رمز التحقق\", error: error.message });\n                    });\n            });\n        });\n    });\n});\n\n// Function to send notification and save it to the database\nconst sendBetaNotification = (userId, notificationToken) => {\n    const title = \" مرحبًا بك في تطبيقنا التجريبي!\";\n    const message = \"هذا التطبيق في مرحلته التجريبية. إذا كان لديك أي اقتراحات للتحسين، أخبرنا!\";\n\n    // Send notification using Expo\n    if (Expo.isExpoPushToken(notificationToken)) {\n        const notification = {\n            to: notificationToken,\n            sound: \"default\",\n            title,\n            body: message,\n            data: { type: \"beta_message\" }\n        };\n\n        expo.sendPushNotificationsAsync([notification])\n            .then(() => {\n                console.log(\"✅ Notification sent successfully!\");\n\n                // Save notification in database\n                const sqlInsertNotification = \"INSERT INTO notifications (user_id, from_id, title, message) VALUES (?, ?, ?, ?)\";\n                db.query(sqlInsertNotification, [userId, 1, title, message], (err) => {\n                    if (err) {\n                        console.error(\"❌ Failed to save notification in database:\", err);\n                    } else {\n                        console.log(\"✅ Notification saved in database!\");\n                    }\n                });\n            })\n            .catch((err) => {\n                console.error(\"❌ Failed to send notification:\", err);\n            });\n    } else {\n        console.error(\"❌ Invalid Expo push token:\", notificationToken);\n    }\n};\n\n\n\n\napp.post(\"/login\", (req, res) => {\n    const { phone, password , notificationToken } = req.body;\n  \n    if (!phone || !password) {\n      return res.status(400).json({\n        message: \"رقم الهاتف وكلمة المرور مطلوبان!\",\n      });\n    }\n        const normalizedPhone = phone.replace(/^\\+9620/, \"+962\");\n\n  \n    const sql = \"SELECT * FROM users WHERE phone = ?\";\n    db.query(sql, [normalizedPhone], (err, results) => {\n      if (err) {\n        console.error(err);\n        return res.status(500).json({\n          message: \"خطأ في الخادم الداخلي\",\n          error: err,\n        });\n      }\n  \n      if (results.length === 0 || results[0].password !== password) {\n        return res.status(404).json({\n          message: \"رقم الهاتف أو كلمة المرور غير صحيحة!\",\n        });\n      }\n  \n      if (!results[0].phone_verified) {\n        // Phone number not verified, send verification code again\n        const verificationCode = Math.floor(1000 + Math.random() * 9000).toString();\n        const message = `رمز التحقق الخاص بك هو ${verificationCode}`;\n        console.log(\"بدء إرسال رمز التحقق\");\n  \n        sendVerificationCode(normalizedPhone, message)\n          .then((response) => {\n            console.log(response);\n  \n            // Save verification code to database\n            const sql = \"UPDATE verifications SET code = ? WHERE phone = ?\";\n            db.query(sql, [verificationCode, phone], (err, result) => {\n              if (err) {\n                return res.status(500).json({ message: \"خطأ في الخادم الداخلي\", error: err });\n              }\n              res.status(200).json({\n                message: \"تم إرسال رمز التحقق مرة أخرى.\" ,\n                userId: results[0].id , \n              });\n            });\n          })\n          .catch((error) => {\n            console.log(\"خطأ\");\n  \n            res.status(500).json({\n              message: \"فشل في إرسال رمز التحقق\",\n              error: error.message,\n            });\n          });\n  \n        return; // Prevent further execution\n      }\n  \n      // Generate a secure session token using crypto\n      const sessionToken = crypto.randomBytes(64).toString(\"hex\");\n      // Update the user's session token in the database\n      const updateSql = \"UPDATE users SET session_token = ? , notificationToken = ?  WHERE id = ?\";\n      db.query(updateSql, [sessionToken, notificationToken, results[0].id], (updateErr) => {\n        if (updateErr) {\n          console.error(updateErr);\n          return res.status(500).json({\n            message: \"فشل في تحديث رمز الجلسة\",\n            error: updateErr,\n          });\n        }\n  \n        // Send the session token to the client\n        res.status(200).json({\n          message: \"تسجيل الدخول ناجح!\",\n          user: results[0],\n          sessionToken: sessionToken,\n        });\n      });\n    });\n  });\n  \n\n\nconst uploadProfile = multer({ dest: 'uploads/profiles/' });\n\napp.post(\"/update-picture/user\", uploadProfile.single('imageFile'), (req, res) => {\n    const { id, picture_url } = req.body;  // These are the text fields\n    const imageFile = req.file;  // The file is parsed by multer\n\n\n    // Check if id and picture_url are present\n    if (!id || !picture_url) {\n        return res.status(400).json({ message: \"User ID and picture are required\" });\n    }\n\n    let imageName = picture_url;\n\n    if (imageFile) {\n        const uploadDir = path.join(__dirname, \"uploads\", \"profiles\");\n\n        if (!fs.existsSync(uploadDir)) {\n            fs.mkdirSync(uploadDir, { recursive: true });\n        }\n\n        // Generate a unique file name\n        imageName = `${Date.now()}-${imageFile.originalname}`;\n        const imagePath = path.join(uploadDir, imageName);\n\n        // Move the file to the profiles directory\n        fs.renameSync(imageFile.path, imagePath);\n    }\n\n    // Save the image name or URL to the database\n    const sql = \"UPDATE users SET picture_url = ?, image_name = ? WHERE id = ?\";\n    db.query(sql, [picture_url, imageName, id], (error, result) => {\n        if (error) {\n            console.error(\"Error updating picture URL:\", error);\n            return res.status(500).json({ message: \"Database error.\" });\n        }\n\n        if (result.affectedRows === 0) {\n            return res.status(404).json({ message: \"User not found\" });\n        }\n\n        res.status(200).json({ message: \"Profile picture updated successfully\", imageName });\n    });\n});\n\n\napp.get('/user/profile-picture/:imageName', (req, res) => {\n    const { imageName } = req.params;  // Get the image name from the request params\n    const imagePath = path.join(__dirname, 'uploads', 'profiles', imageName);\n\n    // Check if the file exists\n    if (fs.existsSync(imagePath)) {\n        res.sendFile(imagePath);  // Send the image file\n    } else {\n        res.status(404).json({ message: \"Image not found\" });\n    }\n});\n\napp.get('/places/category-counts', (req, res) => {\n  const query = `\n    SELECT \n      home_type,\n      COUNT(*) as count\n    FROM \n      places\n    WHERE \n      home_type IN ('فيلا / منزل', 'مسابح', 'صالات رياضة', 'مكاتب وعيادات', \n                    'شقة', 'مزرعة', 'ارض', 'شليهات', 'قاعات اجتماعات', \n                    'تنضيم رحلات', 'ملاعب', 'صالات رياضة')\n    GROUP BY \n      home_type\n  `;\n\n  db.query(query, (error, results) => {\n    if (error) {\n      console.error('Error fetching category counts:', error);\n      return res.status(500).json({ error: 'Database error' });\n    }\n\n    const categoryCounts = {};\n    results.forEach(row => {\n      categoryCounts[row.home_type] = row.count;\n    });\n\n    res.json(categoryCounts);\n  });\n});\n\n\n\n// Update user details with phone number\napp.post(\"/user/update-user\", (req, res) => {\n    const { id, name, password, currentpass } = req.body;\n  \n    if (!id || (!name && !password)) {\n      return res.status(400).json({\n        message: \"Provide user ID and at least one field (name, password) to update\",\n      });\n    }\n  \n    // Check if currentpass is provided\n    if (!currentpass) {\n      return res.status(200).json({\n        message: \"Provide current password to update\",\n      });\n    }\n  \n    // Prepare SQL select query to get current password\n    const selectSql = `SELECT password FROM users WHERE id = ?`;\n    db.query(selectSql, [id], (err, result) => {\n      if (err) {\n        console.error(err);\n        return res.status(500).json({\n          message: \"Internal server error\",\n          error: err,\n        });\n      }\n  \n      if (result.length === 0) {\n        return res.status(200).json({\n          message: \"User not found\",\n        });\n      }\n  \n      const storedPassword = result[0].password;\n  \n      // Compare currentpass with storedPassword\n      if (currentpass !== storedPassword) {\n        return res.status(200).json({\n          message: \"Current password does not match\",\n        });\n      }\n  \n      // Prepare SQL update query based on provided fields\n      let updateFields = [];\n      let values = [];\n  \n      if (name) {\n        updateFields.push(\"name = ?\");\n        values.push(name);\n      }\n      if (password) {\n        updateFields.push(\"password = ?\");\n        values.push(password);\n      }\n  \n      values.push(id); // Add user ID to the end of the values array\n  \n      const sql = `UPDATE users SET ${updateFields.join(\", \")} WHERE id = ?`;\n      db.query(sql, values, (updateErr, updateResult) => {\n        if (updateErr) {\n          console.error(updateErr);\n          return res.status(500).json({\n            message: \"Internal server error\",\n            error: updateErr,\n          });\n        }\n  \n        if (updateResult.affectedRows === 0) {\n          return res.status(200).json({\n            message: \"User not found\",\n          });\n        }\n  \n        // Fetch the updated user data after successful \n        const selectUserSql = 'SELECT * FROM users WHERE id = ?';\n        db.query(selectUserSql, [id], (selectErr, userResult) => {\n          if (selectErr) {\n            console.error('Error fetching updated user:', selectErr);\n            return res.status(500).json({\n              message: \"Internal server error\",\n              error: selectErr,\n            });\n          }\n  \n          if (userResult.length === 0) {\n            return res.status(200).json({\n              message: \"User not found after update\",\n            });\n          }\n  \n          // Return success message along with updated user data\n          res.status(200).json({\n            message: \"User updated successfully\",\n            user: userResult[0], // Updated user data\n          });\n        });\n      });\n    });\n  });\n  \n  \n  \napp.get('/checkUser/:id/limitPosts', (req, res) => {\n  const userId = req.params.id; // User ID from the route parameter\n\n  // Query to fetch the limitPosts column for the given user ID\n  const query = `\n    SELECT limitPosts\n    FROM users\n    WHERE id = ?\n  `;\n\n  // Execute the query\n  db.query(query, [userId], (err, results) => {\n    if (err) {\n      console.error('Error fetching limitPosts:', err);\n      return res.status(500).json({ error: 'Database error' });\n    }\n\n    // Check if a user was found\n    if (results.length === 0) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    // Return the limitPosts value\n    res.status(200).json({ limitPosts: results[0].limitPosts });\n  });\n});\n\n\napp.get('/images/user/:id', (req, res) => {\n  const userId = req.params.id;\n\n  // SQL query to fetch only the image_name for the given user ID\n  const query = 'SELECT image_name FROM users WHERE id = ?';\n\n  db.query(query, [userId], (err, results) => {\n    if (err) {\n      console.error('Error fetching image_name:', err);\n      return res.status(500).json({ error: 'Internal server error' });\n    }\n\n    if (results.length === 0) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    // Return the image_name\n    res.json({ image_name: results[0].image_name });\n  });\n});\n\n// ================== verfication ================\napp.post(\"/verify-phone\", (req, res) => {\n  const { phone, code } = req.body;\n  \n  \n  console.log(\"start verify\", req.body);\n  if (!phone || !code) {\n    return res.status(400).json({ message: \"Phone number and verification code are required!\" });\n  }\n  \n    const normalizedPhone = phone.replace(/^\\+9620/, \"+962\");\n\n\n  const sql = \"SELECT * FROM verifications WHERE phone = ? AND code = ?\";\n  db.query(sql, [normalizedPhone, code], (err, results) => {\n    if (err) {\n      console.error(err);\n      return res.status(500).json({ message: \"Internal server error\", error: err });\n    }\n\n    if (results.length === 0) {\n      return res.status(400).json({ message: \"Invalid verification code!\" });\n    }\n\n    const updateSql = \"UPDATE users SET phone_verified = true WHERE phone = ?\";\n    db.query(updateSql, [normalizedPhone], (updateErr) => {\n      if (updateErr) {\n        console.error(updateErr);\n        return res.status(500).json({ message: \"Internal server error\", error: updateErr });\n      }\n\n      const deleteSql = \"DELETE FROM verifications WHERE phone = ?\";\n      db.query(deleteSql, [normalizedPhone], (deleteErr) => {\n        if (deleteErr) {\n          console.error(deleteErr);\n          return res.status(500).json({ message: \"Internal server error\", error: deleteErr });\n        }\n\n        const userSql = \"SELECT * FROM users WHERE phone = ?\";\n        db.query(userSql, [normalizedPhone], (userErr, userResults) => {\n          if (userErr) {\n            console.error(userErr);\n            return res.status(500).json({ message: \"Internal server error\", error: userErr });\n          }\n\n          if (userResults.length === 0) {\n            return res.status(404).json({ message: \"User not found!\" });\n          }\n\n          res.status(200).json({ \n            message: \"Phone number verified successfully!\", \n            user: userResults[0] \n          });\n        });\n      });\n    });\n  });\n});\n\napp.get('/search/users', async (req, res) => {\n  try {\n    const searchQuery = req.query.search || '';\n    const searchTerm = `%${searchQuery}%`;\n      \n  const sql = `\n    SELECT id, name, phone \n    FROM users \n    WHERE name LIKE ? OR phone LIKE ?\n  `;\n    \n    db.query(sql, [searchTerm , searchTerm], (err, results) => {\n    if (err) {\n      console.error('Database error:', err);\n      return res.status(500).json({ error: err});\n    }\n    res.json(results);\n  });\n  } catch (error) {\n    console.error('Error searching users:', error);\n    res.status(500).json({ error: error});\n  }\n});\n\n// Search places by ID\napp.get('/search/places', async (req, res) => {\n  try {\n    const searchQuery = req.query.search || ''  ;\n    const searchTerm = `%${searchQuery}%`;\n   const sql = `\n    SELECT id, title \n    FROM places \n    WHERE id LIKE ?\n  `;\n  \n db.query(sql, [searchTerm], (err, results) => {\n    if (err) {\n      console.error('Database error:', err);\n      return res.status(500).json({ error: err });\n    }\n    res.json(results);\n  });\n  } catch (error) {\n    console.error('Error searching places:', error);\n    res.status(500).json({ error: error });\n  }\n});\n\n\n\n\n\n// Verify reset token and allow password reset\napp.post(\"/reset-password\", (req, res) => {\n  const { phone, resetToken, newPassword } = req.body;\n\n    const normalizedPhone = phone.replace(/^\\+9620/, \"+962\");\n\n  if (!normalizedPhone || !resetToken || !newPassword) {\n    return res.status(400).json({\n      message: \"Phone number, reset token, and new password are required!\",\n    });\n  }\n\n  const currentTime = new Date();\n  const sql =\n    \"SELECT * FROM users WHERE phone = ? AND reset_token = ? AND reset_token_expires_at > ?\";\n  db.query(sql, [normalizedPhone, resetToken, currentTime], (err, results) => {\n    if (err) {\n      console.error(err);\n      return res.status(500).json({\n        message: \"Internal server error\",\n        error: err,\n      });\n    }\n\n    if (results.length === 0) {\n      return res.status(401).json({\n        message: \"Invalid reset token or expired. Please request a new one.\",\n      });\n    }\n\n    // Update user's password with newPassword\n    const updateSql = \"UPDATE users SET password = ? WHERE phone = ?\";\n    db.query(updateSql, [newPassword, normalizedPhone], (updateErr, updateResult) => {\n      if (updateErr) {\n        console.error(updateErr);\n        return res.status(500).json({\n          message: \"Internal server error\",\n          error: updateErr,\n        });\n      }\n\n      // Clear/reset the reset_token and reset_token_expires_at fields after successful password reset\n      const clearResetSql =\n        \"UPDATE users SET reset_token = NULL, reset_token_expires_at = NULL WHERE phone = ?\";\n      db.query(clearResetSql, [normalizedPhone], (clearErr, clearResult) => {\n        if (clearErr) {\n          console.error(clearErr);\n          return res.status(500).json({\n            message: \"Internal server error\",\n            error: clearErr,\n          });\n        }\n\n        res.status(200).json({\n          message: \"Password reset successful!\",\n        });\n      });\n    });\n  });\n});\n\n// Function to generate a random reset token (example)\nfunction generateResetToken() {\n  return Math.random().toString(36).slice(2);\n}\n\n// ============ add post ======\n\n// Route to handle adding a new place\n// Route to handle adding a new place\nconst getValueOrDefault = (value, defaultValue = null) => {\n  return value !== undefined && value !== null ? value : defaultValue;\n};\n\napp.post(\"/api/places/add\",upload.fields([\n  { name: \"images\", maxCount: 10 },\n  { name: \"chaletDocument\", maxCount: 1 },\n  { name: \"poolDocument\", maxCount: 1 }\n]), (req, res) => {\n  const {\n    title,\n    address,\n    description,\n    perks,\n    extraInfo,\n    maxGuests,\n    price,\n    ownerId,\n    type,\n    sellingMethod,\n    ownerPhone,\n    homeType,\n    farmHasHouse,\n    farmHasWater,\n    farmHasFarmed,\n    landInFaceOfStreet,\n    numberOfStreetsInLand,\n    spaceGeneral,\n    numberOfHomeStage,\n    totalStages,\n    numberOfRooms,\n    buyOrRent,\n    rentType,\n    ownerStatus,\n    location,\n    amenities,\n    hajezDays,\n    hajezType,\n    variablePrices,\n    publisherState,\n    adsAccept,\n    priceHide,\n    specificDaysInCalander,\n    specificDaysCalanderPrice,\n    latitude,\n    longitude,\n    ownerName,\n    poolType,\n    deepPool,\n    gettingCalls,\n    containSdah,\n    evacuation,\n    tripLong,\n    tripDate,\n    timeOpen,\n    meetingRoomType ,\n    countPeople ,\n    subscriptionTypeGym ,\n    priceBeforeNoon\t,\n    priceAfterNoon , \n    street,\n    closePlace\n  } = req.body;\n\n  const addedPhotos = req.files['images'] || []; // Array of file objects for images\n  const chaletDocument = req.files['chaletDocument'] ? req.files['chaletDocument'][0] : null;\n  const poolDocument = req.files['poolDocument'] ? req.files['poolDocument'][0] : null;\n  const placeId = uuidv4();\n  const folderName = placeId;\n  const uploadDir = path.join(__dirname, \"uploads\", folderName);\n\n  if (!fs.existsSync(uploadDir)) {\n    fs.mkdirSync(uploadDir, { recursive: true });\n  }\n\n  const savedPhotos = [];\n  let savedChaletDocument = null;\n  let savedPoolDocument = null;\n\n  // Move uploaded photos to the unique directory\n  addedPhotos.forEach((file, index) => {\n    const oldPath = file.path;\n    const newPath = path.join(uploadDir, `${index + 1}_${file.originalname}`);\n    try {\n      fs.renameSync(oldPath, newPath);\n      savedPhotos.push({\n        originalName: file.originalname,\n        savedAs: `${index + 1}_${file.originalname}`,\n      });\n    } catch (err) {\n      console.error(\"Failed to move file:\", err);\n      return res.status(555).json({\n        message: \"Internal server error\",\n        error: err.message,\n      });\n    }\n  });\n\n  // Move chaletDocument if exists\n  if (chaletDocument) {\n    const oldPath = chaletDocument.path;\n    const newPath = path.join(uploadDir, `chalet_${chaletDocument.originalname}`);\n    try {\n      fs.renameSync(oldPath, newPath);\n      savedChaletDocument = `chalet_${chaletDocument.originalname}`;\n    } catch (err) {\n      console.error(\"Failed to move chaletDocument:\", err);\n      return res.status(555).json({\n        message: \"Internal server error\",\n        error: err.message,\n      });\n    }\n  }\n\n  // Move poolDocument if exists\n  if (poolDocument) {\n    const oldPath = poolDocument.path;\n    const newPath = path.join(uploadDir, `pool_${poolDocument.originalname}`);\n    try {\n      fs.renameSync(oldPath, newPath);\n      savedPoolDocument = `pool_${poolDocument.originalname}`;\n    } catch (err) {\n      console.error(\"Failed to move poolDocument:\", err);\n      return res.status(555).json({\n        message: \"Internal server error\",\n        error: err.message,\n      });\n    }\n  }\n\n  const sql = `\n    INSERT INTO places (\n      title, address, photos, description, perks, extra_info, max_guests, price, owner_id, folderName,\n      type, sellingMethod, ownerPhone, home_type, farm_has_house, farm_has_water, farm_has_farmed,\n      land_in_face_of_street, number_of_streets_in_land, space_general, number_of_home_stage, total_stages,\n      number_of_rooms, buy_or_rent, rent_type, owner_status, location, amenities, hajez_days, hajez_type,\n      variable_prices, publisher_state, ads_accept, priceHide, specificDaysInCalendar, calanderDaysPrice, lat, lng,\n      ownerName, poolType, deepPool, gettingCalls, containSdah, evacuation, tripLong, tripDate, timeOpen,\n      poolDocument, challetDocument ,meetingRoomType , countPeople , subscriptionTypeGym , priceBeforeNoon , priceAfterNoon , street , closePlace\n    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,? ,? , ?,?,?)`\n  ;\n\n  db.query(\n    sql,\n    [\n      title || null, address || null, savedPhotos.map(photo => photo.savedAs).join(',')  || null, description || null, perks || null, extraInfo || null,\n      maxGuests || null, price || null, ownerId || null, folderName || null, type || null, sellingMethod || null, ownerPhone || null,\n      homeType || null, farmHasHouse || null, farmHasWater || null, farmHasFarmed || null, landInFaceOfStreet || null,\n      numberOfStreetsInLand || null, spaceGeneral || null, numberOfHomeStage || null, totalStages || null, JSON.stringify(numberOfRooms) || null,\n      buyOrRent || null, rentType || null, ownerStatus || null, location || null, JSON.stringify(amenities) || null, JSON.stringify(hajezDays) || null,\n      hajezType || null, JSON.stringify(variablePrices) || null, publisherState || null, adsAccept || null, priceHide || null, JSON.stringify(specificDaysInCalander) || null,\n      specificDaysCalanderPrice || null, latitude || 0, longitude || 0, ownerName || null, poolType || null, deepPool || null, gettingCalls || null,\n      containSdah || null, evacuation || null, tripLong || null, tripDate || null, timeOpen || null, savedPoolDocument || null, savedChaletDocument || null , meetingRoomType || null ,\n      countPeople || null , subscriptionTypeGym || null , priceBeforeNoon || price , priceAfterNoon || price , street || null , closePlace || null\n    ],\n    (err, result) => {\n      if (err) {\n        return res.status(500).json({\n          message: \"Internal server error during database operation\",\n          error: err.message,\n        });\n      }\n      \n      \n      const query = `\n    UPDATE users \n    SET limitPosts = limitPosts - 1 \n    WHERE id = ? AND limitPosts > 0;\n  `;\n\n  db.query(query, [ownerId], (err, results) => {\n    if (err) {\n      console.error(\"Error updating limitPosts:\", err);\n      return res.status(500).json({ message:err });\n    }\n\n    // Check if any row was updated\n    if (results.affectedRows === 0) {\n      return res.status(400).json({ message: \"No posts left to decrement or user not found\" });\n    }\n\n    // Fetch the current value of limitPosts\n    const fetchQuery = `SELECT limitPosts FROM users WHERE id = ?`;\n\n    db.query(fetchQuery, [ownerId], (fetchErr, fetchResult) => {\n      if (fetchErr) {\n        console.error(\"Error fetching limitPosts:\", fetchErr);\n        return res.status(500).json({ message: fetchErr });\n      }\n\n      const currentLimitPosts = fetchResult[0].limitPosts;\n      return res.status(200).json({\n        message: \"Place added successfully\",\n        placeId: result.insertId,\n        limitPosts: currentLimitPosts, // Return the updated value\n      });\n    });\n  });\n  \n  \n      \n    }\n  );\n\n\n\n});\n\n\n\n\n// Route to get all places by ownerId\napp.get(\"/api/places/by-owner/:ownerId\", (req, res) => {\n  const { ownerId } = req.params;\n  console.log(ownerId);\n  // SQL query to fetch places by ownerId\n  const sql = \"SELECT * FROM places WHERE owner_id = ?\";\n  db.query(sql, [ownerId], (err, results) => {\n    if (err) {\n      console.error(\"Failed to retrieve places:\", err);\n      return res.status(500).json({\n        message: \"Internal server error\",\n        error: err.message,\n      });\n    }\n    res.status(200).json({\n      message: \"Places retrieved successfully\",\n      places: results,\n    });\n  });\n});\n\n\napp.post('/filter', (req, res) => {\n  const { city, date, priceRange } = req.body;\n  const [minPrice, maxPrice] = priceRange || [];\n\n  // Basic date format validation (YYYY-MM-DD)\n  const isValidDate = date && /^\\d{4}-\\d{2}-\\d{2}$/.test(date);\n\n  // Construct SQL query with filters\n  let sql = `SELECT * FROM places WHERE 1=1`;\n  const params = [];\n\n  if (city) {\n    sql += ` AND address = ?`;\n    params.push(city);\n  }\n\n  if (isValidDate) {\n    sql += ` AND DATE(date) = ?`;\n    params.push(date);\n  } else if (date) {\n    return res.status(400).json({ message: 'Invalid date format. Expected format: YYYY-MM-DD' });\n  }\n\n  if (minPrice !== undefined) {\n    sql += ` AND price >= ?`;\n    params.push(minPrice);\n  }\n\n  if (maxPrice !== undefined) {\n    sql += ` AND price <= ?`;\n    params.push(maxPrice);\n  }\n\n  // Execute SQL query\n  db.query(sql, params, (error, results) => {\n    if (error) {\n      console.error('Error querying the database:', error);\n      return res.status(500).json({ message: 'Internal Server Error', error: error.code });\n    }\n    res.json(results);\n  });\n});\n\n\n\napp.get(\"/api/images/:folderName/:imageName\", (req, res) => {\n  const { folderName, imageName } = req.params;\n  const filePath = path.join(__dirname, \"uploads\", folderName, imageName);\n  console.log(filePath);\n\n  // Check if the file exists\n  if (fs.existsSync(filePath)) {\n    // Send the file as a response\n    console.log(\"file found\");\n    res.sendFile(filePath);\n  } else {\n    // File not found\n    console.log(\"file not found\");\n\n    res.status(404).json({ message: \"File not found\" });\n  }\n});\n\n//   fetch posts Data\n// Route to fetch filtered places\napp.get(\"/api/places\", (req, res) => {\n  const { category, type } = req.query;\n\n  // Base SQL query and parameters\n  let sql = \"SELECT * FROM places WHERE approved = ? AND active = ?\";\n  const queryParams = [1, 1]; // Values for `approved` and `active`\n\n  // Add filters based on query parameters\n  if (type) {\n    sql += \" AND buy_or_rent = ?\";\n    queryParams.push(type);\n  }\n\n  if (category && category.toLowerCase() !== \"الكل\") {\n    sql += \" AND home_type LIKE ?\";\n    queryParams.push(`%${category}%`);\n  }\n\n  console.log(\"Executing SQL query:\", sql, \"with parameters:\", queryParams);\n\n  // Execute the query\n  db.query(sql, queryParams, (err, results) => {\n    if (err) {\n      console.error(\"Error fetching places:\", err);\n\n    \n      return res.status(500).json({ error: \"Internal Server Error\" });\n    }\n\n    // Reverse results (if needed) and send response\n    const places = results.reverse(); // Optional: Reverse order for display\n    res.json({ places });\n  });\n});\n\n\n// Route to fetch filtered places\napp.get(\"/api/admin/places\", (req, res) => {\n\n  // Base SQL query with ordering: places with approved = 0 will appear at the top\n  let sql = \"SELECT * FROM places ORDER BY approved ASC\";\n\n  // Execute SQL query\n  db.query(sql, (err, results) => {\n    if (err) {\n      console.error(\"Error fetching places:\", err);\n      return res.status(500).json({ error: \"Internal Server Error\" });\n    }\n\n    // Send the results as-is (since the order is already handled by SQL)\n    res.json({ results });\n  });\n});\n\napp.post('/api/admin/add-user', async (req, res) => {\n  const { name, phone, password } = req.body;\n\n  // Validate the input\n  if (!name || !phone || !password) {\n    return res.status(400).json({ error: 'Name, phone, and password are required' });\n  }\n\n  try {\n    // Hash the password before saving it\n\n    // SQL query to insert the user\n    const query = 'INSERT INTO users (name, phone, password , phone_verified) VALUES (?, ?, ? , ?)';\n    const values = [name, phone, password , 1];\n\n    db.query(query, values, (error, results) => {\n      if (error) {\n        console.error('Error adding user:', error);\n        return res.status(500).json({ error: error });\n      }\n\n      res.status(201).json({ message: 'User added successfully', userId: results.insertId });\n    });\n  } catch (err) {\n    console.error('Error hashing password:', err);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n})\n\n\napp.post(\"/api/places/:id/toggle-active\", (req, res) => {\n    \n  const { id } = req.params;\n  \n  // SQL query to toggle the 'active' field\n  const query = `\n    UPDATE places \n    SET active = NOT active\n    WHERE id = ?;\n  `;\n\n  // Execute the query\n  db.query(query, [id], (err, result) => {\n    if (err) {\n      console.error(\"Error toggling active status:\", err);\n      return res.status(500).json({ error: \"Internal Server Error\" });\n    }\n\n    if (result.affectedRows === 0) {\n      // No place found with the given id\n      return res.status(404).json({ error: \"Place not found\" });\n    }\n\n    res.json({ message: \"Place active status toggled successfully\" });\n  });\n});\n\n\n\napp.get('/admin/filter-places', (req, res) => {\n  const {\n    address = '',  // Default to an empty string if undefined\n    byorRent = '',\n    category = '', \n    price = '', \n    rating = '' , \n    state = \"\"\n  } = req.query;\n\n  // Construct the SQL query dynamically based on the provided data\n  let query = 'SELECT * FROM places WHERE 1=1'; // Starting with a condition that is always true\n  const queryParams = [];\n\n  // Only add conditions if the value is not empty\n  if (address.trim()) {\n    query += ' AND title LIKE ?';\n    queryParams.push(`%${address}%`);\n  }\n\n  if (byorRent.trim()) {\n    // Split by comma and filter out empty values\n    const byorRentArray = byorRent.split(',').filter(Boolean);\n    \n    if (byorRentArray.length > 0) {\n      // Use an SQL IN clause to match any value from the byorRent array\n      query += ` AND buy_or_rent IN (${byorRentArray.map(() => '?').join(', ')})`;\n      queryParams.push(...byorRentArray); // Spread the array into queryParams\n    }\n  }\n\n  if (category.trim()) {\n    query += ' AND home_type = ?';\n    queryParams.push(category);\n  }\n\n  if (price.trim()) {\n    query += ' AND price = ?';\n    queryParams.push(price);\n  }\n\n    if(state){\n        query += ' AND approved = ?';\n        queryParams.push(state);\n    }\n  if (rating.trim()) {\n    query += ' AND favorites = ?';\n    queryParams.push(rating);\n  }\n\n  // Execute the query\n  db.query(query, queryParams, (err, results) => {\n    if (err) {\n      console.error('Database query error:', err);\n      return res.status(500).json({ error: 'Internal Server Error' });\n    }\n    res.json(results);\n  });\n});\n\n\n// Add a like to a place\napp.post('/like', (req, res) => {\n  const { user_id, place_id } = req.body;\n\n  if (!user_id || !place_id) {\n    return res.status(400).json({ error: 'user_id and place_id are required' });\n  }\n\n  // Check if the user has already liked the place\n  const checkQuery = 'SELECT * FROM favorites WHERE user_id = ? AND place_id = ?';\n  db.query(checkQuery, [user_id, place_id], (err, results) => {\n    if (err) {\n      return res.status(500).json({ error: 'Database error' });\n    }\n\n    if (results.length > 0) {\n      // User has already liked the place, so unlike it\n      const deleteQuery = 'DELETE FROM favorites WHERE user_id = ? AND place_id = ?';\n      db.query(deleteQuery, [user_id, place_id], (err, results) => {\n        if (err) {\n          return res.status(500).json({ error: 'Database error' });\n        }\n\n        // Update the heartSave value in the places table\n        const updateQuery = 'UPDATE places SET heartSave = heartSave - 1 WHERE id = ?';\n        db.query(updateQuery, [place_id], (err, results) => {\n          if (err) {\n            return res.status(500).json({ error: 'Database error' });\n          }\n\n          res.status(200).json({ message: 'Like removed successfully and heartSave updated' });\n        });\n      });\n    } else {\n      // User has not liked the place, so like it\n      const insertQuery = 'INSERT INTO favorites (user_id, place_id) VALUES (?, ?)';\n      db.query(insertQuery, [user_id, place_id], (err, results) => {\n        if (err) {\n          return res.status(500).json({ error: 'Database error' });\n        }\n\n        // Update the heartSave value in the places table\n        const updateQuery = 'UPDATE places SET heartSave = heartSave + 1 WHERE id = ?';\n        db.query(updateQuery, [place_id], (err, results) => {\n          if (err) {\n            return res.status(500).json({ error: 'Database error' });\n          }\n\n          res.status(200).json({ message: 'Like added successfully and heartSave updated' });\n        });\n      });\n    }\n  });\n})\n\n\napp.get('/profile/places', (req, res) => {\n  const ownerId = req.query.ownerId;  // assuming ownerId is passed as a query parameter\n\n  if (!ownerId) {\n    return res.status(400).json({ error: 'ownerId is required' });\n  }\n\n  // Query to fetch places for a specific ownerId\n  const query = 'SELECT * FROM places WHERE owner_id = ?';\n  db.query(query, [ownerId], (error, results) => {\n    if (error) {\n      console.error('Error fetching places:', error);\n      return res.status(500).json({ error: 'Failed to fetch places' });\n    }\n\n    const ads = results.filter(place => place.buy_or_rent !== 'الحجز')\n    const booking = results.filter(place => place.buy_or_rent === 'الحجز')\n    \n    res.json({ ads, booking });\n  })\n\n\n})\n\napp.get('/api/user/:userId/likes', (req, res) => {\n  const userId = req.params.userId;\n  const sql = `\n    SELECT p.* \n    FROM places p\n    INNER JOIN favorites f ON p.id = f.place_id\n    WHERE f.user_id = ?\n  `;\n\n  db.query(sql, [userId], (err, results) => {\n    if (err) {\n      console.error('Error fetching liked places:', err);\n      return res.status(500).json({ error: 'Internal Server Error' });\n    }\n\n    res.json(results);\n  });\n});\n\n\n\napp.get('/admin/places/gat/:id', (req, res) => {\n  const placeId = req.params.id;\n\n  const query = 'SELECT * FROM places WHERE id = ?';\n  \n  db.query(query, [placeId], (error, results) => {\n    if (error) {\n      console.error('Error fetching place by ID:', error);\n      res.status(500).json({ error: 'Database query failed' });\n    } else if (results.length === 0) {\n      res.status(404).json({ error: 'Place not found' });\n    } else {\n      res.json(results[0]);\n    }\n  });\n});\n\n\n\n\n\n\n\napp.get('/api/places/:id', (req, res) => {\n  const placeId = req.params.id;\n  const userId = req.query.user_id; // Get user_id from query parameters\n\n  const sql = `\n    SELECT p.*, \n           CASE WHEN f.user_id IS NOT NULL THEN 1 ELSE 0 END AS liked,\n           u.picture_url AS owner_picture,\n           u.trustable,\n           u.image_name AS owner_image_name  -- Add image_name here\n    FROM places p\n    LEFT JOIN favorites f ON p.id = f.place_id AND f.user_id = ?\n    LEFT JOIN users u ON p.owner_id = u.id\n    WHERE p.id = ?\n  `;\n\n  db.query(sql, [userId, placeId], (err, results) => {\n    if (err) {\n      console.error('Error fetching place:', err);\n      return res.status(500).json({ error: 'Internal Server Error' });\n    }\n\n    if (results.length === 0) {\n      return res.status(404).json({ message: 'Place not found' });\n    }\n\n    // Increment viewers count by 1\n    const updateViewersSql = `UPDATE places SET viewers = viewers + 1 WHERE id = ?`;\n    db.query(updateViewersSql, [placeId], (updateErr) => {\n      if (updateErr) {\n        console.error('Error updating viewers:', updateErr);\n      }\n    });\n\n    res.json(results[0]); // Return the place data with trustable field and owner_image_name\n  });\n});\n\n\n\n\napp.get('/similar-products', (req, res) => {\n    const { homeType, sellType, placeId } = req.query;\nif (!homeType || !placeId) {\n        return res.status(400).json({\n            error: 'homeType and placeId are required'\n        });\n    }\n    // Construct SQL query to fetch data based on home_type and buy_or_rent\n    let sql = 'SELECT * FROM places WHERE approved = ? AND active = ?';\n    const queryParams = [1, 1]; \n\n    if (homeType) {\n        sql += ' AND home_type = ?';\n        queryParams.push(homeType); \n    }\n\n    if (sellType) {\n        sql += ' AND buy_or_rent = ?';\n        queryParams.push(sellType); \n    }\n\n    if (placeId) {\n        sql += ' AND id != ?';  // Exclude the specific placeId\n        queryParams.push(placeId); \n    }\n\n    // Limit the results to 6\n    sql += ' LIMIT 6';\n\n    db.query(sql, queryParams, (err, results) => {\n        if (err) {\n            console.error('Error fetching similar products:', err);\n            return res.status(500).json({ error: 'Internal Server Error' });\n        }\n\n        if (results.length === 0) {\n            return res.json([]);\n        }\n\n        res.json(results);\n    });\n});\n\napp.get('/admin/users', (req, res) => {\n  const query = `\n    SELECT \n      users.id,\n      users.name,\n      users.phone,\n      users.trustable,\n      users.blocked,\n      users.description,\n      users.picture_url,\n      users.image_name,\n      users.limitPosts,\n      users.phone_verified,\n      users.created,\n      COUNT(DISTINCT places.id) AS postsCount,\n      COUNT(DISTINCT bookings.id) AS bookingsCount,\n      COUNT(DISTINCT favorites.id) AS favoritesCount,\n      COUNT(DISTINCT CASE WHEN places.sponsored = 1 THEN places.id END) AS sponsoredPostsCount\n    FROM users\n    LEFT JOIN places ON places.owner_id = users.id\n    LEFT JOIN bookings ON bookings.costumerId = users.id\n    LEFT JOIN favorites ON favorites.user_id = users.id\n    GROUP BY users.id;\n  `;\n\n  db.query(query, (err, results) => {\n    if (err) {\n      console.error('Error fetching users with counts:', err.stack);\n      res.status(500).json({ error: err });\n    } else {\n      res.status(200).json(results);\n    }\n  });\n});\n\n\napp.put('/api/users/update', async (req, res) => {\n  const { name, phone, password , userId , limitPosts , description } = req.body;\n\n  // Construct the update query dynamically\n  let query = 'UPDATE users SET name = ?, phone = ? , limitPosts = ? , description = ?';\n  const queryParams = [name, phone , limitPosts , description];\n\n  if (password) {\n    // Hash the password if provided\n    query += ', password = ?';\n    queryParams.push(password);\n  }\n\n  query += ' WHERE id = ?';\n  queryParams.push(userId);\n\n  // Execute the query\n  db.query(query, queryParams, (err, result) => {\n    if (err) {\n      console.error('Error updating user:', err.stack);\n      return res.status(500).json({ error: 'Failed to update user' });\n    }\n\n    res.status(200).json({ message: 'User updated successfully' });\n  });\n});\n\n\napp.post('/admin/delete/users/:id', (req, res) => {\n  const userId = req.params.id;\n  \n  // Step 1: Delete associated data first\n  const queries = [\n    'DELETE FROM bookings WHERE place_id IN (SELECT id FROM places WHERE owner_id = ?)',\n    'DELETE FROM places WHERE owner_id = ?',\n    'DELETE FROM notifications WHERE user_id = ?',\n    'DELETE FROM followers WHERE follower_id = ? OR followee_id = ?',\n    'DELETE FROM reviews WHERE user_id = ?'\n  ];\n\n  const deleteData = (query, params) => new Promise((resolve, reject) => {\n    db.query(query, params, (err) => (err ? reject(err) : resolve()));\n  });\n\n  (async () => {\n    try {\n      for (const query of queries) {\n        await deleteData(query, [userId, userId]);\n      }\n      \n      // Step 2: Delete user\n      db.query('DELETE FROM users WHERE id = ?', [userId], (err, results) => {\n        if (err) return res.status(500).json({ error: err.message });\n        if (results.affectedRows === 0) return res.status(404).json({ message: 'User not found' });\n        \n        res.status(200).json({ message: 'User and related data deleted successfully' });\n      });\n    } catch (error) {\n      res.status(500).json({ error: error.message });\n    }\n  })();\n});\n\n\n// Route to get slugs from categories_booking, categories_rent, and categories_sale\napp.get('/categories/slug', (req, res) => {\n  const query = `\n    SELECT slug FROM categories_booking WHERE isActive = 1\n    UNION\n    SELECT slug FROM categories_rent WHERE isActive = 1\n    UNION\n    SELECT slug FROM categories_sale WHERE isActive = 1\n  `;\n\n  db.query(query, (err, results) => {\n    if (err) {\n      console.error('Error fetching categories:', err);\n      return res.status(500).json({ error: 'Failed to fetch categories' });\n    }\n\n    // Extract the slugs from the results\n    const slugs = results.map(row => row.slug);\n\n    // Send the slugs as the response\n    res.json({ slugs });\n  });\n});\n\n\napp.get('/categories/all', (req, res) => {\n  const querySale = 'SELECT * FROM categories_sale WHERE isActive = 1';\n  const queryRent = 'SELECT * FROM categories_rent WHERE isActive = 1';\n  const queryBooking = 'SELECT * FROM categories_booking WHERE isActive = 1';\n\n  // Execute all three queries\n  db.query(querySale, (err, saleResults) => {\n    if (err) return res.status(500).json({ error: err.message });\n    \n    db.query(queryRent, (err, rentResults) => {\n      if (err) return res.status(500).json({ error: err.message });\n\n      db.query(queryBooking, (err, bookingResults) => {\n        if (err) return res.status(500).json({ error: err.message });\n\n        // Send combined response\n        res.json({\n          categoriesSale: saleResults,\n          categoriesRent: rentResults,\n          categoriesBooking: bookingResults\n        });\n      });\n    });\n  });\n});\n\n\napp.get('/categories/admin/all', (req, res) => {\n  const query = `\n    SELECT * FROM (\n      SELECT * FROM categories_sale\n      UNION\n      SELECT * FROM categories_rent\n      UNION\n      SELECT * FROM categories_booking\n    ) AS combined\n    GROUP BY slug\n  `;\n\n  db.query(query, (err, results) => {\n    if (err) {\n      return res.status(500).json({ error: 'Failed to fetch categories' });\n    }\n\n    // Send the combined and distinct slugs as the response\n    res.json({ categories: results });\n  });\n});\n\napp.put('/categories/toggle/:slug', (req, res) => {\n  const { slug } = req.params;\n\n  const queries = [\n    `UPDATE categories_sale SET isActive = NOT isActive WHERE slug = ?`,\n    `UPDATE categories_rent SET isActive = NOT isActive WHERE slug = ?`,\n    `UPDATE categories_booking SET isActive = NOT isActive WHERE slug = ?`\n  ];\n\n  let updated = false;\n\n  // Loop over the queries and try to update the category in each table\n  queries.forEach((query, index) => {\n    db.query(query, [slug], (err, result) => {\n      if (err) {\n        console.error(`Error updating in table ${index + 1}:`, err);\n        return res.status(500).json({ error: `Failed to update category in table ${index + 1}` });\n      }\n\n      // If a row was affected, the update was successful for this table\n      if (result.affectedRows > 0) {\n        updated = true;\n      }\n\n      // Check after the last query has been executed\n      if (index === queries.length - 1) {\n        if (updated) {\n          res.json({ message: `Category with slug '${slug}' updated successfully` });\n        } else {\n          res.status(404).json({ message: `Category with slug '${slug}' not found` });\n        }\n      }\n    });\n  });\n});\n\n\napp.post('/api/places/filter/spesific', (req, res) => {\n  const filters = req.body;\n\n  // Start with a base query\n  let query = 'SELECT * FROM places WHERE approved = ? AND active = ?';\n  const queryParams = [1, 1]; // Ensure only approved and active places are fetched\n\n  // Add conditions dynamically based on provided filters\n  if (filters.title) {\n    query += ' AND title LIKE ?';\n    queryParams.push(`%${filters.title}%`);\n  }\n\n  if (filters.minPrice) {\n    query += ' AND price >= ?';\n    queryParams.push(filters.minPrice);\n  }\n\n  if (filters.maxPrice) {\n    query += ' AND price <= ?';\n    queryParams.push(filters.maxPrice);\n  }\n\n  if (filters.minSpace) {\n    query += ' AND space_general >= ?';\n    queryParams.push(filters.minSpace);\n  }\n\n  if (filters.maxSpace) {\n    query += ' AND space_general <= ?';\n    queryParams.push(filters.maxSpace);\n  }\n\n  if (filters.homeType) {\n    query += ' AND home_type = ?';\n    queryParams.push(filters.homeType);\n  }\n\n  if (filters.features && Array.isArray(filters.features)) {\n    filters.features.forEach((feature) => {\n      query += ' AND JSON_CONTAINS(amenities, ?)';\n      queryParams.push(JSON.stringify([feature]));\n    });\n  }\n\n  if (filters.negotiation) {\n    query += ' AND ads_accept = ?';\n    queryParams.push(filters.negotiation);\n  }\n\n  // Debug the query and parameters for development purposes\n  console.log('Executing SQL query:', query);\n  console.log('Query parameters:', queryParams);\n\n  // Execute the query\n  db.query(query, queryParams, (err, results) => {\n    if (err) {\n      // Log detailed error information for debugging\n      console.error('Error executing SQL query:', {\n        message: err.message,\n        stack: err.stack,\n        code: err.code,\n        sql: err.sql, // Log the actual query string if supported\n      });\n\n      // Set a generic error message\n      let errorMessage = 'An error occurred while filtering places. Please try again later.';\n\n      // Provide specific error messages based on known error codes\n      switch (err.code) {\n        case 'ER_BAD_DB_ERROR':\n          errorMessage = 'Database connection issue. Please try again later.';\n          break;\n        case 'ER_PARSE_ERROR':\n          errorMessage = 'Invalid query syntax. Please check your input.';\n          break;\n        case 'ER_NO_SUCH_TABLE':\n          errorMessage = 'The table you are querying does not exist.';\n          break;\n        default:\n          // For other errors, keep the generic message\n          break;\n      }\n\n      return res.status(500).json({ error: errorMessage });\n    }\n\n    // Return the results if no error occurred\n    res.status(200).json({ places: results });\n  });\n});\n\n\n\napp.post('/ads/update/:id', upload.array('newPhotos'), (req, res) => {\n  const { id } = req.params;\n  const { \n    title, description, price, amenities, variable_prices, \n    selected_day_price, speceficDayInCalander, existingPhotos, \n    folderName, priceBeforeNoon, priceAfterNoon, tripDate, \n    poolType, subsGym \n  } = req.body;\n\n  let allPhotos = [];\n\n  // If there are existing photos (from the database)\n  if (existingPhotos) {\n    allPhotos = Array.isArray(existingPhotos) ? existingPhotos : [existingPhotos];\n  }\n\n  // Process and save the new photos uploaded\n  try {\n    if (req.files && req.files.length > 0) {\n      const folderPath = path.join(__dirname, \"uploads\", folderName);\n      \n      // Ensure the folder exists or create it\n      if (!fs.existsSync(folderPath)) {\n        fs.mkdirSync(folderPath, { recursive: true });\n      }\n\n      // Iterate through the uploaded files and save them\n        const newPhotoPaths = req.files.map(file => {\n            \n        const newFilePath = path.join(folderPath, `${1}_${file.filename}`);\n\n        // Move the file from temporary location to the target folder\n        try {\n          fs.renameSync(file.path, newFilePath);\n        } catch (err) {\n          console.error(`Error moving file: ${file.filename}`, err);\n          return { error: true, message: `Error moving file: ${file.filename}`, details: err.message };\n        }\n\n        return `${1}_${file.filename}`;\n      }).filter(photo => typeof photo !== 'object'); // Filter out errors\n\n      allPhotos = allPhotos.concat(newPhotoPaths);\n    }\n  } catch (err) {\n    console.error('Error handling uploaded files:', err);\n    return res.status(500).json({ message: 'Failed to upload files', error: err.message });\n  }\n\n  // Join all photo paths into a single string separated by commas\n  const photos = allPhotos.join(',');\n\n  // Initialize SQL query and parameters array\n  let sql = `\n    UPDATE places\n    SET \n      title = ?,\n      description = ?,\n      price = ?,\n      photos = ?,\n      variable_prices = ?,\n      calanderDaysPrice = ?,\n      specificDaysInCalendar = ?,\n      priceBeforeNoon = ?,\n      priceAfterNoon = ?,\n      tripDate = ?,\n      poolType = ?,\n      subscriptionTypeGym = ?\n  `;\n\n  const params = [\n    title, description, price, photos, \n    JSON.stringify(variable_prices), \n    selected_day_price, \n    JSON.stringify(speceficDayInCalander), \n    priceBeforeNoon, priceAfterNoon, \n    tripDate, poolType, subsGym\n  ];\n\n  // Conditionally add the amenities to the SQL query and parameters array if provided\n  if (amenities && amenities.length > 0) {\n    sql += `, amenities = ?`;\n    params.push(JSON.stringify(amenities));\n  }\n\n  // Complete the SQL query by adding the WHERE clause\n  sql += ` WHERE id = ?`;\n  params.push(id);\n\n  // Execute the query\n  db.query(sql, params, (err, result) => {\n    if (err) {\n      console.error('Error updating ad:', err);\n      return res.status(500).json({ message: 'Database error', error: err.message });\n    }\n\n    if (result.affectedRows === 0) {\n      return res.status(404).json({ message: 'Ad not found' });\n    }\n\n    res.status(200).json({ message: 'Ad updated successfully', photos });\n  });\n});\n\n\napp.post('/delete/places/:id', (req, res) => {\n  const placeId = req.params.id;\n\n  if (!placeId) {\n    return res.status(400).json({ error: 'Place ID is required' });\n  }\n\n  // Step 1: Get the ownerId from the place\n  const selectQuery = 'SELECT owner_id FROM places WHERE id = ?';\n\n  db.query(selectQuery, [placeId], (err, results) => {\n    if (err) {\n      console.error('Error fetching ownerId:', err);\n      return res.status(500).json({ error: err });\n    }\n\n    if (results.length === 0) {\n      return res.status(404).json({ error: 'Place not found' });\n    }\n\n    const ownerId = results[0].owner_id;\n\n    // Step 2: Increment limitPosts for the user\n    const incrementQuery = `\n      UPDATE users \n      SET limitPosts = limitPosts + 1 \n      WHERE id = ?\n    `;\n\n    db.query(incrementQuery, [ownerId], (err, incrementResults) => {\n      if (err) {\n        console.error('Error incrementing limitPosts:', err);\n        return res.status(500).json({ error: 'Failed to increment limitPosts' });\n      }\n\n      // Step 3: Fetch the updated limitPosts\n      const fetchQuery = 'SELECT limitPosts FROM users WHERE id = ?';\n\n      db.query(fetchQuery, [ownerId], (err, fetchResults) => {\n        if (err) {\n          console.error('Error fetching updated limitPosts:', err);\n          return res.status(500).json({ error: 'Failed to fetch updated limitPosts' });\n        }\n\n        const updatedLimitPosts = fetchResults[0].limitPosts;\n\n        // Step 4: Delete the place\n        const deleteQuery = 'DELETE FROM places WHERE id = ?';\n\n        db.query(deleteQuery, [placeId], (err, deleteResults) => {\n          if (err) {\n            console.error('Error deleting place:', err);\n            return res.status(500).json({ error: 'Failed to delete place' });\n          }\n\n\n          res.status(200).json({ \n            message: 'Place deleted successfully and limitPosts updated', \n            ownerId: ownerId,\n            limitPosts: updatedLimitPosts // Return the updated limitPosts\n          });\n        });\n      });\n    });\n  });\n});\n\n\n\n\n\n// Route to get places by title\napp.get(\"/api/search/places\", (req, res) => {\n  const { title } = req.query;\n\n  const sql = \"SELECT * FROM places WHERE title LIKE ? OR id LIKE ?\";\n\n  db.query(sql, [`%${title}%` , `%${title}%`], (err, results) => {\n    if (err) {\n      console.error(\"Error searching places by title:\", err);\n      return res.status(500).json({ error: \"Internal Server Error\" });\n    }\n\n    // Check if results array is empty\n    if (results.length === 0) {\n      return res.json([]); // Return an empty array if no places found\n    }\n\n    res.json(results); // Return matching places\n  });\n});\n\n\n\napp.post('/api/bookings/add', async (req, res) => {\n  const {\n    checkIn,\n    checkOut,\n    resirvedDays,\n    name,\n    phone,\n    place,\n    price,\n    costumerId\n  } = req.body;\n\n  // Validate required fields\n  if (!checkIn || !checkOut || !place || !price || !costumerId || !resirvedDays) {\n    return res.status(400).json({ error: 'جميع الحقول مطلوبة' });\n  }\n\n  try {\n    // Fetch or validate user details\n    let userDetails;\n    if (name && phone) {\n      userDetails = { name, phone };\n    } else {\n      const [userResult] = await new Promise((resolve, reject) => {\n        db.query('SELECT name, phone FROM users WHERE id = ?', [costumerId], \n        (err, results) => {\n          if (err) return reject(err);\n          resolve(results);\n        });\n      });\n      \n      if (!userResult) {\n        return res.status(404).json({ error: 'المستخدم غير موجود' });\n      }\n      userDetails = userResult;\n    }\n\n    // Create booking ID\n    const bookingId = uuidv4();\n\n    // Insert booking\n    await new Promise((resolve, reject) => {\n      const insertSql = `\n        INSERT INTO bookings \n          (id, check_in, check_out, name, phone, place_id, price, costumerId)\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?)`;\n      \n      db.query(insertSql, [\n        bookingId,\n        checkIn,\n        checkOut,\n        userDetails.name,\n        userDetails.phone,\n        place,\n        price,\n        costumerId\n      ], (err, result) => {\n        if (err) return reject(err);\n        resolve(result);\n      });\n    });\n\n    // Update place's notAllowedDays\n    await new Promise((resolve, reject) => {\n      const updateSql = `\n        UPDATE places \n        SET notAllowedDays = ? \n        WHERE id = ?`;\n      \n      db.query(updateSql, [resirvedDays, place], (err, result) => {\n        if (err) return reject(err);\n        resolve(result);\n      });\n    });\n\n    // Get place owner information\n    const [placeData] = await new Promise((resolve, reject) => {\n      db.query('SELECT owner_id FROM places WHERE id = ?', [place], \n      (err, results) => {\n        if (err) return reject(err);\n        resolve(results);\n      });\n    });\n\n    // Get owner's Expo push token\n    const [ownerData] = await new Promise((resolve, reject) => {\n      db.query('SELECT notificationToken FROM users WHERE id = ?', [placeData.owner_id], \n      (err, results) => {\n        if (err) return reject(err);\n        resolve(results);\n      });\n    });\n\n    // Send Expo notification if token exists\n    if (ownerData?.notificationToken) {\n      try {\n        const expo = new Expo();\n        const notification = {\n          to: ownerData.notificationToken,\n          sound: 'default',\n          title: 'حجز جديد',\n          body: `لديك حجز جديد في إعلانك رقم ${place}`,\n          data: { bookingId },\n        };\n\n        // Chunk and send notifications\n        const chunks = expo.chunkPushNotifications([notification]);\n        for (const chunk of chunks) {\n          await expo.sendPushNotificationsAsync(chunk);\n        }\n      } catch (notificationError) {\n        console.error('فشل إرسال الإشعار:', notificationError);\n      }\n    }\n\n    // Insert notification log\n    await new Promise((resolve, reject) => {\n      const notifSql = `\n        INSERT INTO notifications \n          (title, message, user_id, from_id, book_id)\n        VALUES (?, ?, ?, ?, ?)`;\n      \n      db.query(notifSql, [\n        'حجز جديد',\n        `حجز جديد في الإعلان رقم ${place}`,\n        placeData.owner_id,\n        1, // Assuming 1 is system/admin ID\n        bookingId\n      ], (err, result) => {\n        if (err) return reject(err);\n        resolve(result);\n      });\n    });\n\n    res.status(200).json({\n      message: 'تم إضافة الحجز بنجاح',\n      bookingId,\n    });\n\n  } catch (error) {\n    console.error('خطأ في إضافة الحجز:', error);\n    res.status(500).json({ \n      error: 'خطأ داخلي في الخادم',\n      details: error.message \n    });\n  }\n});\n\n\n\napp.get('/get-all-bookings', async (req, res) => {\n  try {\n    // Get all bookings with user (owner) and place details\n    const [bookingsRows] = await new Promise((resolve, reject) => {\n      db.query(\n        `SELECT \n          bookings.id,\n          bookings.place_id,\n          bookings.check_in,\n          bookings.check_out,\n          bookings.no_of_guests,\n          bookings.price,\n          bookings.status,\n          users.name AS user_name,\n          users.phone,\n          places.title AS place_title,\n          places.id AS placeId,\n          places.photos AS place_photos,\n          places.home_type AS place_type,\n          places.folderName\n        FROM bookings\n        INNER JOIN places ON bookings.place_id = places.id\n        LEFT JOIN users ON places.owner_id = users.id  -- FIX: Join places.owner_id with users.id\n        ORDER BY bookings.check_in DESC`,\n        (err, rows) => {\n          if (err) return reject(err);\n          resolve([rows]);\n        }\n      );\n    });\n\n    // Format the response\n    const formattedBookings = bookingsRows.map(booking => ({\n      id: booking.id,\n      userName: booking.user_name || 'اسم المستخدم غير معرف',\n      phone: booking.phone || 'رقم الهاتف غير متوفر',\n      duration: calculateDuration(booking.check_in, booking.check_out),\n      date: formatDate(booking.check_in),\n      placeTitle: booking.place_title,\n      image: booking.place_photos?.[0] || 'default.jpg',\n      type: booking.place_type,\n      placeId:booking.placeId ,\n      guests: booking.no_of_guests,\n      rooms: 2, // Consider adding this to your places table\n      price: `${booking.price} JOD`,\n      status: booking.status || 'Pending',\n      folderName: booking.folderName,\n      photos: booking.place_photos || null,\n    }));\n\n    res.status(200).json(formattedBookings);\n  } catch (error) {\n    console.error('Error fetching bookings:', {\n      message: error.message,\n      stack: error.stack,\n      sqlError: error.sqlMessage\n    });\n    res.status(500).json({ error });\n  }\n});\n\n\n\n\n// Endpoint to get bookings by user ID\napp.post('/get-bookings-by-user', async (req, res) => {\n  const { userId } = req.body;\n\n  try {\n    // 1. Get user's places\n    const [placesRows] = await new Promise((resolve, reject) => {\n      db.query(\n        'SELECT id, folderName, photos, title, home_type FROM places WHERE owner_id = ?',\n        [userId],\n        (err, rows) => {\n          if (err) return reject(err);\n          resolve([rows]);\n        }\n      );\n    });\n\n    if (placesRows.length === 0) {\n      return res.status(200).json([]);\n    }\n\n    // 2. Get bookings for these places\n    const placeIds = placesRows.map(place => place.id);\n    \n    // Fix 1: Use dynamic placeholders for IN clause\n    const placeholders = placeIds.map(() => '?').join(',');\n// Corrected SQL query without JS-style comments\nconst [bookingsRows] = await new Promise((resolve, reject) => {\n\ndb.query(\n  `SELECT \n    id, \n    place_id,\n    check_in, \n    check_out, \n    no_of_guests, \n    price, \n    name AS userName, \n    phone, \n    status \n  FROM bookings \n  WHERE place_id IN (${placeholders})\n  ORDER BY check_in DESC`,  // Add sorting here\n  placeIds,  // Keep place IDs as parameters\n  (err, rows) => {\n    if (err) return reject(err);\n    resolve([rows]);\n  }\n);\n});\n\n    // 3. Combine data with type conversion\n    const formattedBookings = bookingsRows\n      .map((booking) => {\n        // Fix 2: Ensure numeric comparison\n        const matchingPlace = placesRows.find(\n          place => place.id === Number(booking.place_id)\n        );\n\n        if (!matchingPlace) {\n          console.warn(`Orphan booking ${booking.id} has invalid place_id ${booking.place_id}`);\n          return null;\n        }\n\n        return {\n          id: booking.id,\n          userName: booking.userName || 'اسم المستخدم غير معرف',\n          phone: booking.phone || 'رقم الهاتف غير متوفر',\n          duration: calculateDuration(booking.check_in, booking.check_out),\n          date: formatDate(booking.check_in),\n          placeTitle: matchingPlace.title,\n          image: matchingPlace.photos?.[0] || 'default.jpg',\n          type: matchingPlace.home_type,\n          guests: booking.no_of_guests,\n          rooms: 2, // You need to add this field to your places table\n          price: `${booking.price} JOD`,\n          status: booking.status || 'Pending',\n          folderName: matchingPlace.folderName,\n          photos: matchingPlace.photos || null,\n        };\n      })\n      .filter(booking => booking !== null);\n\n    console.log('Final formatted bookings:', formattedBookings); // Debug log\n    res.status(200).json(formattedBookings);\n    \n  } catch (error) {\n    console.error('Error:', {\n      message: error.message,\n      stack: error.stack,\n      queryError: error.sqlMessage // If SQL error\n    });\n    res.status(500).json({ error: error });\n  }\n});\n\n\n\n// Helper function to calculate duration\nfunction calculateDuration(checkIn, checkOut) {\n  const start = new Date(checkIn);\n  const end = new Date(checkOut);\n  const diffTime = Math.abs(end - start);\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  return diffDays;\n}\n\n// Helper function to format date\nfunction formatDate(dateString) {\n  const date = new Date(dateString);\n  const day = String(date.getDate()).padStart(2, '0');\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const year = date.getFullYear();\n  return `${day} ${getMonthName(month)} ${year}`;\n}\n\n// Function to get Arabic month names\nfunction getMonthName(month) {\n  const months = [\n    'يناير',\n    'فبراير',\n    'مارس',\n    'أبريل',\n    'مايو',\n    'يونيو',\n    'يوليو',\n    'أغسطس',\n    'سبتمبر',\n    'أكتوبر',\n    'نوفمبر',\n    'ديسمبر',\n  ];\n  return months[month - 1];\n}\n\n\n\n\napp.post('/update-booking-status', async (req, res) => {\n  const { bookingId, newStatus } = req.body;\n\n  try {\n    // Validate input\n    if (!bookingId || !newStatus) {\n      return res.status(400).json({ error: 'Missing required fields' });\n    }\n\n    // Update database\n    const [result] = await new Promise((resolve, reject) => {\n      db.query(\n        `UPDATE bookings b\n         JOIN places p ON b.place_id = p.id\n         SET b.status = ?\n         WHERE b.id = ? AND p.owner_id = ?`,\n        [newStatus, bookingId, req.body.userId], // Assuming you send userId in request\n        (err, results) => {\n          if (err) return reject(err);\n          resolve([results]);\n        }\n      );\n    });\n\n    if (result.affectedRows === 0) {\n      return res.status(404).json({ error: 'Booking not found or unauthorized' });\n    }\n\n    res.status(200).json({ message: 'Status updated successfully' });\n  } catch (error) {\n    console.error('Error updating booking status:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n\n\n// Update user name\napp.post(\"/user/update-name\", (req, res) => {\n  const { id, name , description } = req.body;\n\n  if (!id || !name) {\n    return res.status(400).json({\n      message: \"Provide user ID and name to update\",\n    });\n  }\n\n  // Prepare SQL update query for updating the name\n  const sql = `UPDATE users SET name = ? , description = ?  WHERE id = ?`;\n  db.query(sql, [name , description, id], (updateErr, updateResult) => {\n    if (updateErr) {\n      console.error(updateErr);\n      return res.status(500).json({\n        message: \"Internal server error\",\n        error: updateErr,\n      });\n    }\n\n    if (updateResult.affectedRows === 0) {\n      return res.status(200).json({\n        message: \"User not found\",\n      });\n    }\n\n    // Fetch the updated user data after successful update\n    const selectUserSql = 'SELECT * FROM users WHERE id = ?';\n    db.query(selectUserSql, [id], (selectErr, userResult) => {\n      if (selectErr) {\n        console.error('Error fetching updated user:', selectErr);\n        return res.status(500).json({\n          message: \"Internal server error\",\n          error: selectErr,\n        });\n      }\n\n      if (userResult.length === 0) {\n        return res.status(200).json({\n          message: \"User not found after update\",\n        });\n      }\n\n      // Return success message along with updated user data\n      res.status(200).json({\n        message: \"User name updated successfully\",\n        user: userResult[0], // Updated user data\n      });\n    });\n  });\n});\n\n\n// Route to get bookings by customer ID\napp.get(\"/api/bookings\", (req, res) => {\n  const { costumerId } = req.query;\n  const sql = \"SELECT * FROM bookings WHERE costumerId = ?\";\n\n  db.query(sql, [costumerId], (err, results) => {\n    if (err) {\n      console.error(\"Error fetching bookings by customer ID:\", err);\n      return res.status(500).json({ error: \"Internal Server Error\" });\n    }\n\n    res.json({ bookings: results });\n  });\n  \n});\n\napp.get('/bookings/getTitles/:place_id', (req, res) => {\n  const placeId = req.params.place_id;\n\n  const query = `\n    SELECT id, check_in, check_out\n    FROM bookings\n    WHERE place_id = ?\n  `;\n\n  db.query(query, [placeId], (err, results) => {\n    if (err) {\n      return res.status(500).json({ error: 'Database query failed' });\n    }\n\n    // Format the results\n    const formattedResults = results.map(booking => ({\n      id: booking.id,\n      ckeckIn: booking.check_in ,\n      chekcOut : booking.check_out\n    }));\n\n    res.json(formattedResults);\n  });\n});\n\n\napp.get(\"/api/bookings/get/:id\", (req, res) => {\n  const { id } = req.params;\n  const sql = \"SELECT * FROM bookings WHERE id = ?\";\n\n  db.query(sql, [id], (err, bookingResult) => {\n    if (err) {\n      console.error(\"Error getting booking by ID:\", err);\n      return res.status(500).json({ error: \"Internal Server Error\" });\n    }\n\n    if (bookingResult.length === 0) {\n      return res.status(404).json({ error: \"Booking not found\" });\n    }\n\n    const booking = bookingResult[0];\n    const placeSql = \"SELECT * FROM places WHERE id = ?\";\n\n    db.query(placeSql, [booking.place_id], (err, placeResult) => {\n      if (err) {\n        console.error(\"Error getting place details:\", err);\n        return res.status(500).json({ error: \"Internal Server Error\" });\n      }\n\n      if (placeResult.length === 0) {\n        console.error(\"Place not found for booking:\", booking.id);\n        return res.status(500).json({ error: \"Place not found for booking\" });\n      }\n\n      const place = placeResult[0];\n      // Combine booking and place details\n      const bookingWithPlace = {\n        ...booking,\n        place: place,\n      };\n\n      res.json(bookingWithPlace);\n    });\n  });\n});\n\n\n\n\n\napp.post('/check-phone', async (req, res) => {\n    const { phoneNumber } = req.body;\n    \n     const phone = phoneNumber.replace(/^\\+9620/, \"+962\");\n\n    try {\n        // Check if phone number exists\n        const sql = 'SELECT * FROM users WHERE phone = ?';\n\n        db.query(sql, [phone], (err, result) => {\n            if (err) {\n                console.error('Database query error:', err);\n                res.status(500).json({ success: false, message: 'An error occurred while retrieving user' });\n                return;\n            }\n\n            if (result.length > 0) {\n                const user = result[0];\n                const lastSentTime = user.lastCodeSentTime ? new Date(user.lastCodeSentTime) : null;\n                const now = new Date();\n\n                if (lastSentTime && (now - lastSentTime) < 30000) { \n                    // If the last code was sent less than 30 seconds ago\n                    return res.status(429).json({\n                        message: 'Please wait before requesting another code.',\n                        success: false\n                    });\n                }\n\n                const verificationCode = Math.floor(1000 + Math.random() * 9000).toString();\n                let message = `رمز استرجاع كلمة المرور هو ${verificationCode}`;\n\n                sendVerificationCode(phone, message)\n                    .then(() => {\n                        const updateSql = 'UPDATE users SET lastCodeSentTime = ? WHERE phone = ?';\n                        db.query(updateSql, [now, phone], (err , result)=>{\n                            if(err){\n                                return res.json({err});\n                            }\n                            \n                       \n\n                        res.status(200).json({\n                            message: 'Phone found and the verification code was sent to the phone number.',\n                            success: true,\n                            code: verificationCode\n                        });\n                        });\n                    })\n                    .catch((error) => {\n                        console.log(error);\n                        res.status(500).json({\n                            message: 'Failed to send verification code',\n                            error: error.message\n                        });\n                    });\n\n            } else {\n                res.status(200).json({ success: false, message: 'Phone number not found' });\n            }\n        });\n    } catch (error) {\n        res.status(500).json({ success: false, message: 'Server error' });\n    }\n});\n\n\n\n\n\n\n\napp.post('/reset-password-forget', (req, res) => {\n  const { phoneNumber, newPassword } = req.body;\n     const normalizedPhone = phoneNumber.replace(/^\\+9620/, \"+962\");\n\n  // Check if phone number exists\n  const sql = 'SELECT * FROM users WHERE phone = ?';\n  db.query(sql, [normalizedPhone], (err, result) => {\n    if (err) {\n      console.error('Database query error:', err);\n      return res.status(500).json({ success: false, message: 'An error occurred while retrieving user' });\n    }\n\n    if (result.length > 0) {\n      // Update the password in the database\n      const updateSql = 'UPDATE users SET password = ? WHERE phone = ?';\n      db.query(updateSql, [newPassword, normalizedPhone], (err, updateResult) => {\n        if (err) {\n          console.error('Database update error:', err);\n          return res.status(500).json({ success: false, message: 'An error occurred while updating password' });\n        }\n\n        if (updateResult.affectedRows > 0) {\n          // Retrieve the updated user information\n          const userSql = 'SELECT * FROM users WHERE phone = ?';\n          db.query(userSql, [normalizedPhone], (err, updatedUser) => {\n            if (err) {\n              console.error('Database query error:', err);\n              return res.status(500).json({ success: false, message: 'An error occurred while retrieving updated user data' });\n            }\n            \n            \n\n            // Send the response with updated user data\n            res.json({ \n              success: true, \n              message: 'Password updated successfully',\n              user: updatedUser[0] // Return the first user record\n            });\n          });\n        } else {\n          // Phone number not found after update\n          res.status(400).json({ success: false, message: 'Phone number not found' });\n        }\n      });\n    } else {\n      // Phone number not found\n      res.status(400).json({ success: false, message: 'Phone number not found' });\n    }\n  });\n})\n\n\n\n\napp.post('/user/phone-verification', (req, res) => {\n    const { id, phone } = req.body;\n\n    // First, check if the phone number is already in use by another user\n    const checkPhoneQuery = 'SELECT * FROM users WHERE phone = ?';\n    \n    db.query(checkPhoneQuery, [phone], (err, results) => {\n        if (err) {\n            console.error('Error checking phone number:', err);\n            return res.status(500).json({\n                message: 'Server error',\n                error: err.message,\n            });\n        }\n\n        if (results.length > 0) {\n            // If the phone number is already in use, return an error message\n            return res.status(400).json({\n                message: 'Phone number is already used by another user',\n                success: false,\n            });\n        }\n\n        // If the phone number is not in use, proceed to send the verification code\n        const verificationCode = Math.floor(1000 + Math.random() * 9000).toString();\n        const message = `رمز التحقق من الرقم الجديد ${verificationCode}`;\n\n        sendVerificationCode(phone, message)\n            .then((response) => {\n                // Return success message with the verification code\n                res.status(200).json({\n                    message: 'Phone verification code sent successfully',\n                    success: true,\n                    code: verificationCode,\n                });\n            })\n            .catch((error) => {\n                console.error('Error sending verification code:', error);\n                res.status(500).json({\n                    message: 'Failed to send verification code',\n                    error: error.message,\n                });\n            });\n    });\n});\n\n\n\n\n\napp.post('/user/update-phone', (req, res) => {\n    const userId = req.body.id;\n    const newPhone = req.body.phone;\n\n    if (!newPhone) {\n        return res.status(400).json({ error: 'Phone number is required' });\n    }\n\n    const sql = 'UPDATE users SET phone = ? WHERE id = ?';\n    \n    db.query(sql, [newPhone, userId], (err, result) => {\n        if (err) {\n            console.error('Error updating phone number:', err);\n            return res.status(500).json({ error: 'Failed to update phone number' });\n        }\n\n        if (result.affectedRows === 0) {\n            return res.status(404).json({ error: 'User not found' });\n        }\n\n        res.json({ message: 'Phone number updated successfully' });\n    });\n});\n\n\n\n// filter\n\napp.get('/places/filter/city', async (req, res) => {\n    try {\n        const { longitude, latitude, name } = req.query;\n\n        if (!longitude || !latitude || !name) {\n            return res.status(400).json({ error: 'Longitude, latitude, and name are required' });\n        }\n\n        // Convert latitude and longitude to float\n        const lat = parseFloat(latitude);\n        const lng = parseFloat(longitude);\n\n        if (isNaN(lat) || isNaN(lng)) {\n            return res.status(400).json({ error: 'Invalid latitude or longitude' });\n        }\n\n        // MySQL query with additional conditions for approved and active\n        const query = `\n            SELECT *, \n            (\n                6371 * acos(\n                    cos(radians(?)) * cos(radians(lat)) * \n                    cos(radians(lng) - radians(?)) + \n                    sin(radians(?)) * sin(radians(lat))\n                )\n            ) AS distance\n            FROM places\n            WHERE (address LIKE ? \n            OR (\n                6371 * acos(\n                    cos(radians(?)) * cos(radians(lat)) * \n                    cos(radians(lng) - radians(?)) + \n                    sin(radians(?)) * sin(radians(lat))\n                ) <= 10\n            ))\n            AND approved = true\n            AND active = true\n            HAVING distance IS NOT NULL\n            ORDER BY distance;\n        `;\n\n        const values = [lat, lng, lat, `%${name}%`, lat, lng, lat];\n        \n        db.query(query, values, (error, results) => {\n            if (error) {\n                console.error('Database query error:', error); // Log the error for debugging\n                return res.status(500).json({ error: 'Database query failed' });\n            }\n            \n            // Debugging: log query results\n            console.log('Query results:', results);\n            \n            if (results.length === 0) {\n                return res.status(200).json([]);\n            }\n\n            res.json({ places: results });\n        });\n    } catch (error) {\n        console.error('Server error:', error); // Log the error for debugging\n        res.status(500).json({ error: 'Server error' });\n    }\n});\n\nfunction generateRandomToken(length) {\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let token = '';\n    for (let i = 0; i < length; i++) {\n        const randomIndex = Math.floor(Math.random() * characters.length);\n        token += characters[randomIndex];\n    }\n    return token;\n}\n\n\napp.post('/api/admin/login', (req, res) => {\n  const { phone, password } = req.body;\n        \n  if (!phone || !password) {\n    return res.status(400).json({ message: 'يرجى إدخال رقم الهاتف وكلمة المرور' });\n  }\n\n  // Query to check if the admin exists with the provided phone and password\n  const sql = 'SELECT * FROM admins WHERE phone = ? AND password = ?';\n  db.query(sql, [phone, password], (err, results) => {\n    if (err) {\n      console.error('Error querying the database:', err);\n      return res.status(500).json({ message: 'خطأ في الخادم' });\n    }\n\n    if (results.length > 0) {\n      // Admin exists\n      const adminData = results[0]; // Get the admin data\n\n      // Generate a random token\n      const token = generateRandomToken(10);\n\n      // Update the token in the admins table\n      const updateTokenSql = 'UPDATE admins SET token = ? WHERE phone = ?';\n      db.query(updateTokenSql, [token, phone], (err) => {\n        if (err) {\n          console.error('Error updating the token:', err);\n          return res.status(500).json({ message: 'خطأ في تحديث الرمز' });\n        }\n\n        // Respond with the token and admin data\n        return res.json({ token, admin: adminData });\n      });\n    } else {\n      // Admin not found or incorrect password\n      return res.status(401).json({ message: 'رقم الهاتف أو كلمة المرور غير صحيحة' });\n    }\n  });\n});\n\n\n\napp.get('/admin/counts', (req, res) => {\n  // Initialize an object to store all the counts\n  const counts = {};\n\n  // Step 1: Count total places\n  db.query('SELECT COUNT(*) AS totalAdvertient FROM places', (err, results) => {\n    if (err) {\n      console.error('Error fetching total places:', err);\n      return res.status(500).send('Error fetching data');\n    }\n\n    counts.totalAdvertient = results[0].totalAdvertient;\n\n    // Step 2: Count total users\n    db.query('SELECT COUNT(*) AS totalUsers FROM users', (err, results) => {\n      if (err) {\n        console.error('Error fetching total users:', err);\n        return res.status(500).send('Error fetching data');\n      }\n\n      counts.totalUsers = results[0].totalUsers;\n\n      // Step 3: Count places where approved = false\n      db.query('SELECT COUNT(*) AS addsnotaprovi FROM places WHERE approved = 0', (err, results) => {\n        if (err) {\n          console.error('Error fetching not accepted places:', err);\n          return res.status(500).send('Error fetching data');\n        }\n\n        counts.addsnotaprovi = results[0].addsnotaprovi;\n\n        // Step 4: Count total bookings\n        db.query('SELECT COUNT(*) AS bookingNumbe FROM bookings', (err, results) => {\n          if (err) {\n            console.error('Error fetching total bookings:', err);\n            return res.status(500).send('Error fetching data');\n          }\n\n          counts.bookingNumbe = results[0].bookingNumbe;\n\n          // Step 5: Count total reports\n          db.query('SELECT COUNT(*) AS totalReports FROM reports', (err, results) => {\n            if (err) {\n              console.error('Error fetching total reports:', err);\n              return res.status(500).send('Error fetching data');\n            }\n\n            counts.totalReports = results[0].totalReports;\n\n            // Step 6: Count total sponsored places\n            db.query('SELECT COUNT(*) AS totalSponsoredPlaces FROM places WHERE sponsored = 1', (err, results) => {\n              if (err) {\n                console.error('Error fetching total sponsored places:', err);\n                return res.status(500).send('Error fetching data');\n              }\n\n              counts.totalSponsoredPlaces = results[0].totalSponsoredPlaces;\n\n              // Step 7: Count total trusted users (trustable = 1)\n              db.query('SELECT COUNT(*) AS totalTrustedUsers FROM users WHERE trustable = 1', (err, results) => {\n                if (err) {\n                  console.error('Error fetching total trusted users:', err);\n                  return res.status(500).send('Error fetching data');\n                }\n\n                counts.totalTrustedUsers = results[0].totalTrustedUsers;\n\n                // Finally, send the response with all counts\n                res.json(counts);\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});\n\n\napp.get('/admins', (req, res) => {\n  const query = 'SELECT * FROM admins';\n  db.query(query, (err, results) => {\n    if (err) {\n      return res.status(500).json({ error: 'Database error', details: err });\n    }\n    res.json(results);\n  });\n});\n\napp.post('/admins', (req, res) => {\n  const { phone, password, role , name } = req.body;\n\n  if (!phone || !password || !role) {\n    return res.status(400).json({ error: 'Phone, password, and role are required' });\n  }\n\n  const query = 'INSERT INTO admins (phone, password, role , name) VALUES (?, ?, ? , ?)';\n  db.query(query, [phone, password, role , name], (err, results) => {\n    if (err) {\n      return res.status(500).json({ error: 'Database error', details: err });\n    }\n    res.status(201).json({ message: 'Admin added successfully', adminId: results.insertId });\n  });\n});\n\n\napp.delete('/admins/:id', (req, res) => {\n  const adminId = req.params.id;\n\n  const query = 'DELETE FROM admins WHERE id = ?';\n  db.query(query, [adminId], (err, results) => {\n    if (err) {\n      return res.status(500).json({ error: 'Database error', details: err });\n    }\n    if (results.affectedRows === 0) {\n      return res.status(404).json({ error: 'Admin not found' });\n    }\n    res.json({ message: 'Admin removed successfully' });\n  });\n});\n\n\napp.delete('/places/:id', (req, res) => {\n  const placeId = req.params.id;\n\n  const query = 'DELETE FROM places WHERE id = ?';\n  db.query(query, [placeId], (err, results) => {\n    if (err) {\n      return res.status(500).json({ error: 'Database error', details: err });\n    }\n    if (results.affectedRows === 0) {\n      return res.status(404).json({ error: 'Place not found' });\n    }\n    res.json({ message: 'Place deleted successfully' });\n  });\n});\n\n\n\napp.put('/places/:id/approve', (req, res) => {\n  const placeId = req.params.id;\n  const { adminToken } = req.body;\n\n  // 1. Toggle the 'approved' column\n  const updateQuery = 'UPDATE places SET approved = NOT approved WHERE id = ?';\n  db.query(updateQuery, [placeId], (updateErr, updateResults) => {\n    if (updateErr) {\n      console.error('Database error (update place):', updateErr);\n      return res.status(500).json({ error: 'Database error', details: updateErr });\n    }\n\n    if (updateResults.affectedRows === 0) {\n      return res.status(404).json({ error: 'Place not found' });\n    }\n\n    // 2. Get the updated approval status and owner ID\n    const selectQuery = 'SELECT approved, owner_id FROM places WHERE id = ?';\n    db.query(selectQuery, [placeId], (selectErr, placeResults) => {\n      if (selectErr) {\n        console.error('Database error (select place):', selectErr);\n        return res.status(500).json({ error: 'Database error', details: selectErr });\n      }\n\n      if (placeResults.length === 0) {\n        return res.status(404).json({ error: 'Place not found' });\n      }\n\n      const { approved, owner_id } = placeResults[0];\n      const approvalStatus = approved ? 'تمت الموافقة' : 'لم تتم الموافقة';\n\n      // 3. Get the admin details\n      const fetchAdminQuery = 'SELECT id, name FROM admins WHERE token = ?';\n      db.query(fetchAdminQuery, [adminToken], (adminErr, adminResults) => {\n        if (adminErr) {\n          console.error('Database error (fetch admin):', adminErr);\n          return res.status(500).json({ error: 'Database error', details: adminErr });\n        }\n\n        if (adminResults.length === 0) {\n          return res.status(404).json({ error: 'Admin not found' });\n        }\n\n        const admin = adminResults[0];\n        const adminId = admin.id;\n        const adminName = admin.name;\n\n        // 4. Log the admin action\n        const actionType = 'تغير حالة الاعلان';\n        const actionMessage = `${placeId} على الاعلان رقم ${approvalStatus}`;\n\n        const insertActionQuery = `\n          INSERT INTO admin_actions_history \n          (admin_id, admin_name, action_type, place_id, action_message)\n          VALUES (?, ?, ?, ?, ?)\n        `;\n\n        db.query(insertActionQuery, [adminId, adminName, actionType, placeId, actionMessage], (insertErr, insertResults) => {\n          if (insertErr) {\n            console.error('Database error (insert action):', insertErr);\n            return res.status(500).json({ error: 'Database error', details: insertErr });\n          }\n\n          // 5. Get the user's push token\n          const userQuery = 'SELECT notificationToken FROM users WHERE id = ?';\n          db.query(userQuery, [owner_id], (userErr, userResults) => {\n            if (userErr) {\n              console.error('Database error (fetch user):', userErr);\n              return res.status(500).json({ error: 'Database error', details: userErr });\n            }\n\n            if (userResults.length === 0) {\n              return res.status(404).json({ error: 'Owner not found' });\n            }\n\n            const { notificationToken } = userResults[0];\n\n            // 6. Send the notification if the token is valid\n            if (notificationToken && Expo.isExpoPushToken(notificationToken)) {\n              const message = `الإعلان رقم ${placeId} ${approvalStatus}`;\n              const notificationData = {\n                to: notificationToken,\n                sound: 'default',\n                title: 'حالة الموافقة على الإعلان',\n                body: message,\n              };\n\n              expo.sendPushNotificationsAsync([notificationData])\n                .then(() => {\n                  console.log('Notification sent successfully');\n                })\n                .catch((expoErr) => {\n                  console.error('Error sending notification:', expoErr);\n                });\n            }\n\n            // 7. Save the notification in the database\n            const notificationQuery = `\n              INSERT INTO notifications (from_id, user_id, title, message, placeId)\n              VALUES (?, ?, ?, ?, ?)\n            `;\n\n            db.query(notificationQuery, [1, owner_id, 'حالة الموافقة على الإعلان', actionMessage, placeId], (notifyErr, notifyResults) => {\n              if (notifyErr) {\n                console.error('Database error (insert notification):', notifyErr);\n                return res.status(500).json({ error: 'Database error', details: notifyErr });\n              }\n\n              // 8. Return success response\n              res.status(200).json({\n                success: true,\n                message: 'تم تحديث حالة الموافقة على الإعلان وإرسال الإشعار بنجاح',\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n});\n\n\napp.delete('/bookings/:id', (req, res) => {\n  const bookingId = req.params.id;\n\n  const query = 'DELETE FROM bookings WHERE id = ?';\n  db.query(query, [bookingId], (err, results) => {\n    if (err) {\n      return res.status(500).json({ error: 'Database error', details: err });\n    }\n    if (results.affectedRows === 0) {\n      return res.status(404).json({ error: 'Booking not found' });\n    }\n    res.json({ message: 'Booking deleted successfully' });\n  });\n});\n\nconst slidersDirectory = path.join(__dirname, 'uploads', 'sliders');\n\nconst iconsDirectory = path.join(__dirname, 'uploads', 'icons');\n\n\napp.post('/api/slides', upload.single('slide'), (req, res) => {\n  const file = req.file;\n  const {serviceId} = req.body\n\n  if (!file) {\n    return res.status(400).json({ error: 'No file uploaded' });\n  }\n\n  const tempFilePath = path.join(__dirname, 'uploads', 'temp', file.filename);\n  const sliderFilePath = path.join(__dirname, 'uploads', 'sliders', file.filename); // Path for sliders\n\n  // Move the file to the sliders directory\n  fs.rename(tempFilePath, sliderFilePath, (err) => {\n    if (err) {\n      console.error('Error moving file to sliders directory:', err);\n      return res.status(500).json({ error: 'Could not move file' });\n    }\n\n    const filePath = `${file.filename}`; // Relative path for the DB\n\n    // Prepare a query to insert the slide into the database\n    const query = `INSERT INTO sliders (name, file_path , serviceId) VALUES ?`;\n    const values = [[file.originalname, filePath , serviceId]]; // Single entry as an array\n\n    db.query(query, [values], (err, result) => {\n      if (err) {\n        console.error('Error inserting data into database:', err);\n        return res.status(500).json({ error: 'Database error' });\n      }\n\n      // Send a success response back to the client\n      res.json({ slide: { name: file.originalname, file_path : filePath } });\n    });\n  });\n});\n\n\n\napp.use('/uploads/sliders', express.static(path.join(__dirname, 'uploads/sliders')));\n\n// Route to fetch all slider images\napp.get('/api/slides', (req, res) => {\n  const query = 'SELECT * FROM sliders';\n\n  db.query(query, (err, results) => {\n    if (err) {\n      console.error('Error fetching data from database:', err);\n      return res.status(500).json({ error: 'Database error' });\n    }\n\n    // Send back the slider data (name and path)\n    res.json(results);\n  });\n});\n\n\n\n// Route to get a specific image by file name\napp.get('/api/slides/single/:fileName', (req, res) => {\n  const { fileName } = req.params;\n\n  // Construct the full file path\n  const filePath = path.join(slidersDirectory, fileName);\n\n  // Check if the file exists\n  fs.access(filePath, fs.constants.F_OK, (err) => {\n    if (err) {\n      return res.status(404).json({ message: 'File not found' });\n    }\n\n    // Send the file\n    res.sendFile(filePath, (err) => {\n      if (err) {\n        console.error('Error sending file:', err);\n        res.status(500).json({ message: 'Error sending file' });\n      }\n    });\n  });\n});\n\napp.get('/api/icons/single/:fileName', (req, res) => {\n  const { fileName } = req.params;\n\n  // Construct the full file path\n  const filePath = path.join(iconsDirectory, fileName);\n\n  // Check if the file exists\n  fs.access(filePath, fs.constants.F_OK, (err) => {\n    if (err) {\n      return res.status(404).json({ message: 'File not found' });\n    }\n\n    // Send the file\n    res.sendFile(filePath, (err) => {\n      if (err) {\n        console.error('Error sending file:', err);\n        res.status(500).json({ message: 'Error sending file' });\n      }\n    });\n  });\n});\n\napp.delete('/api/slides/:fileName', (req, res) => {\n  const { fileName } = req.params;\n\n  // Construct the full file path\n  const filePath = path.join(slidersDirectory, fileName);\n\n  // Remove the file from the filesystem\n  fs.unlink(filePath, (err) => {\n    if (err) {\n      console.error('Error deleting file:', err);\n      return res.status(500).json({ message: 'Error deleting file' });\n    }\n\n    // Prepare SQL query to delete the entry from the database\n    const query = 'DELETE FROM sliders WHERE file_path = ?';\n    \n    // Assuming the file path in DB matches the filename with the uploads directory\n    const dbFilePath = `${fileName}`;\n\n    db.query(query, [dbFilePath], (dbErr, result) => {\n      if (dbErr) {\n        console.error('Error deleting from database:', dbErr);\n        return res.status(500).json({ message: 'Database error' });\n      }\n\n      res.json({ message: 'Slide deleted successfully' });\n    });\n  });\n});\n\n\n\n\napp.post('/update-settings', (req, res) => {\n    const { whatsappLink, phoneNumber, commissionValue, limitPosts , appVersion } = req.body;\n\n    // Check if settings already exist\n    const checkSql = 'SELECT COUNT(*) AS count FROM settings';\n\n    db.query(checkSql, (err, results) => {\n        if (err) {\n            console.error('Error checking settings:', err);\n            return res.status(500).json({ error: 'Failed to check settings.' });\n        }\n\n        const exists = results[0].count > 0;\n\n        // If settings exist, update them; otherwise, insert the new settings\n        const sql = exists\n            ? `\n                UPDATE settings SET \n                    whatsapp_link = ?, \n                    phone_number = ?, \n                    commission_value = ?,\n                    app_version = ?\n                WHERE id = 1\n            `\n            : `\n                INSERT INTO settings (whatsapp_link, phone_number, commission_value , app_version)\n                VALUES (?, ?, ? , ?)\n            `;\n\n        const values = exists\n            ? [whatsappLink, phoneNumber, commissionValue , appVersion]\n            : [whatsappLink, phoneNumber, commissionValue , appVersion];\n\n        // Execute the settings query\n        db.query(sql, values, (err, result) => {\n            if (err) {\n                console.error('Error saving settings:', err);\n                return res.status(500).json({ error: 'Failed to save settings.' });\n            }\n\n            // Update the default value of `limitPlaces` in the `users` table\n            const updateLimitPostsSql = `\n                ALTER TABLE users \n                MODIFY COLUMN limitPosts INT DEFAULT ?\n            `;\n            db.query(updateLimitPostsSql, [limitPosts], (err, result) => {\n                if (err) {\n                    console.error('Error updating limitPlaces default value:', err);\n                    return res.status(500).json({ error: err });\n                }\n\n                res.status(200).json({ message: 'Settings and limitPlaces default value updated successfully.', result });\n            });\n        });\n    });\n});\n\n\napp.post('/admin/update-password', (req, res) => {\n    const { oldPassword, newPassword, token } = req.body;\n\n    // Check if the old password is correct\n    const checkSql = 'SELECT password FROM admins WHERE token = ?';\n    db.query(checkSql, [token], (err, results) => {\n        if (err) {\n            console.error('Error fetching admin:', err);\n            return res.status(500).json({ error: 'Failed to fetch admin.' });\n        }\n\n        if (results.length === 0) {\n            return res.status(404).json({ error: 'Admin not found.' });\n        }\n\n        const storedOldPassword = results[0].password;\n\n        // Compare the old password\n        if (oldPassword !== storedOldPassword) {\n            return res.status(400).json({ error: 'Old password is incorrect.' });\n        }\n\n        // Update the password in the database\n        const updateSql = 'UPDATE admins SET password = ? WHERE token = ?';\n        db.query(updateSql, [newPassword, token], (err, result) => {\n            if (err) {\n                console.error('Error updating password:', err);\n                return res.status(500).json({ error: 'Failed to update password.' });\n            }\n\n            res.status(200).json({ message: 'Password updated successfully.' });\n        });\n    });\n});\n\n\n// Route to get settings\napp.get('/get-settings', (req, res) => {\n    // Query to fetch settings\n    const settingsQuery = `\n        SELECT \n            whatsapp_link, \n            phone_number, \n            commission_value ,\n            app_version\n        FROM settings\n    `;\n\n    // Query to fetch the default value of `limitPlaces` from the `users` table\n    const defaultLimitQuery = `\n        SELECT COLUMN_DEFAULT\n        FROM information_schema.COLUMNS\n        WHERE TABLE_NAME = 'users' AND COLUMN_NAME = 'limitPosts'\n    `;\n\n    // Execute both queries\n    db.query(settingsQuery, (err, settingsResults) => {\n        if (err) {\n            console.error('Error fetching settings:', err);\n            return res.status(500).json({ error: 'Failed to fetch settings.' });\n        }\n\n        db.query(defaultLimitQuery, (err, defaultLimitResults) => {\n            if (err) {\n                console.error('Error fetching default limitPlaces:', err);\n                return res.status(500).json({ error: 'Failed to fetch default limitPlaces.' });\n            }\n\n            if (settingsResults.length > 0 && defaultLimitResults.length > 0) {\n                const settings = settingsResults[0];\n                const defaultLimitPlaces = defaultLimitResults[0].COLUMN_DEFAULT;\n\n                // Add the defaultLimitPlaces to the response\n                res.status(200).json({\n                    ...settings,\n                    defaultLimitPlaces,\n                });\n            } else {\n                res.status(404).json({ error: 'No settings or default limit found.' });\n            }\n        });\n    });\n});\n\n\n// Route to get settings\napp.get('/get-settings-admin', (req, res) => {\n    // Query to fetch settings\n    const settingsQuery = `\n        SELECT \n            whatsapp_link, \n            phone_number, \n            commission_value ,\n            app_version\n        FROM settings\n    `;\n\n    // Query to fetch the default value of `limitPlaces` from the `users` table\n    const defaultLimitQuery = `\n        SELECT COLUMN_DEFAULT\n        FROM information_schema.COLUMNS\n        WHERE TABLE_NAME = 'users' AND COLUMN_NAME = 'limitPosts'\n    `;\n\n    // Execute both queries\n    db.query(settingsQuery, (err, settingsResults) => {\n        if (err) {\n            console.error('Error fetching settings:', err);\n            return res.status(500).json({ error: 'Failed to fetch settings.' });\n        }\n\n        db.query(defaultLimitQuery, (err, defaultLimitResults) => {\n            if (err) {\n                console.error('Error fetching default limitPlaces:', err);\n                return res.status(500).json({ error: 'Failed to fetch default limitPlaces.' });\n            }\n\n            if (settingsResults.length > 0 && defaultLimitResults.length > 0) {\n                const settings = settingsResults[0];\n                const defaultLimitPlaces = defaultLimitResults[0].COLUMN_DEFAULT;\n\n                // Add the defaultLimitPlaces to the response\n                res.status(200).json({\n                    ...settings,\n                    defaultLimitPlaces,\n                });\n            } else {\n                res.status(404).json({ error: 'No settings or default limit found.' });\n            }\n        });\n    });\n});\n\n\n\n\n\n\napp.post('/api/services', upload.single('icon'), (req, res) => {\n  const file = req.file;\n\n  if (!file) {\n    return res.status(400).json({ error: 'No icon uploaded' });\n  }\n\n  const { title, description, required_list, is_car_service , LinkWts , phone} = req.body;\n\n  // Paths for temp and final destination\n  const tempFilePath = path.join(__dirname, 'uploads', 'temp', file.filename);\n  const iconsFilePath = path.join(__dirname, 'uploads', 'icons', file.filename);\n\n  // Move the uploaded icon to the icons directory\n  fs.rename(tempFilePath, iconsFilePath, (err) => {\n    if (err) {\n      console.error('Error moving file to icons directory:', err);\n      return res.status(500).json({ error: 'Could not move file' });\n    }\n\n    const filePath = `${file.filename}`; // Store just the filename in the database\n\n    // Prepare query to insert the service data into the database\n    const query = `\n      INSERT INTO services (title, description, icon, required_list, is_car_service , wtsLink , phone)\n      VALUES (?, ?, ?, ?, ? ,? , ?)\n    `;\n\n    // Format required_list as a JSON string\n    const formattedRequiredList = required_list ? JSON.stringify(required_list) : '[]';\n\n    db.query(\n      query,\n      [title, description, filePath, formattedRequiredList, is_car_service , LinkWts , phone],\n      (err, result) => {\n        if (err) {\n          console.error('Error inserting service data into database:', err);\n          return res.status(500).json({ error: 'Database error' });\n        }\n\n        // Respond with success and the inserted service data\n        res.json({\n          service: {\n            title,\n            description,\n            icon: filePath,\n            required_list: JSON.parse(formattedRequiredList),\n            is_car_service: is_car_service === 'true',\n          },\n        });\n      }\n    );\n  });\n});\n\n\napp.put('/api/services/:id', upload.single('icon'), (req, res) => {\n  const file = req.file;\n  const serviceId = req.params.id; // Get the service ID from the route params\n  const { title, description, required_list, is_car_service, LinkWts, phone } = req.body;\n\n  // Paths for temp and final destination (if icon is provided)\n  let iconsFilePath;\n  if (file) {\n    const tempFilePath = path.join(__dirname, 'uploads', 'temp', file.filename);\n    iconsFilePath = path.join(__dirname, 'uploads', 'icons', file.filename);\n\n    // Move the uploaded icon to the icons directory\n    fs.rename(tempFilePath, iconsFilePath, (err) => {\n      if (err) {\n        console.error('Error moving file to icons directory:', err);\n        return res.status(500).json({ error: 'Could not move file' });\n      }\n    });\n  }\n\n  // Format required_list as a JSON string\n  const formattedRequiredList = required_list ? JSON.stringify(required_list) : '[]';\n\n  // Prepare query to update the service data in the database\n  let query = `\n    UPDATE services \n    SET title = ?, description = ?, required_list = ?, is_car_service = ?, wtsLink = ?, phone = ?\n  `;\n  const values = [title, description, formattedRequiredList, is_car_service, LinkWts, phone];\n\n  // If an icon is uploaded, include it in the update\n  if (file) {\n    query += `, icon = ?`;\n    values.push(file.filename); // Store just the filename\n  }\n\n  query += ` WHERE service_id = ?`; // Update only the service with the given ID\n  values.push(serviceId);\n\n  db.query(query, values, (err, result) => {\n    if (err) {\n      console.error('Error updating service data:', err);\n      return res.status(500).json({ error: err });\n    }\n\n    if (result.affectedRows === 0) {\n      return res.status(404).json({ error: 'Service not found' });\n    }\n\n    // Respond with success and the updated service data\n    res.json({\n      service: {\n        id: serviceId,\n        title,\n        description,\n        icon: file ? file.filename : undefined, // Only include icon if updated\n        required_list: JSON.parse(formattedRequiredList),\n        is_car_service: is_car_service === 'true',\n        LinkWts,\n        phone,\n      },\n    });\n  });\n});\n\n\n\napp.get('/places/buyOrRent/count', (req, res) => {\n    const query = `\n        SELECT \n            SUM(CASE WHEN buy_or_rent = 'للبيع' THEN 1 ELSE 0 END) AS forSaleCount,\n            SUM(CASE WHEN buy_or_rent = 'للإيجار' THEN 1 ELSE 0 END) AS forRentCount,\n            SUM(CASE WHEN buy_or_rent = 'الحجز' THEN 1 ELSE 0 END) AS reservationCount\n        FROM places;\n    `;\n\n    db.query(query, (error, results) => {\n        if (error) {\n            return res.status(500).json({ error: 'Database error', details: error });\n        }\n        // Respond with the counts\n        res.json({\n            للبيع: results[0].forSaleCount || 0,\n            للإيجار: results[0].forRentCount || 0,\n            الحجز: results[0].reservationCount  || 0\n        });\n    });\n});\n\napp.get('/places/visits', (req, res) => {\n    const query = `\n        SELECT \n            DATE(date) AS visitDate, \n            COUNT(*) AS placeCount\n        FROM places\n        GROUP BY visitDate\n        ORDER BY visitDate;\n    `;\n\n    db.query(query, (error, results) => {\n        if (error) {\n            return res.status(500).json({ error: 'Database error', details: error });\n        }\n\n        // Format the results into the format expected by the front end\n        const labels = results.map(row => row.visitDate);\n        const series = [{\n            name: 'اعلانات',  // Ads in Arabic\n            type: 'line',\n            fill: 'solid',\n            data: results.map(row => row.placeCount),\n        }];\n\n        // Respond with formatted data\n        res.json({ labels, series });\n    });\n});\n// Route to delete a service\napp.delete('/api/services/:id', (req, res) => {\n  const { id } = req.params;\n\n  // First, find the service to get the icon file name\n  const findServiceQuery = 'SELECT icon FROM services WHERE service_id = ?';\n  db.query(findServiceQuery, [id], (err, result) => {\n    if (err || result.length === 0) {\n      console.error('Error finding service:', err);\n      return res.status(500).json({ error: 'Service not found' });\n    }\n\n    const iconFileName = result[0].icon;\n    const iconFilePath = path.join(__dirname, 'uploads', 'icons', iconFileName);\n\n    // Delete the icon file from the server\n    fs.unlink(iconFilePath, (err) => {\n      if (err) {\n        console.error('Error deleting icon file:', err);\n      }\n      \n      // Proceed to delete the service from the database\n      const deleteQuery = 'DELETE FROM services WHERE service_id = ?';\n      db.query(deleteQuery, [id], (err, result) => {\n        if (err) {\n          console.error('Error deleting service from database:', err);\n          return res.status(500).json({ error: 'Could not delete service' });\n        }\n\n        res.json({ message: 'Service deleted successfully' });\n      });\n    });\n  });\n});\n\n\n\n\n\n\napp.get('/api/services', (req, res) => {\n  const query = 'SELECT * FROM services ORDER BY created_at DESC';\n  \n  db.query(query, (err, results) => {\n    if (err) {\n      console.error('Error fetching services:', err);\n      return res.status(500).json({ error: 'Database error' });\n    }\n    \n    res.json({ services: results });\n  });\n});\n\n\napp.get('/api/getOnce/services/:id', (req, res) => {\n  const serviceId = req.params.id;\n\n  // Query to get the service\n  const query = 'SELECT * FROM services WHERE service_id = ?';\n  db.query(query, [serviceId], (error, results) => {\n    if (error) {\n      return res.status(500).json({ error: 'Database query failed' });\n    }\n\n    if (results.length === 0) {\n      return res.status(404).json({ error: 'Service not found' });\n    }\n\n    res.json(results[0]);\n  });\n});\n\n\napp.get('/privacy', (req, res) => {\n  const query = 'SELECT privacy_ar, privacy_en FROM settings LIMIT 1';\n\n  db.query(query, (error, results) => {\n    if (error) {\n      return res.status(500).json({ error: 'Failed to retrieve privacy policies' });\n    }\n    if (results.length > 0) {\n      return res.json({\n        privacy_ar: results[0].privacy_ar,\n        privacy_en: results[0].privacy_en\n      });\n    }\n    res.status(404).json({ message: 'No privacy policies found' });\n  });\n});\n\n// Route to get terms and conditions (terms_ar and terms_en)\napp.get('/terms', (req, res) => {\n  const query = 'SELECT terms_ar, terms_en FROM settings LIMIT 1';\n\n  db.query(query, (error, results) => {\n    if (error) {\n      return res.status(500).json({ error: 'Failed to retrieve terms and conditions' });\n    }\n    if (results.length > 0) {\n      return res.json({\n        terms_ar: results[0].terms_ar,\n        terms_en: results[0].terms_en\n      });\n    }\n    res.status(404).json({ message: 'No terms and conditions found' });\n  });\n});\n\napp.get('/services/car', (req, res) => {\n  // Query to get services where `is_car_service` is 1\n  const query = 'SELECT * FROM services WHERE is_car_service = 1';\n\n  db.query(query, (error, results) => {\n    if (error) {\n      return res.status(500).json({ error: 'Database query failed' });\n    }\n\n    if (results.length === 0) {\n      return res.status(404).json({ error: 'خدمة السيارات غير متوفرة بعد' });\n    }\n    res.json(results);\n  });\n});\n\napp.post('/api/report', async (req, res) => {\n    const { crimeType, victimNumber, description, placeId , reportType } = req.body;\n\n    // Validate the incoming data\n    if (!crimeType || !victimNumber || !placeId) {\n        return res.status(400).json({ error: 'Required fields are missing' });\n    }\n\n    const reportDate = new Date();  // Save the current date and time as the report date\n    const status = 'قيد الانتظار';  // Default status in Arabic (Pending)\n\n    try {\n        const query = `INSERT INTO reports (placeId, victimNumber, reportDate, description, crimeType, status , reportType) \n                       VALUES (?, ?, ?, ?, ?, ? , ?)`;\n\n        // Assuming `db` is your database connection (MySQL in this case)\n        db.query(query, [placeId, victimNumber, reportDate, description, crimeType, status , reportType], (err, result) => {\n            if (err) {\n                console.error('Database error:', err);\n                return res.status(500).json({ error: 'Database error', details: err.message });\n            }\n\n            // Return success response with the inserted report ID\n            res.status(201).json({ message: 'Report created successfully', reportId: result.insertId });\n        });\n    } catch (err) {\n        console.error('Error processing request:', err);\n        res.status(500).json({ error: 'Server error', details: err.message });\n    }\n});\n\n// API to Get All Reports\napp.get('/api/reports', (req, res) => {\n  const query = `\n    SELECT \n      r.reportId,\n      r.reporterName,\n      r.description\t,\n      r.crimeType,\n      r.reportType,\n      r.victimNumber,\n      r.reportDate,\n      r.status,\n      r.placeId,\n      CASE\n        WHEN r.reportType = 'comment' THEN rev.comment\n        ELSE NULL\n      END AS comment\n    FROM reports r\n    LEFT JOIN reviews rev ON r.placeId = rev.id AND r.reportType = 'comment'\n  `;\n\n  db.query(query, (err, results) => {\n    if (err) {\n      console.error('Error fetching reports:', err);\n      return res.status(500).json({ error: 'Failed to fetch reports' });\n    }\n\n    // Format the results\n    const formattedResults = results.map(report => ({\n      ...report,\n      comment: report.reportType === 'comment' ? report.comment : null\n    }));\n\n    res.json(formattedResults);\n  });\n});\n\n\napp.put('/reports/:reportId/status', (req, res) => {\n  const { reportId } = req.params;\n  const { status } = req.body;\n\n  if (!status) {\n    return res.status(400).json({ error: 'Status is required' });\n  }\n\n  const query = 'UPDATE reports SET status = ? WHERE reportId = ?';\n  db.query(query, [status, reportId], (err, results) => {\n    if (err) {\n      console.error('Error updating report status:', err);\n      return res.status(500).json({ error: 'Failed to update report status' });\n    }\n\n    if (results.affectedRows === 0) {\n      return res.status(404).json({ error: 'Report not found' });\n    }\n\n    res.json({ message: 'Report status updated successfully' });\n  });\n});\n\n\napp.put('/users/action/:userId/block', (req, res) => {\n  const { userId } = req.params;\n  const { reportId } = req.body; // Add reportId to the request body\n\n  // Block the user\n  const blockQuery = 'UPDATE users SET blocked = 1 WHERE id = ?';\n  db.query(blockQuery, [userId], (err, results) => {\n    if (err) {\n      console.error('Error blocking user:', err);\n      return res.status(500).json({ error: 'Failed to block user' });\n    }\n\n    if (results.affectedRows === 0) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    // Update the report's actionFinished field\n    const updateReportQuery = 'UPDATE reports SET actionFinished = 1 WHERE reportId = ?';\n    db.query(updateReportQuery, [reportId], (err, results) => {\n      if (err) {\n        console.error('Error updating report:', err);\n        return res.status(500).json({ error: 'Failed to update report' });\n      }\n\n      res.json({ message: 'User blocked and report updated successfully' });\n    });\n  });\n});\n\n\napp.put('/places/:placeId/stop', (req, res) => {\n  const { placeId } = req.params;\n  const { reportId } = req.body; // Add reportId to the request body\n\n  // Stop the place\n  const stopQuery = 'UPDATE places SET approved = 0 WHERE id = ?';\n  db.query(stopQuery, [placeId], (err, results) => {\n    if (err) {\n      console.error('Error stopping place:', err);\n      return res.status(500).json({ error: 'Failed to stop place' });\n    }\n\n    if (results.affectedRows === 0) {\n      return res.status(404).json({ error: 'Place not found' });\n    }\n\n    // Update the report's actionFinished field\n    const updateReportQuery = 'UPDATE reports SET actionFinished = 1 WHERE reportId = ?';\n    db.query(updateReportQuery, [reportId], (err, results) => {\n      if (err) {\n        console.error('Error updating report:', err);\n        return res.status(500).json({ error: 'Failed to update report' });\n      }\n\n      res.json({ message: 'Place stopped and report updated successfully' });\n    });\n  });\n});\n\n\n\napp.delete('/comments/:reviewId', (req, res) => {\n  const { reviewId } = req.params;\n  const { reportId } = req.body; // Add reportId to the request body\n\n  // Delete the review\n  const deleteQuery = 'DELETE FROM reviews WHERE id = ?';\n  db.query(deleteQuery, [reviewId], (err, results) => {\n    if (err) {\n      console.error('Error deleting review:', err);\n      return res.status(500).json({ error: err });\n    }\n\n    if (results.affectedRows === 0) {\n      return res.status(404).json({ error: 'Review not found' });\n    }\n\n    // Delete the report\n    const deleteReportQuery = 'DELETE FROM reports WHERE id = ?'; // Corrected query\n    db.query(deleteReportQuery, [reportId], (err, results) => {\n      if (err) {\n        console.error('Error deleting report:', err);\n        return res.status(500).json({ error: 'Failed to delete report' });\n      }\n\n      if (results.affectedRows === 0) {\n        return res.status(404).json({ error: 'Report not found' });\n      }\n\n      res.json({ message: 'Review and report deleted successfully' });\n    });\n  });\n});\n\n\n// reviews \n\napp.get('/reviews/:place_id', (req, res) => {\n    const { place_id } = req.params;\n    const page = parseInt(req.query.page) || 1;\n    const pageSize = 10;\n    const offset = (page - 1) * pageSize;\n\n    const query = `\n        SELECT r.id, u.name, u.id AS user_id, u.picture_url AS avatar, u.image_name, r.rating, r.comment, r.created_at\n        FROM reviews r\n        JOIN users u ON r.user_id = u.id\n        WHERE r.place_id = ?\n        ORDER BY r.created_at DESC;\n\n    `;\n    const summaryQuery = `\n        SELECT COUNT(*) AS total_reviews, AVG(rating) AS average_rating\n        FROM reviews\n        WHERE place_id = ?;\n    `;\n    const ratingBreakdownQuery = `\n        SELECT rating, COUNT(*) AS count\n        FROM reviews\n        WHERE place_id = ?\n        GROUP BY rating\n        ORDER BY rating DESC;\n    `;\n\n    // Get reviews\n    db.query(query, [place_id, pageSize, offset], (err, results) => {\n        if (err) {\n            console.error(\"Error fetching reviews:\", err);\n            return res.status(500).send(err);\n        }\n\n        // Get summary (total reviews and average rating)\n        db.query(summaryQuery, [place_id], (summaryErr, summaryResults) => {\n            if (summaryErr) {\n                console.error(\"Error fetching summary:\", summaryErr);\n                return res.status(500).send(summaryErr);\n            }\n\n            // Get rating breakdown\n            db.query(ratingBreakdownQuery, [place_id], (ratingErr, ratingResults) => {\n                if (ratingErr) {\n                    console.error(\"Error fetching rating breakdown:\", ratingErr);\n                    return res.status(500).send(ratingErr);\n                }\n\n                const ratingBreakdown = [5, 4, 3, 2, 1].map((rating) => {\n                    const ratingData = ratingResults.find(r => r.rating === rating);\n                    return ratingData ? ratingData.count : 0;\n                });\n\n                const averageRating = summaryResults[0]?.average_rating || 0; // Fallback to 0 if null\n                const totalReviews = summaryResults[0]?.total_reviews || 0; // Fallback to 0 if null\n\n                const mainReviewData = {\n                    reviews: results,\n                    total_reviews: totalReviews,\n                    average_rating: averageRating.toFixed(1),\n                    rating_breakdown: ratingBreakdown\n                };\n\n                res.json(mainReviewData);\n            });\n        });\n    });\n});\n\n\n// Route to add a review\napp.post('/reviews/add', (req, res) => {\n  const { place_id, user_id, comment, rating } = req.body;\n\n  // Validate input fields\n  if (!place_id || !user_id || !comment || !rating) {\n    return res.status(400).json({ error: 'All fields are required' });\n  }\n\n  // SQL query to insert review into the `reviews` table\n  const insertQuery = 'INSERT INTO reviews (place_id, user_id, comment, rating) VALUES (?, ?, ?, ?)';\n  db.query(insertQuery, [place_id, user_id, comment, rating], (err, result) => {\n    if (err) {\n      console.error('Error inserting review:', err);\n      return res.status(500).json({ error: 'Error adding review' });\n    }\n\n    const reviewId = result.insertId;\n\n    // SQL query to fetch the newly added review with user details\n    const query = `\n      SELECT \n        r.id, \n        u.name, \n        u.picture_url AS avatar, \n        u.image_name, \n        r.rating, \n        r.comment, \n        r.created_at \n      FROM reviews r \n      JOIN users u ON r.user_id = u.id \n      WHERE r.id = ?;`;\n    db.query(query, [reviewId], (err, rows) => {\n      if (err) {\n        console.error('Error fetching review:', err);\n        return res.status(500).json({ error: 'Error retrieving the added review' });\n      }\n      if (rows.length === 0) {\n        return res.status(404).json({ error: 'Review not found' });\n      }\n\n      // Fetch the ownerId of the place from the places table\n      const fetchOwnerQuery = 'SELECT owner_id FROM places WHERE id = ?';\n      db.query(fetchOwnerQuery, [place_id], (fetchErr, ownerRows) => {\n        if (fetchErr) {\n          console.error('Error fetching place owner:', fetchErr);\n          return res.status(500).json({ error: 'Error retrieving place owner' });\n        }\n        if (ownerRows.length === 0) {\n          return res.status(404).json({ error: 'Place not found' });\n        }\n\n        const ownerId = ownerRows[0].ownerId;\n\n        // Prepare notification data\n        const notificationData = {\n          title: `تعليق جديد على منشور رقم ${place_id}`,\n          message: comment,\n          redirectId: place_id, // This could be a post ID or user ID depending on redirectType\n          redirectType: \"post\", // Could be 'post', 'user', or any other type you define\n          userId: ownerId, // The ID of the user who will receive the notification (owner of the place)\n          fromId: user_id // The ID of the user who sent the notification\n        };\n\n        // Send notification\n        sendNotification(notificationData, (notificationErr, notificationResult) => {\n          if (notificationErr) {\n            console.error(\"Error sending notification:\", notificationErr.message);\n          }\n\n          // Return the newly added review with additional data\n          res.status(200).json({\n            message: 'Review added successfully',\n            review: rows[0], // The first (and only) row will contain the new review\n          });\n        });\n        \n        \n      });\n    });\n  });\n});\n\napp.post('/follow/user', async (req, res) => {\n    const { followerId, followeeId, isFollowing } = req.body;\n\n    if (!followerId || !followeeId) {\n        return res.status(400).json({ message: 'Both followerId and followeeId are required' });\n    }\n\n    try {\n        if (isFollowing) {\n            // Follow logic\n            const followQuery = `\n                INSERT INTO followers (follower_id, followee_id)\n                VALUES (?, ?)\n                ON DUPLICATE KEY UPDATE created_at = CURRENT_TIMESTAMP`;\n            \n            await new Promise((resolve, reject) => {\n                db.query(followQuery, [followerId, followeeId], (err, result) => {\n                    if (err) return reject(err);\n                    resolve(result);\n                });\n            });\n\n            // Get user details for notification\n            const [follower] = await new Promise((resolve, reject) => {\n                db.query('SELECT name FROM users WHERE id = ?', [followerId], (err, results) => {\n                    if (err) return reject(err);\n                    resolve(results);\n                });\n            });\n\n            // Get followee's notification token\n            const [followee] = await new Promise((resolve, reject) => {\n                db.query('SELECT notificationToken FROM users WHERE id = ?', [followeeId], (err, results) => {\n                    if (err) return reject(err);\n                    resolve(results);\n                });\n            });\n\n            // Create notification message\n            const notificationMessage = `لديك متابع جديد: ${follower.name}`;\n\n            // Insert notification\n            const notificationQuery = `\n                INSERT INTO notifications \n                    (title, message, user_id, from_id, profileId)\n                VALUES (?, ?, ?, ?, ?)`;\n            \n            await new Promise((resolve, reject) => {\n                db.query(notificationQuery, [\n                    'متابعة جديدة',\n                    notificationMessage,\n                    followeeId,   // user_id (receiver)\n                    followerId,   // from_id (sender)\n                    followerId    // profile_id (follower's profile)\n                ], (err, result) => {\n                    if (err) return reject(err);\n                    resolve(result);\n                });\n            });\n\n            // Send push notification\n            if (followee.notificationToken) {\n                const messages = [{\n                    to: followee.notificationToken,\n                    sound: 'default',\n                    title: 'متابعة جديدة',\n                    body: notificationMessage,\n                    data: { profileId: followerId }\n                }];\n\n                await expo.sendPushNotificationsAsync(messages);\n            }\n\n            return res.status(200).json({ \n                message: 'تم المتابعة بنجاح', \n                isFollowing: true \n            });\n\n        } else {\n            // Unfollow logic\n            const unfollowQuery = `\n                DELETE FROM followers\n                WHERE follower_id = ? AND followee_id = ?`;\n            \n            await new Promise((resolve, reject) => {\n                db.query(unfollowQuery, [followerId, followeeId], (err, result) => {\n                    if (err) return reject(err);\n                    resolve(result);\n                });\n            });\n\n            return res.status(200).json({ \n                message: 'تم إلغاء المتابعة بنجاح', \n                isFollowing: false \n            });\n        }\n    } catch (error) {\n        console.error('Error:', error);\n        res.status(500).json({ \n            message: 'حدث خطأ في الخادم',\n            error: error.message \n        });\n    }\n});\n\n\n// Route to get user profile data\napp.get('/user/:userId', (req, res) => {\n  const userId = req.params.userId;\n  const myId = req.headers.authorization?.split(' ')[1]; // Extract user ID from Authorization header\n\n  if (!myId) {\n    return res.status(401).json({ error: 'Unauthorized access' });\n  }\n\n  // Query to fetch user profile details\n  const userProfileQuery = `\n    SELECT \n      u.id,\n      u.name,\n      u.picture_url,\n      u.image_name,\n      u.trustable,\n      u.description,\n      (SELECT COUNT(*) FROM followers WHERE followee_id = u.id) AS followersCount,\n      (SELECT COUNT(*) FROM followers WHERE follower_id = u.id) AS followingCount,\n      EXISTS (\n        SELECT 1 FROM followers WHERE follower_id = ? AND followee_id = u.id\n      ) AS isFollowing\n    FROM users u\n    WHERE u.id = ?;\n  `;\n\n  // Query to fetch user posts\nconst userPostsQuery = `\n    SELECT id, title, photos, sponsored, address, price, buy_or_rent, folderName\n    FROM places \n    WHERE owner_id = ? \n    AND approved = 1 \n    AND active = 1;\n`;\n\n  // Execute both queries\n  db.query(userProfileQuery, [myId, userId], (err, userResults) => {\n    if (err) {\n      console.error('Error fetching user profile:', err);\n      return res.status(500).json({ error: err });\n    }\n\n    if (userResults.length === 0) {\n      return res.status(404).json({ error: 'User not found', userid: userId });\n    }\n\n    const userProfile = userResults[0];\n\n    db.query(userPostsQuery, [userId], (err, postResults) => {\n      if (err) {\n        console.error('Error fetching user posts:', err);\n        return res.status(500).json({ error: 'Internal server error' });\n      }\n\n      res.json({\n        id: userProfile.id,\n        name: userProfile.name,\n        image_name: userProfile.image_name,\n        picture_url: userProfile.picture_url,\n        trustable: userProfile.trustable,\n        avatar: userProfile.avatar,\n        description: userProfile.description,\n        followersCount: userProfile.followersCount,\n        followingCount: userProfile.followingCount,\n        isFollowing: !!userProfile.isFollowing,\n        places: postResults // Return all places in a single array\n      });\n    });\n  });\n});\n\napp.post('/requests', async (req, res) => {\n  try {\n    const {\n      requestType,\n      propertyType,\n      city,\n      district,\n      details,\n      budget,\n      paymentMethod,\n      area,\n      name,\n      phone,\n      userType\n    } = req.body;\n\n    // Validate required fields\n    if (!requestType || !propertyType || !city || !name || !phone) {\n      return res.status(400).json({\n        success: false,\n        message: 'Missing required fields'\n      });\n    }\n\n    // Combine city and district into a single string for the city column\n    const combinedCity = district ? `${city}, ${district}` : city;\n\n    // Insert into database using your preferred MySQL approach\n    const query = `\n      INSERT INTO property_requests \n      (request_type, property_type, city, details, \n       budget_min, budget_max, payment_method, \n       area_min, area_max, name, phone, user_type)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `;\n\n    const values = [\n      requestType,\n      propertyType,\n      combinedCity, // Now contains both city and district\n      details || null,\n      budget?.min || null,\n      budget?.max || null,\n      paymentMethod || null,\n      area?.min || null,\n      area?.max || null,\n      name,\n      phone,\n      userType || 'buyer'\n    ];\n\n    // Using your preferred MySQL query method\n    db.query(query, values, (error, results) => {\n      if (error) {\n        console.error('Database error:', error);\n        return res.status(500).json(error);\n      }\n      \n      res.json({\n        success: true,\n        message: 'Request submitted successfully',\n        requestId: results.insertId\n      });\n    });\n\n  } catch (error) {\n    console.error('Error submitting request:', error);\n    res.status(500).json(error);\n  }\n});\n\n\napp.post('/user/interests', async (req, res) => {\n  try {\n    const { userId, interests, city, district } = req.body;\n\n    // Validate required fields\n    if (!userId || !interests || !Array.isArray(interests) || interests.length === 0) {\n      return res.status(400).json({\n        success: false,\n        message: 'User identifier and interests are required'\n      });\n    }\n\n    // Combine city and district into a single string\n    const location = district ? `${city},${district}` : city;\n\n    // Delete existing interests for this user\n    const deleteQuery = 'DELETE FROM user_interests WHERE user_id = ?';\n    \n    db.query(deleteQuery, [userId], (error) => {\n      if (error) {\n        console.error('Database error:', error);\n        return res.status(500).json({ success: false, error });\n      }\n\n      // If no interests to insert, just return success\n      if (interests.length === 0) {\n        return res.json({ \n          success: true, \n          message: 'Interests cleared successfully',\n          interestsCount: 0\n        });\n      }\n\n      // Create placeholders for multiple rows\n      const placeholders = interests.map(() => '(?, ?, ?)').join(', ');\n      \n      // Flatten the values array\n      const flattenedValues = [];\n      interests.forEach(interest => {\n        flattenedValues.push(userId, interest, location);\n      });\n\n      // Insert new interests\n      const insertQuery = `INSERT INTO user_interests (user_id, interest, city) VALUES ${placeholders}`;\n      \n      db.query(insertQuery, flattenedValues, (error, results) => {\n        if (error) {\n          console.error('Database error:', error);\n          return res.status(500).json({ success: false, error });\n        }\n\n        res.json({ \n          success: true, \n          message: 'Interests and location saved successfully',\n          interestsCount: results.affectedRows\n        });\n      });\n    });\n  } catch (error) {\n    console.error('Error saving interests:', error);\n    res.status(500).json({ success: false, message: 'Internal server error' });\n  }\n});\n\n\n\n// API endpoint to get requests matching user interests and location\napp.post('/user/matching-requests', async (req, res) => {\n  try {\n    const { userId } = req.body;\n    \n    if (!userId) {\n      return res.status(400).json({ \n        success: false, \n        message: 'User ID is required' \n      });\n    }\n    \n    // First get user interests and location\n    const getUserInterestsQuery = `\n      SELECT interest, city, district \n      FROM user_interests \n      WHERE user_id = ?\n    `;\n    \n    db.query(getUserInterestsQuery, [userId], (error, userInterests) => {\n      if (error) {\n        console.error('Database error:', error);\n        return res.status(500).json({ success: false, message: 'Database error' });\n      }\n      \n      if (userInterests.length === 0) {\n        return res.json({ \n          success: true, \n          message: 'No interests found for user',\n          requests: [] \n        });\n      }\n      \n      // Extract user's interests and location\n      const interests = [...new Set(userInterests.map(item => item.interest))];\n      const userCity = userInterests[0].city;\n      const userDistrict = userInterests[0].district;\n      \n      // Build query to find matching requests\n      let query = `\n        SELECT * FROM property_requests \n        WHERE property_type IN (?) \n        OR city LIKE ? \n        OR city LIKE ?\n      `;\n      \n      let queryParams = [\n        interests,\n        `%${userCity}%`,\n        `%${userDistrict}%`\n      ];\n      \n      // If user has both city and district, add more specific search\n      if (userCity && userDistrict) {\n        query += ` OR city LIKE ?`;\n        queryParams.push(`%${userCity},%${userDistrict}%`);\n      }\n      \n      query += ` ORDER BY created_at DESC LIMIT 20`;\n      \n      // Execute query to find matching requests\n      db.query(query, queryParams, (error, requests) => {\n        if (error) {\n          console.error('Database error:', error);\n          return res.status(500).json({ success: false, message: 'Database error' });\n        }\n        \n        res.json({ \n          success: true, \n          userInterests: interests,\n          userLocation: { city: userCity, district: userDistrict },\n          matchingRequests: requests\n        });\n      });\n    });\n  } catch (error) {\n    console.error('Error fetching matching requests:', error);\n    res.status(500).json({ success: false, message: 'Internal server error' });\n  }\n});\n\n\n// Start server\napp.listen(port, () => {\n  console.log(`Server started on port ${port}`);\n});\n","size_bytes":157193},"server/src/middleware/rateLimiter.js":{"content":"const rateLimit = require('express-rate-limit');\n\nconst rateLimiter = rateLimit({\n  windowMs: (process.env.RATE_LIMIT_WINDOW || 15) * 60 * 1000, // 15 minutes\n  max: process.env.RATE_LIMIT_MAX || 200, // limit each IP to 200 requests per windowMs\n  message: {\n    error: 'Too many requests from this IP, please try again later.',\n    retryAfter: Math.ceil((process.env.RATE_LIMIT_WINDOW || 15) * 60)\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nconst authRateLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // limit each IP to 5 login attempts per windowMs\n  message: {\n    error: 'Too many login attempts, please try again later.',\n    retryAfter: 900\n  },\n  skipSuccessfulRequests: true,\n});\n\nconst orderRateLimiter = rateLimit({\n  windowMs: 60 * 1000, // 1 minute\n  max: 10, // limit each IP to 10 orders per minute\n  message: {\n    error: 'Too many orders, please slow down.',\n    retryAfter: 60\n  }\n});\n\nmodule.exports = {\n  rateLimiter,\n  authRateLimiter,\n  orderRateLimiter\n};","size_bytes":1023},"frontend/src/pages/admin/DashboardPage.jsx":{"content":"import { useState, useEffect } from 'react'\nimport { useSocket } from '../../contexts/SocketContext'\nimport { ordersAPI, reportsAPI, inventoryAPI } from '../../services/api'\nimport { \n  QueueListIcon, \n  CurrencyDollarIcon, \n  ClockIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon\n} from '@heroicons/react/24/outline'\nimport { Link } from 'react-router-dom'\nimport toast from 'react-hot-toast'\n\nfunction DashboardPage() {\n  const { orders, updateOrderStatus } = useSocket()\n  const [stats, setStats] = useState({\n    totalOrders: 0,\n    pendingOrders: 0,\n    totalRevenue: 0,\n    averageOrderValue: 0\n  })\n  const [lowStockAlerts, setLowStockAlerts] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    loadDashboardData()\n  }, [])\n\n  const loadDashboardData = async () => {\n    try {\n      setLoading(true)\n      \n      // Load today's orders\n      const ordersResponse = await ordersAPI.getOrders({ \n        limit: 100,\n        branchId: 1 \n      })\n      \n      // Load today's sales report\n      const today = new Date().toISOString().split('T')[0]\n      const salesResponse = await reportsAPI.getDailySales({ \n        date: today,\n        branchId: 1 \n      })\n\n      // Load low stock alerts\n      const alertsResponse = await inventoryAPI.getAlerts()\n      \n      const ordersData = ordersResponse.data.orders\n      const salesData = salesResponse.data.summary\n      \n      setStats({\n        totalOrders: ordersData.length,\n        pendingOrders: ordersData.filter(o => ['PENDING', 'CONFIRMED', 'PREPARING'].includes(o.status)).length,\n        totalRevenue: parseFloat(salesData.total_revenue || 0),\n        averageOrderValue: parseFloat(salesData.average_order_value || 0)\n      })\n\n      if (alertsResponse.data.success) {\n        setLowStockAlerts(alertsResponse.data.alerts || [])\n      }\n      \n    } catch (error) {\n      toast.error('Failed to load dashboard data')\n      console.error('Dashboard load error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleOrderAction = async (orderId, action) => {\n    try {\n      if (action === 'confirm') {\n        await ordersAPI.confirmOrder(orderId)\n        toast.success('Order confirmed')\n      } else if (action === 'cancel') {\n        await ordersAPI.cancelOrder(orderId, 'Cancelled from dashboard')\n        toast.success('Order cancelled')\n      } else {\n        await ordersAPI.updateOrderStatus(orderId, action)\n        toast.success(`Order status updated to ${action}`)\n      }\n      \n      // Refresh data\n      loadDashboardData()\n    } catch (error) {\n      toast.error('Failed to update order')\n      console.error('Order update error:', error)\n    }\n  }\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'PENDING': return 'bg-yellow-100 text-yellow-800'\n      case 'CONFIRMED': return 'bg-blue-100 text-blue-800'\n      case 'PREPARING': return 'bg-orange-100 text-orange-800'\n      case 'READY': return 'bg-green-100 text-green-800'\n      case 'SERVED': return 'bg-purple-100 text-purple-800'\n      case 'COMPLETED': return 'bg-gray-100 text-gray-800'\n      case 'CANCELLED': return 'bg-red-100 text-red-800'\n      default: return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  const getPaymentStatusColor = (status) => {\n    switch (status) {\n      case 'PAID': return 'bg-green-100 text-green-800'\n      case 'PARTIAL': return 'bg-yellow-100 text-yellow-800'\n      case 'UNPAID': return 'bg-red-100 text-red-800'\n      default: return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"text-center\">\n          <div className=\"loading-spinner mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading dashboard...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-2xl font-bold text-gray-900\">Dashboard</h1>\n        <p className=\"text-gray-600\">Restaurant operations overview</p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <QueueListIcon className=\"h-8 w-8 text-blue-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-500\">Total Orders</p>\n                <p className=\"text-2xl font-semibold text-gray-900\">{stats.totalOrders}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <ClockIcon className=\"h-8 w-8 text-yellow-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-500\">Pending Orders</p>\n                <p className=\"text-2xl font-semibold text-gray-900\">{stats.pendingOrders}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <CurrencyDollarIcon className=\"h-8 w-8 text-green-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-500\">Today's Revenue</p>\n                <p className=\"text-2xl font-semibold text-gray-900\">{stats.totalRevenue.toFixed(2)} MAD</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <CheckCircleIcon className=\"h-8 w-8 text-purple-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-500\">Avg Order Value</p>\n                <p className=\"text-2xl font-semibold text-gray-900\">{stats.averageOrderValue.toFixed(2)} MAD</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Low Stock Alerts */}\n      {lowStockAlerts.length > 0 && (\n        <div className=\"card border-l-4 border-l-red-500 bg-red-50\">\n          <div className=\"card-body\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"flex items-center\">\n                <ExclamationTriangleIcon className=\"h-6 w-6 text-red-600 mr-3\" />\n                <div>\n                  <h3 className=\"text-lg font-semibold text-red-800\">Low Stock Alert</h3>\n                  <p className=\"text-red-700\">\n                    {lowStockAlerts.length} item(s) are running low on stock\n                  </p>\n                </div>\n              </div>\n              <Link to=\"/admin/inventory\" className=\"btn-secondary text-sm\">\n                View Inventory\n              </Link>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n              {lowStockAlerts.slice(0, 6).map((alert) => (\n                <div key={alert.id} className=\"bg-white rounded-lg p-3 border border-red-200\">\n                  <div className=\"flex justify-between items-start\">\n                    <div className=\"flex-1\">\n                      <span className=\"text-sm font-medium text-gray-900\">\n                        {alert.stock_item_name}\n                      </span>\n                      <div className=\"flex items-center gap-2 mt-1\">\n                        <span className=\"text-xs text-red-600 font-semibold\">\n                          {alert.current_stock} {alert.unit}\n                        </span>\n                        <span className=\"text-xs text-gray-500\">\n                          / Min: {alert.min_threshold} {alert.unit}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Recent Orders */}\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">Recent Orders</h2>\n            <button\n              onClick={loadDashboardData}\n              className=\"btn-outline btn-sm\"\n            >\n              Refresh\n            </button>\n          </div>\n        </div>\n        <div className=\"card-body\">\n          {orders.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <ExclamationTriangleIcon className=\"mx-auto h-12 w-12 text-gray-400\" />\n              <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No orders</h3>\n              <p className=\"mt-1 text-sm text-gray-500\">No recent orders found.</p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Order\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Table\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Customer\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Status\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Payment\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Total\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Actions\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {orders.slice(0, 10).map((order) => (\n                    <tr key={order.id}>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                        {order.order_code}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {order.table_number}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {order.customer_name || '-'}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <span className={`badge ${getStatusColor(order.status)}`}>\n                          {order.status}\n                        </span>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <span className={`badge ${getPaymentStatusColor(order.payment_status)}`}>\n                          {order.payment_status}\n                        </span>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {order.total.toFixed(2)} MAD\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2\">\n                        {order.status === 'PENDING' && (\n                          <>\n                            <button\n                              onClick={() => handleOrderAction(order.id, 'confirm')}\n                              className=\"text-green-600 hover:text-green-900\"\n                            >\n                              Confirm\n                            </button>\n                            <button\n                              onClick={() => handleOrderAction(order.id, 'cancel')}\n                              className=\"text-red-600 hover:text-red-900\"\n                            >\n                              Cancel\n                            </button>\n                          </>\n                        )}\n                        {order.status === 'CONFIRMED' && (\n                          <button\n                            onClick={() => handleOrderAction(order.id, 'PREPARING')}\n                            className=\"text-blue-600 hover:text-blue-900\"\n                          >\n                            Start Prep\n                          </button>\n                        )}\n                        {order.status === 'PREPARING' && (\n                          <button\n                            onClick={() => handleOrderAction(order.id, 'READY')}\n                            className=\"text-orange-600 hover:text-orange-900\"\n                          >\n                            Mark Ready\n                          </button>\n                        )}\n                        {order.status === 'READY' && (\n                          <button\n                            onClick={() => handleOrderAction(order.id, 'SERVED')}\n                            className=\"text-green-600 hover:text-green-900\"\n                          >\n                            Mark Served\n                          </button>\n                        )}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div className=\"card\">\n          <div className=\"card-body text-center\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Menu Management</h3>\n            <p className=\"text-sm text-gray-500 mb-4\">Manage categories, items, and modifiers</p>\n            <a href=\"/admin/menu\" className=\"btn-primary w-full\">\n              Manage Menu\n            </a>\n          </div>\n        </div>\n\n        <div className=\"card\">\n          <div className=\"card-body text-center\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Table Management</h3>\n            <p className=\"text-sm text-gray-500 mb-4\">Generate QR codes and manage tables</p>\n            <a href=\"/admin/tables\" className=\"btn-primary w-full\">\n              Manage Tables\n            </a>\n          </div>\n        </div>\n\n        <div className=\"card\">\n          <div className=\"card-body text-center\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Reports</h3>\n            <p className=\"text-sm text-gray-500 mb-4\">View sales reports and analytics</p>\n            <a href=\"/admin/reports\" className=\"btn-primary w-full\">\n              View Reports\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default DashboardPage","size_bytes":15468},"frontend/src/pages/admin/TableManagementPage.jsx":{"content":"import { useState, useEffect } from 'react'\nimport { tablesAPI } from '../../services/api'\nimport { \n  PlusIcon, \n  PencilIcon, \n  TrashIcon, \n  QrCodeIcon,\n  PrinterIcon,\n  EyeIcon,\n  LinkIcon,\n  ClipboardDocumentIcon\n} from '@heroicons/react/24/outline'\nimport TableForm from '../../components/TableForm'\nimport toast from 'react-hot-toast'\n\nfunction TableManagementPage() {\n  const [tables, setTables] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [showTableForm, setShowTableForm] = useState(false)\n  const [editingTable, setEditingTable] = useState(null)\n  const [showQRModal, setShowQRModal] = useState(false)\n  const [selectedTable, setSelectedTable] = useState(null)\n  const [qrCodeUrl, setQrCodeUrl] = useState('')\n\n  useEffect(() => {\n    loadTables()\n  }, [])\n\n  const loadTables = async () => {\n    try {\n      setLoading(true)\n      const response = await tablesAPI.getTables()\n      if (response.data.success) {\n        setTables(response.data.tables)\n      }\n    } catch (error) {\n      toast.error('Failed to load tables')\n      console.error('Tables load error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleAddTable = () => {\n    setEditingTable(null)\n    setShowTableForm(true)\n  }\n\n  const handleEditTable = (table) => {\n    setEditingTable(table)\n    setShowTableForm(true)\n  }\n\n  const handleSaveTable = async (savedTable) => {\n    // Reload all tables to get fresh data with activeOrder fields\n    await loadTables()\n    setShowTableForm(false)\n    setEditingTable(null)\n  }\n\n  const handleCancelForm = () => {\n    setShowTableForm(false)\n    setEditingTable(null)\n  }\n\n  const handleDeleteTable = async (tableId) => {\n    if (!window.confirm('Are you sure you want to delete this table? This action cannot be undone.')) {\n      return\n    }\n\n    try {\n      await tablesAPI.deleteTable(tableId)\n      setTables(prev => prev.filter(table => table.id !== tableId))\n      toast.success('Table deleted successfully')\n    } catch (error) {\n      console.error('Table deletion error:', error)\n      toast.error(error.response?.data?.error || 'Failed to delete table')\n    }\n  }\n\n  const handleShowQR = async (table) => {\n    try {\n      const response = await tablesAPI.getTableQR(table.id, 'dataurl')\n      if (response.data.success) {\n        setQrCodeUrl(response.data.qrCodeUrl)\n        setSelectedTable(table)\n        setShowQRModal(true)\n      }\n    } catch (error) {\n      console.error('QR generation error:', error)\n      toast.error('Failed to generate QR code')\n    }\n  }\n\n  const handlePrintQR = async (table) => {\n    try {\n      const response = await tablesAPI.getTableQR(table.id, 'dataurl')\n      if (response.data.success) {\n        // Open QR code in new window for printing\n        const printWindow = window.open('', '_blank')\n        printWindow.document.write(`\n          <html>\n            <head>\n              <title>Table ${table.table_number} QR Code</title>\n              <style>\n                body { \n                  font-family: Arial, sans-serif; \n                  text-align: center; \n                  padding: 20px; \n                }\n                .qr-container { \n                  margin: 20px auto; \n                  max-width: 300px; \n                }\n                .table-info { \n                  margin: 20px 0; \n                  font-size: 18px; \n                }\n                img { \n                  max-width: 100%; \n                  height: auto; \n                }\n                @media print {\n                  body { margin: 0; }\n                  .no-print { display: none; }\n                }\n              </style>\n            </head>\n            <body>\n              <div class=\"table-info\">\n                <h1>Table ${table.table_number}</h1>\n                <p>Capacity: ${table.capacity} people</p>\n                <p>Location: ${table.location || 'Main Hall'}</p>\n              </div>\n              <div class=\"qr-container\">\n                <img src=\"${response.data.qrCodeUrl}\" alt=\"Table ${table.table_number} QR Code\" />\n              </div>\n              <div class=\"no-print\">\n                <button onclick=\"window.print()\">Print QR Code</button>\n                <button onclick=\"window.close()\">Close</button>\n              </div>\n            </body>\n          </html>\n        `)\n        printWindow.document.close()\n      }\n    } catch (error) {\n      console.error('Print QR error:', error)\n      toast.error('Failed to print QR code')\n    }\n  }\n\n  const handleCopyLink = async (table) => {\n    try {\n      const tableUrl = `${window.location.origin}/menu?table=${table.table_number}&branch=${table.branch_id}`\n      await navigator.clipboard.writeText(tableUrl)\n      toast.success('Table link copied to clipboard!')\n    } catch (error) {\n      console.error('Copy link error:', error)\n      toast.error('Failed to copy link')\n    }\n  }\n\n  const getTableStatus = (table) => {\n    // Check if table has active orders\n    const hasActiveOrder = table.activeOrder !== null && table.activeOrder !== undefined\n    return hasActiveOrder ? 'busy' : 'free'\n  }\n\n  const getTableStatusColor = (status) => {\n    switch (status) {\n      case 'busy':\n        return 'bg-red-100 text-red-800 border-red-200'\n      case 'free':\n        return 'bg-green-100 text-green-800 border-green-200'\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200'\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"text-center\">\n          <div className=\"loading-spinner mb-4\"></div>\n          <p className=\"text-gray-600\">Loading tables...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold gradient-text\">Table Management</h1>\n          <p className=\"text-gray-600 mt-2\">Manage restaurant tables and QR codes</p>\n        </div>\n        <button\n          onClick={handleAddTable}\n          className=\"btn-primary relative flex items-center justify-center h-10 px-4 rounded-md\"\n        >\n          <PlusIcon className=\"h-5 w-5 mr-2\" />\n          Add Table\n        </button>\n      </div>\n\n      {/* Tables Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n        {tables.map((table) => {\n          const status = getTableStatus(table)\n          return (\n            <div key={table.id} className=\"card hover:shadow-lg transition-shadow duration-200\">\n              <div className=\"card-body\">\n                <div className=\"flex justify-between items-start mb-4\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900\">Table {table.table_number}</h3>\n                    <p className=\"text-sm text-gray-600\">Capacity: {table.capacity} people</p>\n                    {table.location && (\n                      <p className=\"text-sm text-gray-500\">{table.location}</p>\n                    )}\n                  </div>\n                  <span className={`badge ${getTableStatusColor(status)}`}>\n                    {status === 'busy' ? 'Busy' : 'Free'}\n                  </span>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <button\n                    onClick={() => handleShowQR(table)}\n                    className=\"w-full btn-outline btn-sm relative flex items-center justify-center h-10 px-4 rounded-md\"\n                  >\n                    <EyeIcon className=\"h-4 w-4 mr-2\" />\n                    View QR Code\n                  </button>\n                  \n                  <button\n                    onClick={() => handlePrintQR(table)}\n                    className=\"w-full btn-secondary btn-sm relative flex items-center justify-center h-10 px-4 rounded-md\"\n                  >\n                    <PrinterIcon className=\"h-4 w-4 mr-2\" />\n                    Print QR\n                  </button>\n                  \n                  <div className=\"flex space-x-2\">\n                    <button\n                      onClick={() => handleEditTable(table)}\n                      className=\"flex-1 btn-outline btn-sm\"\n                    >\n                      <PencilIcon className=\"h-4 w-4\" />\n                    </button>\n                    <button\n                      onClick={() => handleDeleteTable(table.id)}\n                      className=\"flex-1 btn-danger btn-sm\"\n                    >\n                      <TrashIcon className=\"h-4 w-4\" />\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )\n        })}\n      </div>\n\n      {/* Empty State */}\n      {tables.length === 0 && (\n        <div className=\"text-center py-12\">\n          <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <QrCodeIcon className=\"h-8 w-8 text-gray-400\" />\n          </div>\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No tables found</h3>\n          <p className=\"text-gray-600 mb-6\">Get started by adding your first table</p>\n          <button\n            onClick={handleAddTable}\n            className=\"btn-primary\"\n          >\n            <PlusIcon className=\"h-5 w-5 mr-2\" />\n            Add First Table\n          </button>\n        </div>\n      )}\n\n      {/* Table Form Modal */}\n      {showTableForm && (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"p-6\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h2 className=\"text-xl font-semibold text-gray-900\">\n                  {editingTable ? 'Edit Table' : 'Add New Table'}\n                </h2>\n                <button\n                  onClick={handleCancelForm}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  <span className=\"sr-only\">Close</span>\n                  <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                  </svg>\n                </button>\n              </div>\n\n              <TableForm\n                table={editingTable}\n                onSave={handleSaveTable}\n                onCancel={handleCancelForm}\n                branchId={1}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* QR Code Modal */}\n      {showQRModal && selectedTable && (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg max-w-md w-full\">\n            <div className=\"p-6\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h2 className=\"text-xl font-semibold text-gray-900\">\n                  Table {selectedTable.table_number} QR Code\n                </h2>\n                <button\n                  onClick={() => setShowQRModal(false)}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  <span className=\"sr-only\">Close</span>\n                  <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                  </svg>\n                </button>\n              </div>\n\n              <div className=\"text-center space-y-4\">\n                <div className=\"bg-white border-2 border-gray-200 rounded-xl p-6\">\n                  <img\n                    src={qrCodeUrl}\n                    alt={`Table ${selectedTable.table_number} QR Code`}\n                    className=\"mx-auto\"\n                  />\n                </div>\n                \n                <div className=\"text-sm text-gray-600\">\n                  <p>Customers can scan this QR code to view the menu</p>\n                  <p>and place orders for Table {selectedTable.table_number}</p>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex space-x-3\">\n                    <button\n                      onClick={() => handlePrintQR(selectedTable)}\n                      className=\"flex-1 btn-primary relative flex items-center justify-center h-10 px-4 rounded-md\"\n                    >\n                      <PrinterIcon className=\"h-5 w-5 mr-2\" />\n                      Print QR Code\n                    </button>\n                    <button\n                      onClick={() => handleCopyLink(selectedTable)}\n                      className=\"flex-1 btn-secondary relative flex items-center justify-center h-10 px-4 rounded-md\"\n                    >\n                      <ClipboardDocumentIcon className=\"h-5 w-5 mr-2\" />\n                      Copy Link\n                    </button>\n                  </div>\n                  <button\n                    onClick={() => setShowQRModal(false)}\n                    className=\"w-full btn-outline relative flex items-center justify-center h-10 px-4 rounded-md\"\n                  >\n                    Close\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default TableManagementPage","size_bytes":13595},"server/src/middleware/errorHandler.js":{"content":"const winston = require('winston');\n\n// Configure logger\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  defaultMeta: { service: 'posq-api' },\n  transports: [\n    new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),\n    new winston.transports.File({ filename: 'logs/combined.log' }),\n    new winston.transports.Console({\n      format: winston.format.simple()\n    })\n  ]\n});\n\nconst errorHandler = (err, req, res, next) => {\n  logger.error({\n    message: err.message,\n    stack: err.stack,\n    url: req.url,\n    method: req.method,\n    ip: req.ip,\n    userAgent: req.get('User-Agent')\n  });\n\n  // Don't leak error details in production\n  if (process.env.NODE_ENV === 'production') {\n    return res.status(500).json({\n      error: 'Internal server error',\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  res.status(err.status || 500).json({\n    error: err.message,\n    stack: err.stack,\n    timestamp: new Date().toISOString()\n  });\n};\n\nmodule.exports = { errorHandler, logger };","size_bytes":1159},"frontend/postcss.config.js":{"content":"export default {\n    plugins: {\n      tailwindcss: {},\n      autoprefixer: {},\n    },\n  }","size_bytes":89},"frontend/src/pages/admin/MenuManagementPage.jsx":{"content":"import { useState, useEffect } from 'react'\nimport { menuAPI } from '../../services/api'\nimport { PlusIcon, PencilIcon, TrashIcon } from '@heroicons/react/24/outline'\nimport MenuItemForm from '../../components/MenuItemForm'\nimport CategoryForm from '../../components/CategoryForm'\nimport toast from 'react-hot-toast'\n\nfunction MenuManagementPage() {\n  const [categories, setCategories] = useState([])\n  const [menuItems, setMenuItems] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [activeTab, setActiveTab] = useState('categories')\n  const [showItemForm, setShowItemForm] = useState(false)\n  const [showCategoryForm, setShowCategoryForm] = useState(false)\n  const [editingItem, setEditingItem] = useState(null)\n  const [editingCategory, setEditingCategory] = useState(null)\n\n  useEffect(() => {\n    loadData()\n  }, [])\n\n  const loadData = async () => {\n    try {\n      setLoading(true)\n      const [categoriesRes, itemsRes] = await Promise.all([\n        menuAPI.getCategories({ branchId: 1 }),\n        menuAPI.getMenuItems({ branchId: 1 })\n      ])\n      \n      setCategories(categoriesRes.data.categories)\n      setMenuItems(itemsRes.data.items)\n    } catch (error) {\n      toast.error('Failed to load menu data')\n      console.error('Menu load error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleAddItem = () => {\n    setEditingItem(null)\n    setShowItemForm(true)\n  }\n\n  const handleEditItem = (item) => {\n    setEditingItem(item)\n    setShowItemForm(true)\n  }\n\n  const handleSaveItem = (savedItem) => {\n    if (editingItem) {\n      // Update existing item\n      setMenuItems(prev => prev.map(item => \n        item.id === savedItem.id ? savedItem : item\n      ))\n    } else {\n      // Add new item\n      setMenuItems(prev => [savedItem, ...prev])\n    }\n    setShowItemForm(false)\n    setEditingItem(null)\n  }\n\n  const handleCancelForm = () => {\n    setShowItemForm(false)\n    setEditingItem(null)\n  }\n\n  const handleAddCategory = () => {\n    setEditingCategory(null)\n    setShowCategoryForm(true)\n  }\n\n  const handleEditCategory = (category) => {\n    setEditingCategory(category)\n    setShowCategoryForm(true)\n  }\n\n  const handleSaveCategory = (savedCategory) => {\n    if (editingCategory) {\n      // Update existing category\n      setCategories(prev => prev.map(category => \n        category.id === savedCategory.id ? savedCategory : category\n      ))\n    } else {\n      // Add new category\n      setCategories(prev => [savedCategory, ...prev])\n    }\n    setShowCategoryForm(false)\n    setEditingCategory(null)\n  }\n\n  const handleCancelCategoryForm = () => {\n    setShowCategoryForm(false)\n    setEditingCategory(null)\n  }\n\n  const handleDeleteCategory = async (categoryId) => {\n    if (!window.confirm('Are you sure you want to delete this category? This action cannot be undone.')) {\n      return\n    }\n\n    try {\n      await menuAPI.deleteCategory(categoryId)\n      setCategories(prev => prev.filter(category => category.id !== categoryId))\n      toast.success('Category deleted successfully')\n    } catch (error) {\n      console.error('Category deletion error:', error)\n      toast.error(error.response?.data?.error || 'Failed to delete category')\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"text-center\">\n          <div className=\"loading-spinner mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading menu data...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Menu Management</h1>\n          <p className=\"text-gray-600\">Manage categories, items, and modifiers</p>\n        </div>\n        <button \n          onClick={handleAddItem}\n          className=\"btn-primary\"\n        >\n          <PlusIcon className=\"h-5 w-5 mr-2\" />\n          Add Item\n        </button>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"border-b border-gray-200\">\n        <nav className=\"-mb-px flex space-x-8\">\n          <button\n            onClick={() => setActiveTab('categories')}\n            className={`py-2 px-1 border-b-2 font-medium text-sm ${\n              activeTab === 'categories'\n                ? 'border-primary-500 text-primary-600'\n                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n            }`}\n          >\n            Categories ({categories.length})\n          </button>\n          <button\n            onClick={() => setActiveTab('items')}\n            className={`py-2 px-1 border-b-2 font-medium text-sm ${\n              activeTab === 'items'\n                ? 'border-primary-500 text-primary-600'\n                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n            }`}\n          >\n            Menu Items ({menuItems.length})\n          </button>\n        </nav>\n      </div>\n\n      {/* Categories Tab */}\n      {activeTab === 'categories' && (\n        <div className=\"card\">\n          <div className=\"card-header\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">Categories</h2>\n              <button \n                onClick={handleAddCategory}\n                className=\"btn-primary btn-sm\"\n              >\n                <PlusIcon className=\"h-4 w-4 mr-1\" />\n                Add Category\n              </button>\n            </div>\n          </div>\n          <div className=\"card-body\">\n            {categories.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-gray-500\">No categories found</p>\n                <button \n                  onClick={handleAddCategory}\n                  className=\"btn-primary mt-4\"\n                >\n                  Create First Category\n                </button>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {categories.map((category) => (\n                  <div key={category.id} className=\"border border-gray-200 rounded-lg p-4\">\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <h3 className=\"font-medium text-gray-900\">{category.name}</h3>\n                        <p className=\"text-sm text-gray-500\">Position: {category.position}</p>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <button \n                          onClick={() => handleEditCategory(category)}\n                          className=\"text-blue-600 hover:text-blue-900\"\n                        >\n                          <PencilIcon className=\"h-4 w-4\" />\n                        </button>\n                        <button \n                          onClick={() => handleDeleteCategory(category.id)}\n                          className=\"text-red-600 hover:text-red-900\"\n                        >\n                          <TrashIcon className=\"h-4 w-4\" />\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Menu Items Tab */}\n      {activeTab === 'items' && (\n        <div className=\"card\">\n          <div className=\"card-header\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">Menu Items</h2>\n              <button \n                onClick={handleAddItem}\n                className=\"btn-primary btn-sm\"\n              >\n                <PlusIcon className=\"h-4 w-4 mr-1\" />\n                Add Item\n              </button>\n            </div>\n          </div>\n          <div className=\"card-body\">\n            {menuItems.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-gray-500\">No menu items found</p>\n                <button className=\"btn-primary mt-4\">Create First Item</button>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-gray-200\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Image\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Item\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Category\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Price\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Status\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Actions\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\n                    {menuItems.map((item) => (\n                      <tr key={item.id}>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <img \n                            src={item.image || 'https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=100&h=100&fit=crop'} \n                            alt={item.name}\n                            className=\"h-12 w-12 rounded-lg object-cover\"\n                            onError={(e) => {\n                              e.target.src = 'https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=100&h=100&fit=crop';\n                            }}\n                          />\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div>\n                            <div className=\"text-sm font-medium text-gray-900\">{item.name}</div>\n                            <div className=\"text-sm text-gray-500\">{item.sku}</div>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {item.category_name}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {item.price.toFixed(2)} MAD\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <span className={`badge ${item.is_available ? 'badge-success' : 'badge-danger'}`}>\n                            {item.is_available ? 'Available' : 'Unavailable'}\n                          </span>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2\">\n                          <button \n                            onClick={() => handleEditItem(item)}\n                            className=\"text-blue-600 hover:text-blue-900\"\n                          >\n                            <PencilIcon className=\"h-4 w-4\" />\n                          </button>\n                          <button className=\"text-red-600 hover:text-red-900\">\n                            <TrashIcon className=\"h-4 w-4\" />\n                          </button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Menu Item Form Modal */}\n      {showItemForm && (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"p-6\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h2 className=\"text-xl font-semibold text-gray-900\">\n                  {editingItem ? 'Edit Menu Item' : 'Add New Menu Item'}\n                </h2>\n                <button\n                  onClick={handleCancelForm}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  <span className=\"sr-only\">Close</span>\n                  <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                  </svg>\n                </button>\n              </div>\n\n              <MenuItemForm\n                item={editingItem}\n                categories={categories}\n                onSave={handleSaveItem}\n                onCancel={handleCancelForm}\n                branchId={1}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Category Form Modal */}\n      {showCategoryForm && (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"p-6\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h2 className=\"text-xl font-semibold text-gray-900\">\n                  {editingCategory ? 'Edit Category' : 'Add New Category'}\n                </h2>\n                <button\n                  onClick={handleCancelCategoryForm}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  <span className=\"sr-only\">Close</span>\n                  <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                  </svg>\n                </button>\n              </div>\n\n              <CategoryForm\n                category={editingCategory}\n                onSave={handleSaveCategory}\n                onCancel={handleCancelCategoryForm}\n                branchId={1}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default MenuManagementPage","size_bytes":14790},"scripts/setup.sh":{"content":"#!/bin/bash\n\n# POSQ Restaurant POS Setup Script\n# This script sets up the development environment\n\nset -e\n\necho \"🚀 Setting up POSQ Restaurant POS...\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Function to print colored output\nprint_status() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\n# Check if Docker is installed\ncheck_docker() {\n    print_status \"Checking Docker installation...\"\n    if ! command -v docker &> /dev/null; then\n        print_error \"Docker is not installed. Please install Docker first.\"\n        exit 1\n    fi\n    \n    if ! command -v docker-compose &> /dev/null; then\n        print_error \"Docker Compose is not installed. Please install Docker Compose first.\"\n        exit 1\n    fi\n    \n    print_success \"Docker and Docker Compose are installed\"\n}\n\n# Check if Node.js is installed (for development)\ncheck_node() {\n    print_status \"Checking Node.js installation...\"\n    if ! command -v node &> /dev/null; then\n        print_warning \"Node.js is not installed. You'll need it for development.\"\n        print_warning \"Install Node.js 18+ from https://nodejs.org/\"\n    else\n        NODE_VERSION=$(node --version)\n        print_success \"Node.js $NODE_VERSION is installed\"\n    fi\n}\n\n# Create necessary directories\ncreate_directories() {\n    print_status \"Creating necessary directories...\"\n    \n    mkdir -p server/data\n    mkdir -p server/logs\n    mkdir -p server/uploads\n    mkdir -p printer-service/logs\n    mkdir -p backups\n    \n    print_success \"Directories created\"\n}\n\n# Copy environment file\nsetup_environment() {\n    print_status \"Setting up environment configuration...\"\n    \n    if [ ! -f .env ]; then\n        cp .env.example .env\n        print_success \"Environment file created from template\"\n        print_warning \"Please review and update .env file with your configuration\"\n    else\n        print_warning \"Environment file already exists, skipping...\"\n    fi\n}\n\n# Install dependencies (if Node.js is available)\ninstall_dependencies() {\n    if command -v npm &> /dev/null; then\n        print_status \"Installing dependencies...\"\n        \n        # Install root dependencies\n        npm install\n        \n        # Install server dependencies\n        cd server\n        npm install\n        cd ..\n        \n        # Install frontend dependencies\n        cd frontend\n        npm install\n        cd ..\n        \n        # Install printer service dependencies\n        cd printer-service\n        npm install\n        cd ..\n        \n        print_success \"Dependencies installed\"\n    else\n        print_warning \"npm not available, skipping dependency installation\"\n        print_warning \"Run 'npm install' in each directory after installing Node.js\"\n    fi\n}\n\n# Build Docker images\nbuild_docker() {\n    print_status \"Building Docker images...\"\n    \n    docker-compose build\n    \n    print_success \"Docker images built\"\n}\n\n# Run database migrations\nrun_migrations() {\n    print_status \"Running database migrations...\"\n    \n    # Start only the database services\n    docker-compose up -d redis\n    \n    # Wait for services to be ready\n    sleep 5\n    \n    # Run migrations\n    docker-compose run --rm api npm run migrate\n    \n    print_success \"Database migrations completed\"\n}\n\n# Seed database\nseed_database() {\n    print_status \"Seeding database with initial data...\"\n    \n    docker-compose run --rm api npm run seed\n    \n    print_success \"Database seeded with initial data\"\n}\n\n# Generate QR codes for tables\ngenerate_qr_codes() {\n    print_status \"Generating QR codes for tables...\"\n    \n    # This would typically be done by the application\n    # For now, we'll create a simple script\n    cat > scripts/generate_qr_codes.js << 'EOF'\nconst QRCode = require('qrcode');\nconst fs = require('fs');\nconst path = require('path');\n\nasync function generateQRCodes() {\n    const tables = [];\n    for (let i = 1; i <= 12; i++) {\n        const tableNumber = `T${i}`;\n        const qrUrl = `http://localhost:5173/menu?table=${tableNumber}&branch=CAS`;\n        \n        try {\n            const qrCodeDataURL = await QRCode.toDataURL(qrUrl);\n            tables.push({\n                tableNumber,\n                qrUrl,\n                qrCode: qrCodeDataURL\n            });\n        } catch (error) {\n            console.error(`Error generating QR for table ${tableNumber}:`, error);\n        }\n    }\n    \n    // Save QR codes data\n    fs.writeFileSync(\n        path.join(__dirname, '../qr-codes.json'),\n        JSON.stringify(tables, null, 2)\n    );\n    \n    console.log('QR codes generated and saved to qr-codes.json');\n}\n\ngenerateQRCodes().catch(console.error);\nEOF\n\n    if command -v node &> /dev/null; then\n        cd server && node ../scripts/generate_qr_codes.js && cd ..\n        print_success \"QR codes generated\"\n    else\n        print_warning \"Node.js not available, skipping QR code generation\"\n    fi\n}\n\n# Create startup script\ncreate_startup_script() {\n    print_status \"Creating startup script...\"\n    \n    cat > start.sh << 'EOF'\n#!/bin/bash\n\necho \"🚀 Starting POSQ Restaurant POS...\"\n\n# Start all services\ndocker-compose up --build\n\necho \"✅ POSQ is now running!\"\necho \"\"\necho \"📱 Customer PWA: http://localhost:5173\"\necho \"👨‍💼 Admin Dashboard: http://localhost:5173/admin/login\"\necho \"🔧 API Server: http://localhost:3000\"\necho \"🖨️  Printer Service: http://localhost:4000\"\necho \"\"\necho \"Demo Credentials:\"\necho \"  Admin: admin / admin123\"\necho \"  Cashier: cashier1 / cashier123 (PIN: 5678)\"\necho \"  Kitchen: kitchen1 / kitchen123 (PIN: 9999)\"\nEOF\n\n    chmod +x start.sh\n    print_success \"Startup script created (start.sh)\"\n}\n\n# Create stop script\ncreate_stop_script() {\n    print_status \"Creating stop script...\"\n    \n    cat > stop.sh << 'EOF'\n#!/bin/bash\n\necho \"🛑 Stopping POSQ Restaurant POS...\"\n\n# Stop all services\ndocker-compose down\n\necho \"✅ POSQ has been stopped\"\nEOF\n\n    chmod +x stop.sh\n    print_success \"Stop script created (stop.sh)\"\n}\n\n# Main setup function\nmain() {\n    echo \"==========================================\"\n    echo \"  POSQ Restaurant POS Setup\"\n    echo \"==========================================\"\n    echo \"\"\n    \n    check_docker\n    check_node\n    create_directories\n    setup_environment\n    install_dependencies\n    build_docker\n    run_migrations\n    seed_database\n    generate_qr_codes\n    create_startup_script\n    create_stop_script\n    \n    echo \"\"\n    echo \"==========================================\"\n    echo \"  Setup Complete! 🎉\"\n    echo \"==========================================\"\n    echo \"\"\n    echo \"Next steps:\"\n    echo \"1. Review and update .env file if needed\"\n    echo \"2. Run './start.sh' to start the application\"\n    echo \"3. Access the admin dashboard at http://localhost:5173/admin/login\"\n    echo \"4. Use demo credentials to login\"\n    echo \"\"\n    echo \"For development:\"\n    echo \"- Backend: cd server && npm run dev\"\n    echo \"- Frontend: cd frontend && npm run dev\"\n    echo \"- Printer: cd printer-service && npm run dev\"\n    echo \"\"\n    echo \"Documentation: See README.md for detailed instructions\"\n    echo \"\"\n}\n\n# Run main function\nmain \"$@\"","size_bytes":7315},"frontend/src/tests/MenuPage.test.jsx":{"content":"import { render, screen, waitFor } from '@testing-library/react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport MenuPage from '../pages/customer/MenuPage';\nimport { menuAPI } from '../services/api';\n\n// Mock the API\njest.mock('../services/api', () => ({\n  menuAPI: {\n    getMenu: jest.fn()\n  }\n}));\n\n// Mock the cart context\njest.mock('../contexts/CartContext', () => ({\n  useCart: () => ({\n    addItem: jest.fn()\n  })\n}));\n\nconst createTestQueryClient = () => new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: false,\n    },\n  },\n});\n\nconst renderWithProviders = (component) => {\n  const queryClient = createTestQueryClient();\n  return render(\n    <QueryClientProvider client={queryClient}>\n      <BrowserRouter>\n        {component}\n      </BrowserRouter>\n    </QueryClientProvider>\n  );\n};\n\ndescribe('MenuPage', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('renders loading state initially', () => {\n    menuAPI.getMenu.mockResolvedValue({\n      data: { categories: [] }\n    });\n\n    renderWithProviders(<MenuPage />);\n    \n    expect(screen.getByText('Loading menu...')).toBeInTheDocument();\n  });\n\n  it('renders menu categories and items', async () => {\n    const mockMenuData = {\n      data: {\n        categories: [\n          {\n            id: 1,\n            name: 'Appetizers',\n            items: [\n              {\n                id: 1,\n                name: 'Hummus',\n                price: 25.00,\n                description: 'Creamy chickpea dip',\n                modifiers: []\n              }\n            ]\n          }\n        ]\n      }\n    };\n\n    menuAPI.getMenu.mockResolvedValue(mockMenuData);\n\n    renderWithProviders(<MenuPage />);\n\n    await waitFor(() => {\n      expect(screen.getByText('Our Menu')).toBeInTheDocument();\n      expect(screen.getByText('Appetizers')).toBeInTheDocument();\n      expect(screen.getByText('Hummus')).toBeInTheDocument();\n      expect(screen.getByText('25.00 MAD')).toBeInTheDocument();\n    });\n  });\n\n  it('handles API errors gracefully', async () => {\n    menuAPI.getMenu.mockRejectedValue(new Error('API Error'));\n\n    renderWithProviders(<MenuPage />);\n\n    await waitFor(() => {\n      expect(screen.getByText('Our Menu')).toBeInTheDocument();\n    });\n  });\n\n  it('opens item modal when item is clicked', async () => {\n    const mockMenuData = {\n      data: {\n        categories: [\n          {\n            id: 1,\n            name: 'Appetizers',\n            items: [\n              {\n                id: 1,\n                name: 'Hummus',\n                price: 25.00,\n                description: 'Creamy chickpea dip',\n                modifiers: []\n              }\n            ]\n          }\n        ]\n      }\n    };\n\n    menuAPI.getMenu.mockResolvedValue(mockMenuData);\n\n    renderWithProviders(<MenuPage />);\n\n    await waitFor(() => {\n      expect(screen.getByText('Hummus')).toBeInTheDocument();\n    });\n\n    // Click on the item\n    const hummusItem = screen.getByText('Hummus').closest('div');\n    hummusItem.click();\n\n    await waitFor(() => {\n      expect(screen.getByText('Add to Cart')).toBeInTheDocument();\n    });\n  });\n});","size_bytes":3196},"server/src/routes/menu.js":{"content":"const express = require('express');\nconst multer = require('multer');\nconst path = require('path');\nconst fs = require('fs');\nconst { db } = require('../database/init');\nconst { authenticateToken, authorize } = require('../middleware/auth');\nconst { validateMenuItem } = require('../middleware/validation');\nconst { logger } = require('../middleware/errorHandler');\n\nconst router = express.Router();\n\n// Multer configuration for image uploads\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    const uploadDir = path.join(__dirname, '../../uploads');\n    if (!fs.existsSync(uploadDir)) {\n      fs.mkdirSync(uploadDir, { recursive: true });\n    }\n    cb(null, uploadDir);\n  },\n  filename: function (req, file, cb) {\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    cb(null, 'menu-item-' + uniqueSuffix + path.extname(file.originalname));\n  }\n});\n\nconst upload = multer({ \n  storage: storage,\n  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB limit\n  fileFilter: function (req, file, cb) {\n    const allowedTypes = /jpeg|jpg|png|gif|webp/;\n    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\n    const mimetype = allowedTypes.test(file.mimetype);\n    \n    if (mimetype && extname) {\n      return cb(null, true);\n    } else {\n      cb(new Error('Only image files are allowed!'));\n    }\n  }\n});\n\n// Get menu for a specific branch (public endpoint)\nrouter.get('/', async (req, res) => {\n  try {\n    const { branchId, table } = req.query;\n\n    if (!branchId) {\n      return res.status(400).json({ error: 'Branch ID is required' });\n    }\n\n    // Get categories with menu items\n    const categories = await db('categories')\n      .select('categories.*')\n      .where({ 'categories.branch_id': branchId })\n      .orderBy('categories.position');\n\n    // Get menu items for each category\n    for (const category of categories) {\n      const items = await db('menu_items')\n        .select('menu_items.*')\n        .where({ \n          'menu_items.branch_id': branchId,\n          'menu_items.category_id': category.id,\n          'menu_items.is_available': true\n        })\n        .orderBy('menu_items.name');\n\n      // Get modifiers for each item\n      for (const item of items) {\n        const modifiers = await db('modifiers')\n          .select('modifiers.*')\n          .where({ 'modifiers.menu_item_id': item.id });\n\n        item.modifiers = modifiers;\n      }\n\n      category.items = items;\n    }\n\n    // Log menu access\n    if (table) {\n      await db('audit_logs').insert({\n        user_id: null,\n        action: 'MENU_ACCESS',\n        meta: JSON.stringify({ branchId, table, ip: req.ip })\n      });\n    }\n\n    res.json({ categories });\n  } catch (error) {\n    logger.error('Menu fetch error:', error);\n    res.status(500).json({ error: 'Failed to fetch menu' });\n  }\n});\n\n// Get all categories (admin)\nrouter.get('/categories', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n\n    const categories = await db('categories')\n      .select('categories.*')\n      .where({ 'categories.branch_id': branchId })\n      .orderBy('categories.position');\n\n    res.json({ categories });\n  } catch (error) {\n    logger.error('Categories fetch error:', error);\n    res.status(500).json({ error: 'Failed to fetch categories' });\n  }\n});\n\n// Create category (admin)\nrouter.post('/categories', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { name, position, description, isActive } = req.body;\n    \n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n\n    if (!name) {\n      return res.status(400).json({ error: 'Name is required' });\n    }\n\n    const [categoryId] = await db('categories').insert({\n      name,\n      branch_id: branchId,\n      position: position || 0,\n      description: description || '',\n      is_active: isActive !== false\n    });\n\n    const category = await db('categories').where({ id: categoryId }).first();\n\n    // Log category creation\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'CATEGORY_CREATE',\n      meta: JSON.stringify({ categoryId, name, branchId })\n    });\n\n    res.status(201).json({ success: true, category });\n  } catch (error) {\n    logger.error('Category creation error:', error);\n    res.status(500).json({ error: 'Failed to create category' });\n  }\n});\n\n// Update category (admin)\nrouter.put('/categories/:id', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { name, position, description, isActive } = req.body;\n    \n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n    \n    // Verify the category belongs to the user's branch\n    const existingCategory = await db('categories').where({ id }).first();\n    if (!existingCategory) {\n      return res.status(404).json({ error: 'Category not found' });\n    }\n    if (existingCategory.branch_id !== branchId) {\n      return res.status(403).json({ error: 'Access denied: Category belongs to different branch' });\n    }\n\n    await db('categories')\n      .where({ id })\n      .update({\n        name,\n        position,\n        description: description || '',\n        is_active: isActive !== false,\n        updated_at: db.raw('CURRENT_TIMESTAMP')\n      });\n\n    const category = await db('categories').where({ id }).first();\n\n    // Log category update\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'CATEGORY_UPDATE',\n      meta: JSON.stringify({ categoryId: id, name, position })\n    });\n\n    res.json({ success: true, category });\n  } catch (error) {\n    logger.error('Category update error:', error);\n    res.status(500).json({ error: 'Failed to update category' });\n  }\n});\n\n// Delete category (admin)\nrouter.delete('/categories/:id', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n    \n    // Verify the category belongs to the user's branch\n    const existingCategory = await db('categories').where({ id }).first();\n    if (!existingCategory) {\n      return res.status(404).json({ error: 'Category not found' });\n    }\n    if (existingCategory.branch_id !== branchId) {\n      return res.status(403).json({ error: 'Access denied: Category belongs to different branch' });\n    }\n\n    // Check if category has menu items\n    const itemCount = await db('menu_items').where({ category_id: id }).count('id as count').first();\n    \n    if (itemCount.count > 0) {\n      return res.status(400).json({ error: 'Cannot delete category with existing menu items' });\n    }\n\n    await db('categories').where({ id }).del();\n\n    // Log category deletion\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'CATEGORY_DELETE',\n      meta: JSON.stringify({ categoryId: id })\n    });\n\n    res.json({ message: 'Category deleted successfully' });\n  } catch (error) {\n    logger.error('Category deletion error:', error);\n    res.status(500).json({ error: 'Failed to delete category' });\n  }\n});\n\n// Get all menu items (admin)\nrouter.get('/items', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n    \n    const { categoryId } = req.query;\n\n    let query = db('menu_items')\n      .select('menu_items.*', 'categories.name as category_name')\n      .leftJoin('categories', 'menu_items.category_id', 'categories.id')\n      .where({ 'menu_items.branch_id': branchId });\n\n    if (categoryId) {\n      query = query.where({ 'menu_items.category_id': categoryId });\n    }\n\n    const items = await query.orderBy('menu_items.name');\n\n    // Get modifiers for each item\n    for (const item of items) {\n      const modifiers = await db('modifiers')\n        .select('modifiers.*')\n        .where({ 'modifiers.menu_item_id': item.id });\n\n      item.modifiers = modifiers;\n    }\n\n    res.json({ items });\n  } catch (error) {\n    logger.error('Menu items fetch error:', error);\n    res.status(500).json({ error: 'Failed to fetch menu items' });\n  }\n});\n\n// Create menu item (admin)\nrouter.post('/items', authenticateToken, authorize('admin', 'manager'), upload.single('image'), async (req, res) => {\n  try {\n    const { name, description, price, categoryId, sku, modifiers, image } = req.body;\n    \n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n\n    // Validate required fields\n    if (!name || !price || !categoryId) {\n      return res.status(400).json({ error: 'Name, price, and category are required' });\n    }\n\n    // Get image path - either from file upload or from body (pre-uploaded via /api/upload/image)\n    const imagePath = req.file ? `/uploads/${req.file.filename}` : (image || null);\n\n    const [itemId] = await db('menu_items').insert({\n      name,\n      description,\n      price,\n      category_id: categoryId,\n      branch_id: branchId,\n      sku,\n      image: imagePath\n    });\n\n    // Add modifiers if provided\n    if (modifiers && modifiers.length > 0) {\n      const modifierData = modifiers.map(modifier => ({\n        menu_item_id: itemId,\n        name: modifier.name,\n        extra_price: modifier.extra_price || 0\n      }));\n\n      await db('modifiers').insert(modifierData);\n    }\n\n    const item = await db('menu_items')\n      .select('menu_items.*', 'categories.name as category_name')\n      .leftJoin('categories', 'menu_items.category_id', 'categories.id')\n      .where({ 'menu_items.id': itemId })\n      .first();\n\n    // Get modifiers\n    const itemModifiers = await db('modifiers')\n      .select('modifiers.*')\n      .where({ 'modifiers.menu_item_id': itemId });\n\n    item.modifiers = itemModifiers;\n\n    // Log menu item creation\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'MENU_ITEM_CREATE',\n      meta: JSON.stringify({ itemId, name, price, categoryId, branchId })\n    });\n\n    res.status(201).json({ item });\n  } catch (error) {\n    logger.error('Menu item creation error:', error);\n    res.status(500).json({ error: 'Failed to create menu item' });\n  }\n});\n\n// Update menu item (admin)\nrouter.put('/items/:id', authenticateToken, authorize('admin', 'manager'), upload.single('image'), async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { name, description, price, categoryId, sku, isAvailable, modifiers, image } = req.body;\n    \n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n    \n    // Verify the item belongs to the user's branch\n    const existingItem = await db('menu_items').where({ id }).first();\n    if (!existingItem) {\n      return res.status(404).json({ error: 'Menu item not found' });\n    }\n    if (existingItem.branch_id !== branchId) {\n      return res.status(403).json({ error: 'Access denied: Item belongs to different branch' });\n    }\n\n    // Prepare update data\n    const updateData = {\n      name,\n      description,\n      price,\n      category_id: categoryId,\n      sku,\n      is_available: isAvailable,\n      updated_at: db.raw('CURRENT_TIMESTAMP')\n    };\n\n    // Update image if new one uploaded via file or pre-uploaded via /api/upload/image\n    if (req.file) {\n      updateData.image = `/uploads/${req.file.filename}`;\n      \n      // Delete old image if exists\n      if (existingItem.image) {\n        const oldImagePath = path.join(__dirname, '../../', existingItem.image);\n        if (fs.existsSync(oldImagePath)) {\n          fs.unlinkSync(oldImagePath);\n        }\n      }\n    } else if (image && image !== existingItem.image) {\n      // Image URL provided from separate upload\n      updateData.image = image;\n      \n      // Delete old image if exists\n      if (existingItem.image && existingItem.image !== image) {\n        const oldImagePath = path.join(__dirname, '../../', existingItem.image);\n        if (fs.existsSync(oldImagePath)) {\n          fs.unlinkSync(oldImagePath);\n        }\n      }\n    }\n\n    await db('menu_items')\n      .where({ id })\n      .update(updateData);\n\n    // Update modifiers if provided\n    if (modifiers) {\n      // Delete existing modifiers\n      await db('modifiers').where({ menu_item_id: id }).del();\n\n      // Insert new modifiers\n      if (modifiers.length > 0) {\n        const modifierData = modifiers.map(modifier => ({\n          menu_item_id: id,\n          name: modifier.name,\n          extra_price: modifier.extra_price || 0\n        }));\n\n        await db('modifiers').insert(modifierData);\n      }\n    }\n\n    const item = await db('menu_items')\n      .select('menu_items.*', 'categories.name as category_name')\n      .leftJoin('categories', 'menu_items.category_id', 'categories.id')\n      .where({ 'menu_items.id': id })\n      .first();\n\n    // Get modifiers\n    const itemModifiers = await db('modifiers')\n      .select('modifiers.*')\n      .where({ 'modifiers.menu_item_id': id });\n\n    item.modifiers = itemModifiers;\n\n    // Log menu item update\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'MENU_ITEM_UPDATE',\n      meta: JSON.stringify({ itemId: id, name, price, categoryId })\n    });\n\n    res.json({ item });\n  } catch (error) {\n    logger.error('Menu item update error:', error);\n    res.status(500).json({ error: 'Failed to update menu item' });\n  }\n});\n\n// Delete menu item (admin)\nrouter.delete('/items/:id', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    // Check if item has orders\n    const orderCount = await db('order_items').where({ menu_item_id: id }).count('id as count').first();\n    \n    if (orderCount.count > 0) {\n      return res.status(400).json({ error: 'Cannot delete menu item with existing orders' });\n    }\n\n    // Delete modifiers first\n    await db('modifiers').where({ menu_item_id: id }).del();\n\n    // Delete menu item\n    await db('menu_items').where({ id }).del();\n\n    // Log menu item deletion\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'MENU_ITEM_DELETE',\n      meta: JSON.stringify({ itemId: id })\n    });\n\n    res.json({ message: 'Menu item deleted successfully' });\n  } catch (error) {\n    logger.error('Menu item deletion error:', error);\n    res.status(500).json({ error: 'Failed to delete menu item' });\n  }\n});\n\n// Toggle menu item availability (admin/cashier)\nrouter.patch('/items/:id/availability', authenticateToken, authorize('admin', 'manager', 'cashier'), async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { isAvailable } = req.body;\n\n    await db('menu_items')\n      .where({ id })\n      .update({\n        is_available: isAvailable,\n        updated_at: db.raw('CURRENT_TIMESTAMP')\n      });\n\n    const item = await db('menu_items').where({ id }).first();\n\n    // Log availability change\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'MENU_ITEM_AVAILABILITY',\n      meta: JSON.stringify({ itemId: id, isAvailable })\n    });\n\n    res.json({ item });\n  } catch (error) {\n    logger.error('Menu item availability toggle error:', error);\n    res.status(500).json({ error: 'Failed to toggle menu item availability' });\n  }\n});\n\nmodule.exports = router;","size_bytes":16288},"printer-service/src/receipt-generator.js":{"content":"class ReceiptGenerator {\n  generateOrderReceipt(orderData) {\n    const {\n      order_code,\n      table_number,\n      customer_name,\n      items,\n      total,\n      tax,\n      service_charge,\n      created_at,\n      branch_name = 'POSQ Restaurant'\n    } = orderData;\n\n    const receipt = [];\n    \n    // Header\n    receipt.push(this.centerText(branch_name));\n    receipt.push(this.centerText('='.repeat(32)));\n    receipt.push('');\n    \n    // Order info\n    receipt.push(`Order: ${order_code}`);\n    receipt.push(`Table: ${table_number}`);\n    if (customer_name) {\n      receipt.push(`Customer: ${customer_name}`);\n    }\n    receipt.push(`Date: ${new Date(created_at).toLocaleString()}`);\n    receipt.push('');\n    \n    // Items\n    receipt.push('ITEMS:');\n    receipt.push('-'.repeat(32));\n    \n    items.forEach(item => {\n      const lineTotal = item.quantity * item.unit_price;\n      receipt.push(`${item.item_name}`);\n      receipt.push(`  ${item.quantity}x ${item.unit_price.toFixed(2)} MAD`);\n      \n      if (item.note) {\n        receipt.push(`  Note: ${item.note}`);\n      }\n      \n      if (item.modifiers && item.modifiers.length > 0) {\n        item.modifiers.forEach(modifier => {\n          receipt.push(`  + ${modifier.name} (+${modifier.extra_price.toFixed(2)} MAD)`);\n        });\n      }\n      \n      receipt.push(`  Subtotal: ${lineTotal.toFixed(2)} MAD`);\n      receipt.push('');\n    });\n    \n    // Totals\n    receipt.push('-'.repeat(32));\n    const subtotal = total - tax - service_charge;\n    receipt.push(`Subtotal: ${subtotal.toFixed(2)} MAD`);\n    \n    if (tax > 0) {\n      receipt.push(`Tax: ${tax.toFixed(2)} MAD`);\n    }\n    \n    if (service_charge > 0) {\n      receipt.push(`Service Charge: ${service_charge.toFixed(2)} MAD`);\n    }\n    \n    receipt.push('='.repeat(32));\n    receipt.push(`TOTAL: ${total.toFixed(2)} MAD`);\n    receipt.push('');\n    \n    // Footer\n    receipt.push(this.centerText('Thank you for your order!'));\n    receipt.push(this.centerText('Please pay at the cashier'));\n    receipt.push('');\n    receipt.push(this.centerText('='.repeat(32)));\n    \n    return receipt.join('\\n');\n  }\n\n  generateTestReceipt() {\n    const receipt = [];\n    \n    receipt.push(this.centerText('POSQ Printer Test'));\n    receipt.push(this.centerText('='.repeat(32)));\n    receipt.push('');\n    receipt.push(`Date: ${new Date().toLocaleString()}`);\n    receipt.push(`Time: ${new Date().toLocaleTimeString()}`);\n    receipt.push('');\n    receipt.push('This is a test print to verify');\n    receipt.push('that the printer is working');\n    receipt.push('correctly.');\n    receipt.push('');\n    receipt.push('If you can read this text clearly,');\n    receipt.push('the printer is functioning properly.');\n    receipt.push('');\n    receipt.push(this.centerText('='.repeat(32)));\n    receipt.push(this.centerText('Test Complete'));\n    receipt.push('');\n    \n    return receipt.join('\\n');\n  }\n\n  generateKitchenReceipt(orderData) {\n    const {\n      order_code,\n      table_number,\n      items,\n      created_at,\n      branch_name = 'POSQ Kitchen'\n    } = orderData;\n\n    const receipt = [];\n    \n    // Header\n    receipt.push(this.centerText(branch_name));\n    receipt.push(this.centerText('KITCHEN ORDER'));\n    receipt.push(this.centerText('='.repeat(32)));\n    receipt.push('');\n    \n    // Order info\n    receipt.push(`Order: ${order_code}`);\n    receipt.push(`Table: ${table_number}`);\n    receipt.push(`Time: ${new Date(created_at).toLocaleString()}`);\n    receipt.push('');\n    \n    // Items\n    receipt.push('ITEMS TO PREPARE:');\n    receipt.push('-'.repeat(32));\n    \n    items.forEach(item => {\n      receipt.push(`${item.quantity}x ${item.item_name}`);\n      \n      if (item.note) {\n        receipt.push(`  Note: ${item.note}`);\n      }\n      \n      if (item.modifiers && item.modifiers.length > 0) {\n        receipt.push(`  Modifiers:`);\n        item.modifiers.forEach(modifier => {\n          receipt.push(`    - ${modifier.name}`);\n        });\n      }\n      \n      receipt.push('');\n    });\n    \n    // Footer\n    receipt.push('-'.repeat(32));\n    receipt.push(this.centerText('PREPARE ORDER'));\n    receipt.push('');\n    \n    return receipt.join('\\n');\n  }\n\n  generateBarReceipt(orderData) {\n    const {\n      order_code,\n      table_number,\n      items,\n      created_at,\n      branch_name = 'POSQ Bar'\n    } = orderData;\n\n    // Filter items for bar (beverages)\n    const barItems = items.filter(item => \n      item.item_name.toLowerCase().includes('juice') ||\n      item.item_name.toLowerCase().includes('coffee') ||\n      item.item_name.toLowerCase().includes('tea') ||\n      item.item_name.toLowerCase().includes('drink') ||\n      item.item_name.toLowerCase().includes('beverage')\n    );\n\n    if (barItems.length === 0) {\n      return null; // No bar items to print\n    }\n\n    const receipt = [];\n    \n    // Header\n    receipt.push(this.centerText(branch_name));\n    receipt.push(this.centerText('BAR ORDER'));\n    receipt.push(this.centerText('='.repeat(32)));\n    receipt.push('');\n    \n    // Order info\n    receipt.push(`Order: ${order_code}`);\n    receipt.push(`Table: ${table_number}`);\n    receipt.push(`Time: ${new Date(created_at).toLocaleString()}`);\n    receipt.push('');\n    \n    // Items\n    receipt.push('BEVERAGES TO PREPARE:');\n    receipt.push('-'.repeat(32));\n    \n    barItems.forEach(item => {\n      receipt.push(`${item.quantity}x ${item.item_name}`);\n      \n      if (item.note) {\n        receipt.push(`  Note: ${item.note}`);\n      }\n      \n      if (item.modifiers && item.modifiers.length > 0) {\n        receipt.push(`  Modifiers:`);\n        item.modifiers.forEach(modifier => {\n          receipt.push(`    - ${modifier.name}`);\n        });\n      }\n      \n      receipt.push('');\n    });\n    \n    // Footer\n    receipt.push('-'.repeat(32));\n    receipt.push(this.centerText('PREPARE BEVERAGES'));\n    receipt.push('');\n    \n    return receipt.join('\\n');\n  }\n\n  centerText(text, width = 32) {\n    const padding = Math.max(0, Math.floor((width - text.length) / 2));\n    return ' '.repeat(padding) + text;\n  }\n\n  formatCurrency(amount, currency = 'MAD') {\n    return `${amount.toFixed(2)} ${currency}`;\n  }\n\n  formatTime(date) {\n    return new Date(date).toLocaleTimeString();\n  }\n\n  formatDate(date) {\n    return new Date(date).toLocaleDateString();\n  }\n}\n\nmodule.exports = ReceiptGenerator;","size_bytes":6359},"server/src/app.ts":{"content":"import express from 'express';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport swaggerUi from 'swagger-ui-express';\nimport swaggerJSDoc from 'swagger-jsdoc';\nimport { createServer } from 'http';\nimport { Server } from 'socket.io';\nimport routes from './routes/index';\n\nconst app = express();\napp.use(express.json());\napp.use(cors({ origin: true, credentials: true }));\napp.use(helmet());\n\nif (process.env.SWAGGER_ENABLED !== 'false') {\n  const swaggerSpec = swaggerJSDoc({\n    definition: {\n      openapi: '3.0.0',\n      info: { title: 'POSQ API', version: '0.1.0' }\n    },\n    apis: ['src/controllers/**/*.ts', 'src/routes/**/*.ts']\n  });\n  app.use('/api/docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec));\n}\n\napp.use('/api', routes);\n\nexport function createHttpAndIo() {\n  const httpServer = createServer(app);\n  const io = new Server(httpServer, { cors: { origin: true } });\n  app.set('io', io);\n  io.on('connection', (socket) => {\n    socket.on('join', (room: string) => socket.join(room));\n  });\n  return { app, httpServer, io };\n}\n\nexport default app;\n","size_bytes":1074},"setup-mysql.sh":{"content":"#!/bin/bash\n\n# POSQ Restaurant System - MySQL Setup Script\necho \"🍽️  Setting up POSQ Restaurant System with MySQL...\"\n\n# Check if MySQL is installed\nif ! command -v mysql &> /dev/null; then\n    echo \"❌ MySQL is not installed. Please install MySQL first.\"\n    echo \"   On Ubuntu/Debian: sudo apt-get install mysql-server\"\n    echo \"   On macOS: brew install mysql\"\n    echo \"   On Windows: Download from https://dev.mysql.com/downloads/mysql/\"\n    exit 1\nfi\n\n# Check if MySQL service is running\nif ! systemctl is-active --quiet mysql 2>/dev/null && ! brew services list | grep mysql | grep started >/dev/null 2>&1; then\n    echo \"⚠️  MySQL service is not running. Starting MySQL...\"\n    if command -v systemctl &> /dev/null; then\n        sudo systemctl start mysql\n    elif command -v brew &> /dev/null; then\n        brew services start mysql\n    else\n        echo \"❌ Please start MySQL service manually\"\n        exit 1\n    fi\nfi\n\n# Create database and user\necho \"📊 Creating database and user...\"\n\nmysql -u root -p << EOF\nCREATE DATABASE IF NOT EXISTS posq CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER IF NOT EXISTS 'posq'@'localhost' IDENTIFIED BY 'posqpassword';\nGRANT ALL PRIVILEGES ON posq.* TO 'posq'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n\nif [ $? -eq 0 ]; then\n    echo \"✅ Database and user created successfully!\"\nelse\n    echo \"❌ Failed to create database. Please check MySQL connection.\"\n    exit 1\nfi\n\n# Install MySQL dependencies\necho \"📦 Installing MySQL dependencies...\"\ncd server\nnpm install mysql2\n\n# Run migrations\necho \"🔄 Running database migrations...\"\nnpx knex migrate:latest\n\n# Run seeds\necho \"🌱 Seeding database with initial data...\"\nnpx knex seed:run\n\necho \"🎉 Setup complete! Your POSQ Restaurant System is ready with MySQL!\"\necho \"\"\necho \"📋 Next steps:\"\necho \"   1. Start the server: cd server && npm start\"\necho \"   2. Start the frontend: cd frontend && npm run dev\"\necho \"   3. Access the system at: http://localhost:5173\"\necho \"\"\necho \"🔐 Default admin credentials:\"\necho \"   Username: admin\"\necho \"   Password: admin123\"\necho \"\"\necho \"💡 You can now switch between LOCAL (SQLite) and CLOUD (MySQL) modes in the Settings page!\"","size_bytes":2203},"server/src/migrations/20250103000002_add_table_capacity.js":{"content":"exports.up = function(knex) {\n  return knex.schema.alterTable('tables', table => {\n    table.integer('capacity').defaultTo(4);\n    table.string('location');\n    table.boolean('is_active').defaultTo(true);\n    table.string('qr_code_url');\n  });\n};\n\nexports.down = function(knex) {\n  return knex.schema.alterTable('tables', table => {\n    table.dropColumn('capacity');\n    table.dropColumn('location');\n    table.dropColumn('is_active');\n    table.dropColumn('qr_code_url');\n  });\n};","size_bytes":481},"server/src/routes/index.ts":{"content":"import { Router } from 'express';\nimport authRouter from './modules/auth';\nimport menuRouter from './modules/menu';\nimport tablesRouter from './modules/tables';\nimport ordersRouter from './modules/orders';\nimport paymentsRouter from './modules/payments';\nimport settingsRouter from './modules/settings';\n\nconst router = Router();\n\nrouter.use('/auth', authRouter);\nrouter.use('/menu', menuRouter);\nrouter.use('/tables', tablesRouter);\nrouter.use('/orders', ordersRouter);\nrouter.use('/payments', paymentsRouter);\nrouter.use('/settings', settingsRouter);\n\nexport default router;\n","size_bytes":577},"server/src/routes/auth.js":{"content":"const express = require('express');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst { db } = require('../database/init');\nconst { authenticateToken, authenticatePin } = require('../middleware/auth');\nconst { validateLogin } = require('../middleware/validation');\nconst { authRateLimiter } = require('../middleware/rateLimiter');\nconst { logger } = require('../middleware/errorHandler');\n\nconst router = express.Router();\n\n// Login with username/password\nrouter.post('/login', authRateLimiter, validateLogin, async (req, res) => {\n  try {\n    const { username, password } = req.body;\n\n    const user = await db('users').where({ username }).first();\n    if (!user || !user.is_active) {\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n\n    const isValidPassword = await bcrypt.compare(password, user.password_hash);\n    if (!isValidPassword) {\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n\n    const accessToken = jwt.sign(\n      { userId: user.id, username: user.username, role: user.role },\n      process.env.JWT_SECRET,\n      { expiresIn: process.env.JWT_EXPIRES_IN || '1h' }\n    );\n\n    const refreshToken = jwt.sign(\n      { userId: user.id },\n      process.env.JWT_REFRESH_SECRET,\n      { expiresIn: process.env.JWT_REFRESH_EXPIRES_IN || '7d' }\n    );\n\n    // Log successful login\n    await db('audit_logs').insert({\n      user_id: user.id,\n      action: 'LOGIN',\n      meta: JSON.stringify({ ip: req.ip, userAgent: req.get('User-Agent') })\n    });\n\n    logger.info(`User ${username} logged in successfully`);\n\n    res.json({\n      accessToken,\n      refreshToken,\n      user: {\n        id: user.id,\n        username: user.username,\n        fullName: user.full_name,\n        role: user.role\n      }\n    });\n  } catch (error) {\n    logger.error('Login error:', error);\n    res.status(500).json({ error: 'Login failed' });\n  }\n});\n\n// Quick PIN login for cashiers\nrouter.post('/pin-login', authRateLimiter, authenticatePin, async (req, res) => {\n  try {\n    const user = req.user;\n\n    const accessToken = jwt.sign(\n      { userId: user.id, username: user.username, role: user.role },\n      process.env.JWT_SECRET,\n      { expiresIn: '2h' } // Shorter expiry for PIN login\n    );\n\n    // Log PIN login\n    await db('audit_logs').insert({\n      user_id: user.id,\n      action: 'PIN_LOGIN',\n      meta: JSON.stringify({ ip: req.ip, userAgent: req.get('User-Agent') })\n    });\n\n    logger.info(`User ${user.username} logged in with PIN`);\n\n    res.json({\n      accessToken,\n      user: {\n        id: user.id,\n        username: user.username,\n        fullName: user.full_name,\n        role: user.role\n      }\n    });\n  } catch (error) {\n    logger.error('PIN login error:', error);\n    res.status(500).json({ error: 'PIN login failed' });\n  }\n});\n\n// Refresh token\nrouter.post('/refresh', async (req, res) => {\n  try {\n    const { refreshToken } = req.body;\n\n    if (!refreshToken) {\n      return res.status(401).json({ error: 'Refresh token required' });\n    }\n\n    const decoded = jwt.verify(refreshToken, process.env.JWT_REFRESH_SECRET);\n    const user = await db('users').where({ id: decoded.userId }).first();\n\n    if (!user || !user.is_active) {\n      return res.status(401).json({ error: 'Invalid refresh token' });\n    }\n\n    const accessToken = jwt.sign(\n      { userId: user.id, username: user.username, role: user.role },\n      process.env.JWT_SECRET,\n      { expiresIn: process.env.JWT_EXPIRES_IN || '1h' }\n    );\n\n    res.json({ accessToken });\n  } catch (error) {\n    logger.error('Token refresh error:', error);\n    res.status(401).json({ error: 'Invalid refresh token' });\n  }\n});\n\n// Get current user profile\nrouter.get('/profile', authenticateToken, async (req, res) => {\n  try {\n    const user = await db('users')\n      .select('id', 'username', 'full_name', 'role', 'created_at')\n      .where({ id: req.user.id })\n      .first();\n\n    res.json({ user });\n  } catch (error) {\n    logger.error('Profile fetch error:', error);\n    res.status(500).json({ error: 'Failed to fetch profile' });\n  }\n});\n\n// Logout (client-side token invalidation)\nrouter.post('/logout', authenticateToken, async (req, res) => {\n  try {\n    // Log logout\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'LOGOUT',\n      meta: JSON.stringify({ ip: req.ip, userAgent: req.get('User-Agent') })\n    });\n\n    logger.info(`User ${req.user.username} logged out`);\n\n    res.json({ message: 'Logged out successfully' });\n  } catch (error) {\n    logger.error('Logout error:', error);\n    res.status(500).json({ error: 'Logout failed' });\n  }\n});\n\n// Change password\nrouter.post('/change-password', authenticateToken, async (req, res) => {\n  try {\n    const { currentPassword, newPassword } = req.body;\n\n    if (!currentPassword || !newPassword) {\n      return res.status(400).json({ error: 'Current and new passwords are required' });\n    }\n\n    if (newPassword.length < 6) {\n      return res.status(400).json({ error: 'New password must be at least 6 characters' });\n    }\n\n    const user = await db('users').where({ id: req.user.id }).first();\n    const isValidPassword = await bcrypt.compare(currentPassword, user.password_hash);\n\n    if (!isValidPassword) {\n      return res.status(401).json({ error: 'Current password is incorrect' });\n    }\n\n    const hashedNewPassword = await bcrypt.hash(newPassword, 12);\n\n    await db('users')\n      .where({ id: req.user.id })\n      .update({ \n        password_hash: hashedNewPassword,\n        updated_at: db.raw('CURRENT_TIMESTAMP')\n      });\n\n    // Log password change\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'PASSWORD_CHANGE',\n      meta: JSON.stringify({ ip: req.ip })\n    });\n\n    logger.info(`User ${req.user.username} changed password`);\n\n    res.json({ message: 'Password changed successfully' });\n  } catch (error) {\n    logger.error('Password change error:', error);\n    res.status(500).json({ error: 'Failed to change password' });\n  }\n});\n\nmodule.exports = router;","size_bytes":6058},"server/src/routes/reports.js":{"content":"const express = require('express');\nconst XLSX = require('xlsx');\nconst { db } = require('../database/init');\nconst { authenticateToken, authorize } = require('../middleware/auth');\nconst { logger } = require('../middleware/errorHandler');\n\nconst router = express.Router();\n\n// Get daily sales report\nrouter.get('/sales/daily', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { date, branchId } = req.query;\n    const targetDate = date || new Date().toISOString().split('T')[0];\n\n    let query = db('orders')\n      .select(\n        db.raw('COUNT(*) as total_orders'),\n        db.raw('SUM(total) as total_revenue'),\n        db.raw('SUM(tax) as total_tax'),\n        db.raw('SUM(service_charge) as total_service_charge'),\n        db.raw('AVG(total) as average_order_value')\n      )\n      .where(db.raw('DATE(created_at) = ?', [targetDate]));\n\n    if (branchId) {\n      query = query.where({ branch_id: branchId });\n    }\n\n    const summary = await query.first();\n\n    // Get orders by status\n    const statusBreakdown = await db('orders')\n      .select('status')\n      .count('id as count')\n      .where(db.raw('DATE(created_at) = ?', [targetDate]))\n      .groupBy('status');\n\n    // Get hourly breakdown (Database agnostic)\n    const dbType = process.env.DB_TYPE || 'sqlite3';\n    let hourlyBreakdown;\n    \n    if (dbType === 'sqlite3') {\n      hourlyBreakdown = await db('orders')\n        .select(db.raw('CAST(strftime(\"%H\", created_at) AS INTEGER) as hour'))\n        .count('id as count')\n        .sum('total as revenue')\n        .where(db.raw('DATE(created_at) = ?', [targetDate]))\n        .groupBy(db.raw('strftime(\"%H\", created_at)'))\n        .orderBy('hour');\n    } else {\n      // MySQL/PostgreSQL\n      hourlyBreakdown = await db('orders')\n        .select(db.raw('HOUR(created_at) as hour'))\n        .count('id as count')\n        .sum('total as revenue')\n        .where(db.raw('DATE(created_at) = ?', [targetDate]))\n        .groupBy(db.raw('HOUR(created_at)'))\n        .orderBy('hour');\n    }\n\n    res.json({\n      date: targetDate,\n      summary,\n      statusBreakdown,\n      hourlyBreakdown\n    });\n  } catch (error) {\n    logger.error('Daily sales report error:', error);\n    res.status(500).json({ error: 'Failed to generate daily sales report' });\n  }\n});\n\n// Get sales report by date range\nrouter.get('/sales/range', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { startDate, endDate, branchId } = req.query;\n\n    if (!startDate || !endDate) {\n      return res.status(400).json({ error: 'Start date and end date are required' });\n    }\n\n    let query = db('orders')\n      .select(\n        db.raw('DATE(created_at) as date'),\n        db.raw('COUNT(*) as total_orders'),\n        db.raw('SUM(total) as total_revenue'),\n        db.raw('SUM(tax) as total_tax'),\n        db.raw('SUM(service_charge) as total_service_charge'),\n        db.raw('AVG(total) as average_order_value')\n      )\n      .whereBetween('created_at', [startDate, endDate])\n      .groupBy(db.raw('DATE(created_at)'))\n      .orderBy('date');\n\n    if (branchId) {\n      query = query.where({ branch_id: branchId });\n    }\n\n    const dailyData = await query;\n\n    // Calculate totals\n    const totals = dailyData.reduce((acc, day) => ({\n      totalOrders: acc.totalOrders + parseInt(day.total_orders),\n      totalRevenue: acc.totalRevenue + parseFloat(day.total_revenue || 0),\n      totalTax: acc.totalTax + parseFloat(day.total_tax || 0),\n      totalServiceCharge: acc.totalServiceCharge + parseFloat(day.total_service_charge || 0)\n    }), {\n      totalOrders: 0,\n      totalRevenue: 0,\n      totalTax: 0,\n      totalServiceCharge: 0\n    });\n\n    totals.averageOrderValue = totals.totalOrders > 0 ? totals.totalRevenue / totals.totalOrders : 0;\n\n    res.json({\n      startDate,\n      endDate,\n      dailyData,\n      totals\n    });\n  } catch (error) {\n    logger.error('Sales range report error:', error);\n    res.status(500).json({ error: 'Failed to generate sales range report' });\n  }\n});\n\n// Get top selling items report\nrouter.get('/items/top', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { startDate, endDate, branchId, limit = 20 } = req.query;\n\n    let query = db('order_items')\n      .select(\n        'menu_items.name as item_name',\n        'menu_items.sku',\n        'categories.name as category_name',\n        db.raw('SUM(order_items.quantity) as total_quantity'),\n        db.raw('SUM(order_items.quantity * order_items.unit_price) as total_revenue'),\n        db.raw('COUNT(DISTINCT order_items.order_id) as order_count')\n      )\n      .leftJoin('menu_items', 'order_items.menu_item_id', 'menu_items.id')\n      .leftJoin('categories', 'menu_items.category_id', 'categories.id')\n      .leftJoin('orders', 'order_items.order_id', 'orders.id')\n      .where('orders.status', '!=', 'CANCELLED')\n      .groupBy('menu_items.id', 'menu_items.name', 'menu_items.sku', 'categories.name')\n      .orderBy('total_quantity', 'desc')\n      .limit(parseInt(limit));\n\n    if (startDate && endDate) {\n      query = query.whereBetween('orders.created_at', [startDate, endDate]);\n    }\n\n    if (branchId) {\n      query = query.where({ 'orders.branch_id': branchId });\n    }\n\n    const topItems = await query;\n\n    res.json({ topItems });\n  } catch (error) {\n    logger.error('Top items report error:', error);\n    res.status(500).json({ error: 'Failed to generate top items report' });\n  }\n});\n\n// Get table turnover report\nrouter.get('/tables/turnover', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { startDate, endDate, branchId } = req.query;\n\n    const dbType = process.env.DB_TYPE || 'sqlite3';\n    let query = db('orders')\n      .select(\n        'tables.table_number',\n        db.raw('COUNT(*) as total_orders'),\n        db.raw('SUM(total) as total_revenue'),\n        db.raw('AVG(total) as average_order_value')\n      )\n      .leftJoin('tables', 'orders.table_id', 'tables.id')\n      .where('orders.status', '!=', 'CANCELLED')\n      .groupBy('tables.id', 'tables.table_number')\n      .orderBy('total_orders', 'desc');\n\n    // Add database-specific service time calculation\n    if (dbType === 'sqlite3') {\n      query = query.addSelect(db.raw('AVG((julianday(updated_at) - julianday(created_at)) * 24 * 60) as average_service_time'));\n    } else {\n      // MySQL/PostgreSQL\n      query = query.addSelect(db.raw('AVG(TIMESTAMPDIFF(MINUTE, created_at, updated_at)) as average_service_time'));\n    }\n\n    if (startDate && endDate) {\n      query = query.whereBetween('orders.created_at', [startDate, endDate]);\n    }\n\n    if (branchId) {\n      query = query.where({ 'orders.branch_id': branchId });\n    }\n\n    const tableTurnover = await query;\n\n    res.json({ tableTurnover });\n  } catch (error) {\n    logger.error('Table turnover report error:', error);\n    res.status(500).json({ error: 'Failed to generate table turnover report' });\n  }\n});\n\n// Get inventory usage report\nrouter.get('/inventory/usage', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { startDate, endDate, branchId } = req.query;\n\n    let query = db('stock_movements')\n      .select(\n        'stock_items.name as item_name',\n        'stock_items.sku',\n        'stock_items.unit',\n        db.raw('SUM(CASE WHEN stock_movements.change < 0 THEN ABS(stock_movements.change) ELSE 0 END) as total_consumed'),\n        db.raw('SUM(CASE WHEN stock_movements.change > 0 THEN stock_movements.change ELSE 0 END) as total_received'),\n        db.raw('COUNT(CASE WHEN stock_movements.change < 0 THEN 1 END) as consumption_count'),\n        db.raw('COUNT(CASE WHEN stock_movements.change > 0 THEN 1 END) as receipt_count')\n      )\n      .leftJoin('stock_items', 'stock_movements.stock_item_id', 'stock_items.id')\n      .groupBy('stock_items.id', 'stock_items.name', 'stock_items.sku', 'stock_items.unit')\n      .orderBy('total_consumed', 'desc');\n\n    if (startDate && endDate) {\n      query = query.whereBetween('stock_movements.created_at', [startDate, endDate]);\n    }\n\n    if (branchId) {\n      query = query.where({ 'stock_items.branch_id': branchId });\n    }\n\n    const inventoryUsage = await query;\n\n    res.json({ inventoryUsage });\n  } catch (error) {\n    logger.error('Inventory usage report error:', error);\n    res.status(500).json({ error: 'Failed to generate inventory usage report' });\n  }\n});\n\n// Get payment method report\nrouter.get('/payments/methods', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { startDate, endDate, branchId } = req.query;\n\n    let query = db('payments')\n      .select(\n        'payments.payment_type',\n        db.raw('COUNT(*) as transaction_count'),\n        db.raw('SUM(amount) as total_amount'),\n        db.raw('AVG(amount) as average_amount')\n      )\n      .leftJoin('orders', 'payments.order_id', 'orders.id')\n      .groupBy('payments.payment_type')\n      .orderBy('total_amount', 'desc');\n\n    if (startDate && endDate) {\n      query = query.whereBetween('payments.paid_at', [startDate, endDate]);\n    }\n\n    if (branchId) {\n      query = query.where({ 'orders.branch_id': branchId });\n    }\n\n    const paymentMethods = await query;\n\n    res.json({ paymentMethods });\n  } catch (error) {\n    logger.error('Payment methods report error:', error);\n    res.status(500).json({ error: 'Failed to generate payment methods report' });\n  }\n});\n\n// Get cash reconciliation report\nrouter.get('/cash/reconciliation', authenticateToken, authorize('admin', 'manager', 'cashier'), async (req, res) => {\n  try {\n    const { date, branchId } = req.query;\n    const targetDate = date || new Date().toISOString().split('T')[0];\n\n    // Get cash payments for the day\n    let cashQuery = db('payments')\n      .select(\n        db.raw('SUM(amount) as total_cash_received'),\n        db.raw('COUNT(*) as cash_transaction_count')\n      )\n      .leftJoin('orders', 'payments.order_id', 'orders.id')\n      .where('payments.payment_type', 'CASH')\n      .where(db.raw('DATE(payments.paid_at) = ?', [targetDate]));\n\n    if (branchId) {\n      cashQuery = cashQuery.where({ 'orders.branch_id': branchId });\n    }\n\n    const cashSummary = await cashQuery.first();\n\n    // Get refunds\n    let refundQuery = db('payments')\n      .select(\n        db.raw('SUM(ABS(amount)) as total_refunds'),\n        db.raw('COUNT(*) as refund_count')\n      )\n      .leftJoin('orders', 'payments.order_id', 'orders.id')\n      .where('payments.payment_type', 'REFUND')\n      .where(db.raw('DATE(payments.paid_at) = ?', [targetDate]));\n\n    if (branchId) {\n      refundQuery = refundQuery.where({ 'orders.branch_id': branchId });\n    }\n\n    const refundSummary = await refundQuery.first();\n\n    res.json({\n      date: targetDate,\n      cashSummary,\n      refundSummary,\n      netCash: (cashSummary.total_cash_received || 0) - (refundSummary.total_refunds || 0)\n    });\n  } catch (error) {\n    logger.error('Cash reconciliation report error:', error);\n    res.status(500).json({ error: 'Failed to generate cash reconciliation report' });\n  }\n});\n\n// Export report data as CSV\nrouter.get('/export/:reportType', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { reportType } = req.params;\n    const { startDate, endDate, branchId } = req.query;\n\n    let data = [];\n    let filename = '';\n\n    switch (reportType) {\n      case 'sales':\n        data = await getSalesData(startDate, endDate, branchId);\n        filename = `sales_report_${startDate || 'all'}_${endDate || 'all'}.csv`;\n        break;\n      case 'items':\n        data = await getTopItemsData(startDate, endDate, branchId);\n        filename = `top_items_report_${startDate || 'all'}_${endDate || 'all'}.csv`;\n        break;\n      case 'inventory':\n        data = await getInventoryUsageData(startDate, endDate, branchId);\n        filename = `inventory_usage_report_${startDate || 'all'}_${endDate || 'all'}.csv`;\n        break;\n      default:\n        return res.status(400).json({ error: 'Invalid report type' });\n    }\n\n    // Convert to CSV format\n    const csv = convertToCSV(data);\n    \n    res.setHeader('Content-Type', 'text/csv');\n    res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n    res.send(csv);\n\n  } catch (error) {\n    logger.error('Report export error:', error);\n    res.status(500).json({ error: 'Failed to export report' });\n  }\n});\n\n// Helper functions for data export\nasync function getSalesData(startDate, endDate, branchId) {\n  let query = db('orders')\n    .select(\n      'orders.order_code',\n      'orders.created_at',\n      'orders.total',\n      'orders.tax',\n      'orders.service_charge',\n      'orders.status',\n      'tables.table_number',\n      'branches.name as branch_name'\n    )\n    .leftJoin('tables', 'orders.table_id', 'tables.id')\n    .leftJoin('branches', 'orders.branch_id', 'branches.id')\n    .orderBy('orders.created_at', 'desc');\n\n  if (startDate && endDate) {\n    query = query.whereBetween('orders.created_at', [startDate, endDate]);\n  }\n\n  if (branchId) {\n    query = query.where({ 'orders.branch_id': branchId });\n  }\n\n  return await query;\n}\n\nasync function getTopItemsData(startDate, endDate, branchId) {\n  let query = db('order_items')\n    .select(\n      'menu_items.name as item_name',\n      'menu_items.sku',\n      'categories.name as category_name',\n      db.raw('SUM(order_items.quantity) as total_quantity'),\n      db.raw('SUM(order_items.quantity * order_items.unit_price) as total_revenue')\n    )\n    .leftJoin('menu_items', 'order_items.menu_item_id', 'menu_items.id')\n    .leftJoin('categories', 'menu_items.category_id', 'categories.id')\n    .leftJoin('orders', 'order_items.order_id', 'orders.id')\n    .where('orders.status', '!=', 'CANCELLED')\n    .groupBy('menu_items.id', 'menu_items.name', 'menu_items.sku', 'categories.name')\n    .orderBy('total_quantity', 'desc');\n\n  if (startDate && endDate) {\n    query = query.whereBetween('orders.created_at', [startDate, endDate]);\n  }\n\n  if (branchId) {\n    query = query.where({ 'orders.branch_id': branchId });\n  }\n\n  return await query;\n}\n\nasync function getInventoryUsageData(startDate, endDate, branchId) {\n  let query = db('stock_movements')\n    .select(\n      'stock_items.name as item_name',\n      'stock_items.sku',\n      'stock_items.unit',\n      'stock_movements.change',\n      'stock_movements.reason',\n      'stock_movements.created_at'\n    )\n    .leftJoin('stock_items', 'stock_movements.stock_item_id', 'stock_items.id')\n    .orderBy('stock_movements.created_at', 'desc');\n\n  if (startDate && endDate) {\n    query = query.whereBetween('stock_movements.created_at', [startDate, endDate]);\n  }\n\n  if (branchId) {\n    query = query.where({ 'stock_items.branch_id': branchId });\n  }\n\n  return await query;\n}\n\nfunction convertToCSV(data) {\n  if (!data || data.length === 0) {\n    return '';\n  }\n\n  const headers = Object.keys(data[0]);\n  const csvRows = [headers.join(',')];\n\n  for (const row of data) {\n    const values = headers.map(header => {\n      const value = row[header];\n      return typeof value === 'string' && value.includes(',') ? `\"${value}\"` : value;\n    });\n    csvRows.push(values.join(','));\n  }\n\n  return csvRows.join('\\n');\n}\n\n// Export report as Excel\nrouter.get('/export/:reportType', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { reportType } = req.params;\n    const { startDate, endDate, branchId } = req.query;\n\n    let data = [];\n    let filename = '';\n\n    switch (reportType) {\n      case 'sales':\n        data = await getSalesData(startDate, endDate, branchId);\n        filename = `sales_report_${startDate}_to_${endDate}.xlsx`;\n        break;\n      case 'items':\n        data = await getTopItemsData(startDate, endDate, branchId);\n        filename = `top_items_report_${startDate}_to_${endDate}.xlsx`;\n        break;\n      case 'tables':\n        data = await db('orders')\n          .select(\n            'tables.table_number',\n            db.raw('COUNT(*) as order_count'),\n            db.raw('SUM(orders.total) as total_revenue'),\n            db.raw('AVG(orders.total) as average_order_value')\n          )\n          .leftJoin('tables', 'orders.table_id', 'tables.id')\n          .whereBetween('orders.created_at', [startDate, endDate])\n          .groupBy('tables.id', 'tables.table_number')\n          .orderBy('order_count', 'desc');\n        filename = `table_turnover_report_${startDate}_to_${endDate}.xlsx`;\n        break;\n      case 'payments':\n        data = await db('payments')\n          .select(\n            'payment_method',\n            db.raw('COUNT(*) as transaction_count'),\n            db.raw('SUM(amount) as total_amount')\n          )\n          .whereBetween('created_at', [startDate, endDate])\n          .groupBy('payment_method')\n          .orderBy('total_amount', 'desc');\n        filename = `payment_methods_report_${startDate}_to_${endDate}.xlsx`;\n        break;\n      case 'inventory':\n        data = await getInventoryUsageData(startDate, endDate, branchId);\n        filename = `inventory_usage_report_${startDate}_to_${endDate}.xlsx`;\n        break;\n      case 'cash':\n        data = await db('payments')\n          .select(\n            db.raw('DATE(created_at) as date'),\n            db.raw('SUM(CASE WHEN payment_method = \"cash\" THEN amount ELSE 0 END) as cash_sales'),\n            db.raw('COUNT(CASE WHEN payment_method = \"cash\" THEN 1 END) as cash_transactions')\n          )\n          .whereBetween('created_at', [startDate, endDate])\n          .groupBy(db.raw('DATE(created_at)'))\n          .orderBy('date');\n        filename = `cash_reconciliation_report_${startDate}_to_${endDate}.xlsx`;\n        break;\n      default:\n        return res.status(400).json({ error: 'Invalid report type' });\n    }\n\n    // Create Excel workbook\n    const workbook = XLSX.utils.book_new();\n    const worksheet = XLSX.utils.json_to_sheet(data);\n    \n    // Add worksheet to workbook\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Report');\n    \n    // Generate Excel buffer\n    const excelBuffer = XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });\n\n    // Set response headers\n    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n    res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n    res.setHeader('Content-Length', excelBuffer.length);\n\n    // Send Excel file\n    res.send(excelBuffer);\n\n    // Log export\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'REPORT_EXPORT',\n      meta: JSON.stringify({ \n        reportType, \n        startDate, \n        endDate, \n        branchId,\n        recordCount: data.length \n      })\n    });\n\n    logger.info(`Report exported: ${reportType} by ${req.user.username}`);\n  } catch (error) {\n    logger.error('Report export error:', error);\n    res.status(500).json({ error: 'Failed to export report' });\n  }\n});\n\nmodule.exports = router;","size_bytes":18992},"frontend/src/contexts/AuthContext.jsx":{"content":"import { createContext, useContext, useReducer, useEffect } from 'react'\nimport { authAPI } from '../services/api'\nimport toast from 'react-hot-toast'\n\nconst AuthContext = createContext()\n\nconst initialState = {\n  user: null,\n  token: null,\n  isAuthenticated: false,\n  isLoading: true,\n  error: null\n}\n\nfunction authReducer(state, action) {\n  switch (action.type) {\n    case 'AUTH_START':\n      return { ...state, isLoading: true, error: null }\n    \n    case 'AUTH_SUCCESS':\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      }\n    \n    case 'AUTH_FAILURE':\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: action.payload\n      }\n    \n    case 'AUTH_LOGOUT':\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: null\n      }\n    \n    case 'CLEAR_ERROR':\n      return { ...state, error: null }\n    \n    default:\n      return state\n  }\n}\n\nexport function AuthProvider({ children }) {\n  const [state, dispatch] = useReducer(authReducer, initialState)\n\n  // Check for existing token on mount\n  useEffect(() => {\n    const token = localStorage.getItem('token')\n    const user = localStorage.getItem('user')\n    \n    if (token && user) {\n      try {\n        const userData = JSON.parse(user)\n        dispatch({\n          type: 'AUTH_SUCCESS',\n          payload: { user: userData, token }\n        })\n      } catch (error) {\n        localStorage.removeItem('token')\n        localStorage.removeItem('user')\n      }\n    } else {\n      dispatch({ type: 'AUTH_FAILURE', payload: null })\n    }\n  }, [])\n\n  const login = async (credentials) => {\n    dispatch({ type: 'AUTH_START' })\n    \n    try {\n      const response = await authAPI.login(credentials)\n      const { accessToken, refreshToken, user } = response.data\n      \n      localStorage.setItem('token', accessToken)\n      localStorage.setItem('refreshToken', refreshToken)\n      localStorage.setItem('user', JSON.stringify(user))\n      \n      dispatch({\n        type: 'AUTH_SUCCESS',\n        payload: { user, token: accessToken }\n      })\n      \n      toast.success(`Welcome back, ${user.fullName || user.username}!`)\n      return { success: true }\n    } catch (error) {\n      const message = error.response?.data?.error || 'Login failed'\n      dispatch({ type: 'AUTH_FAILURE', payload: message })\n      toast.error(message)\n      return { success: false, error: message }\n    }\n  }\n\n  const pinLogin = async (credentials) => {\n    dispatch({ type: 'AUTH_START' })\n    \n    try {\n      const response = await authAPI.pinLogin(credentials)\n      const { accessToken, refreshToken, user } = response.data\n      \n      localStorage.setItem('token', accessToken)\n      localStorage.setItem('refreshToken', refreshToken)\n      localStorage.setItem('user', JSON.stringify(user))\n      \n      dispatch({\n        type: 'AUTH_SUCCESS',\n        payload: { user, token: accessToken }\n      })\n      \n      toast.success(`Welcome, ${user.fullName || user.username}!`)\n      return { success: true }\n    } catch (error) {\n      const message = error.response?.data?.error || 'PIN login failed'\n      dispatch({ type: 'AUTH_FAILURE', payload: message })\n      toast.error(message)\n      return { success: false, error: message }\n    }\n  }\n\n  const logout = async () => {\n    try {\n      await authAPI.logout()\n    } catch (error) {\n      console.error('Logout error:', error)\n    } finally {\n      localStorage.removeItem('token')\n      localStorage.removeItem('refreshToken')\n      localStorage.removeItem('user')\n      dispatch({ type: 'AUTH_LOGOUT' })\n      toast.success('Logged out successfully')\n    }\n  }\n\n  const changePassword = async (passwords) => {\n    try {\n      await authAPI.changePassword(passwords)\n      toast.success('Password changed successfully')\n      return { success: true }\n    } catch (error) {\n      const message = error.response?.data?.error || 'Password change failed'\n      toast.error(message)\n      return { success: false, error: message }\n    }\n  }\n\n  const clearError = () => {\n    dispatch({ type: 'CLEAR_ERROR' })\n  }\n\n  const value = {\n    ...state,\n    login,\n    pinLogin,\n    logout,\n    changePassword,\n    clearError\n  }\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext)\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider')\n  }\n  return context\n}","size_bytes":4708},"frontend/src/pages/admin/OrdersPage.jsx":{"content":"import { useState, useEffect } from 'react'\nimport { useSocket } from '../../contexts/SocketContext'\nimport { ordersAPI, appSettingsAPI , settingsAPI } from '../../services/api'\nimport { \n  MagnifyingGlassIcon, \n  QrCodeIcon,\n  CheckCircleIcon,\n  XCircleIcon,\n  EyeIcon,\n  PrinterIcon,\n  KeyIcon\n} from '@heroicons/react/24/outline'\nimport toast from 'react-hot-toast'\nimport { useSearchParams } from 'react-router-dom'\nimport InvoiceRenderer from '../../components/InvoiceRender'\n\nfunction OrdersPage() {\n  const { socket, updateOrderStatus: socketUpdateOrderStatus } = useSocket()\n  const [orders, setOrders] = useState([])\n  const [filteredOrders, setFilteredOrders] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [filters, setFilters] = useState({\n    status: '',\n    table: '',\n    search: ''\n  })\n  const [searchInput, setSearchInput] = useState('')\n  const [showOrderModal, setShowOrderModal] = useState(false)\n  const [selectedOrder, setSelectedOrder] = useState(null)\n  const [searchParams, setSearchParams] = useSearchParams()\n  const [showInvoiceModal, setShowInvoiceModal] = useState(false)\n  const [selectedTemplate, setSelectedTemplate] = useState('default')\n  const [businessInfo, setBusinessInfo] = useState(null)\n  const [loadingBusinessInfo, setLoadingBusinessInfo] = useState(true)\n\n  console.log('OrdersPage render with orders:', selectedOrder)\n\n  useEffect(() => {\n    loadOrders()\n    loadBusinessInfo()\n    \n    // Check for URL parameters to show modal directly\n    const orderSearchQuery = searchParams.get('orderSearchQuery')\n    if (orderSearchQuery) {\n      handleSearchByCodeOrPin(orderSearchQuery)\n    }\n  }, [])\n\n  useEffect(() => {\n    applyFilters()\n  }, [orders, filters])\n\n  const loadOrders = async () => {\n    try {\n      setLoading(true)\n      const response = await ordersAPI.getOrders({ \n        branchId: 1,\n        limit: 100 \n      })\n      \n      if (response.data.success) {\n        setOrders(response.data.orders)\n      } else {\n        toast.error('Failed to load orders')\n      }\n    } catch (error) {\n      toast.error('Failed to load orders')\n      console.error('Orders load error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\nconst loadBusinessInfo = async () => {\n  try {\n    setLoadingBusinessInfo(true)\n    \n    // Fetch from both APIs\n    const [appSettingsResponse, settingsResponse] = await Promise.all([\n      appSettingsAPI.getSettings(),\n      settingsAPI.getSettings()\n    ]);\n\n    let businessData = {\n      name: 'Restaurant',\n      description: 'Modern Restaurant Management System',\n      currency: 'MAD',\n      taxRate: 0,\n      serviceCharge: 0,\n      welcomeMessage: 'Thank you for your business!',\n      address: '',\n      phone: '',\n      email: '',\n      logoUrl: '',\n      primaryColor: '#3B82F6',\n      secondaryColor: '#1E40AF'\n    };\n\n    // Process app settings API response\n    if (appSettingsResponse.data && appSettingsResponse.data.settings) {\n      const appSettings = appSettingsResponse.data.settings;\n      \nconsole.log('🟠 App settings fetched:', appSettings);\n      // Helper function to safely extract value\n      const getValue = (setting) => {\n        if (!setting) return '';\n        return typeof setting === 'object' && setting !== null && 'value' in setting \n          ? setting.value \n          : setting;\n      };\n\n      businessData = {\n        ...businessData,\n        name: getValue(appSettings.app_name) || getValue(appSettings.name) || businessData.name,\n        description: getValue(appSettings.app_description) || getValue(appSettings.description) || businessData.description,\n        currency: getValue(appSettings.currency) || businessData.currency,\n        taxRate: parseFloat(getValue(appSettings.tax_rate)) || businessData.taxRate,\n        serviceCharge: parseFloat(getValue(appSettings.service_charge)) || businessData.serviceCharge,\n        welcomeMessage: getValue(appSettings.welcome_message) || businessData.welcomeMessage,\n        address: getValue(appSettings.restaurant_address) || businessData.address,\n        phone: getValue(appSettings.restaurant_phone) || businessData.phone,\n        email: getValue(appSettings.restaurant_email) || businessData.email,\n        logoUrl: appSettings.logo_url.value || businessData.logoUrl,\n        primaryColor: getValue(appSettings.primary_color) || businessData.primaryColor,\n        secondaryColor: getValue(appSettings.secondary_color) || businessData.secondaryColor\n      };\n    }\n\n    // Process settings API response (overrides app settings with more specific values)\n    if (settingsResponse.data && settingsResponse.data.settings) {\n      const settings = settingsResponse.data.settings;\n      \n      // Find specific settings by key\n  \n      console.log('🟠 Settings fetched:', settings);\n      businessData = {\n        ...businessData,\n        name: settings.restaurant_name || businessData.name,\n        currency: settings.currency || businessData.currency,\n        taxRate: parseFloat(settings.tax_rate) || businessData.taxRate,\n        serviceCharge: parseFloat(settings.service_charge_rate) || businessData.serviceCharge,\n      };\n    }\n\n    setBusinessInfo(businessData);\n    console.log('Business info loaded:', businessData);\n    \n  } catch (error) {\n    console.error('Failed to load business info:', error);\n    // Set default business info if API fails\n    setBusinessInfo({\n      name: 'Restaurant',\n      description: 'Modern Restaurant Management System',\n      currency: 'MAD',\n      taxRate: 0,\n      serviceCharge: 0,\n      welcomeMessage: 'Thank you for your business!',\n      address: '',\n      phone: '',\n      email: '',\n      logoUrl: '',\n      primaryColor: '#3B82F6',\n      secondaryColor: '#1E40AF'\n    });\n  } finally {\n    setLoadingBusinessInfo(false);\n  }\n};\n  const applyFilters = () => {\n    let filtered = [...orders]\n\n    if (filters.status) {\n      filtered = filtered.filter(order => order.status === filters.status)\n    }\n\n    if (filters.table) {\n      filtered = filtered.filter(order => \n        order.table_number && order.table_number.toLowerCase().includes(filters.table.toLowerCase())\n      )\n    }\n\n    if (filters.search) {\n      filtered = filtered.filter(order => \n        order.order_code.toLowerCase().includes(filters.search.toLowerCase()) ||\n        (order.customer_name && order.customer_name.toLowerCase().includes(filters.search.toLowerCase())) ||\n        (order.pin && order.pin.includes(filters.search))\n      )\n    }\n\n    setFilteredOrders(filtered)\n  }\n\n  const handleSearchByCodeOrPin = async (searchValue) => {\n    if (!searchValue.trim()) {\n      toast.error('Please enter an order code or PIN')\n      return\n    }\n\n    try {\n      // Check if it's a PIN (8 digits) or order code\n      const isPin = /^\\d{8}$/.test(searchValue.trim());\n      \n      if (isPin) {\n        // Search by PIN using the internal search endpoint (requires auth)\n        const pinResponse = await ordersAPI.searchOrderByPin(searchValue.trim())\n        if (pinResponse.data && pinResponse.data.order) {\n          setSelectedOrder(pinResponse.data.order)\n          setShowOrderModal(true)\n          setSearchParams({ orderSearchQuery: searchValue.trim() })\n          return\n        }\n      } else {\n        // Search by order code\n        const response = await ordersAPI.getOrderByCode(searchValue.trim())\n        if (response.data && response.data.order) {\n          setSelectedOrder(response.data.order)\n          setShowOrderModal(true)\n          setSearchParams({ orderSearchQuery: searchValue.trim() })\n          return\n        }\n      }\n      \n      toast.error('Order not found with the provided code or PIN')\n    } catch (error) {\n      toast.error('Order not found with the provided code or PIN')\n      console.error('Order search error:', error)\n    }\n  }\n\n  const handlePaymentConfirmation = async (order) => {\n    try {\n      const newStatus = order.payment_status === 'PAID' ? 'UNPAID' : 'PAID'\n      \n      await ordersAPI.updatePayment(order.id, {\n        paymentStatus: newStatus,\n        paymentMethod: order.payment_method || 'cash'\n      })\n\n      // Update local state\n      setOrders(prev => prev.map(o => \n        o.id === order.id \n          ? { ...o, payment_status: newStatus, status: newStatus === 'PAID' ? 'CONFIRMED' : o.status }\n          : o\n      ))\n\n      // Update selected order in modal\n      if (selectedOrder && selectedOrder.id === order.id) {\n        setSelectedOrder(prev => ({\n          ...prev,\n          payment_status: newStatus,\n          status: newStatus === 'PAID' ? 'CONFIRMED' : prev.status\n        }))\n      }\n\n      if (newStatus === 'PAID') {\n        // Send to kitchen via Socket.IO when payment is confirmed\n        if (socket) {\n          socket.emit('order.paid', {\n            orderId: order.id,\n            branchId: order.branch_id,\n            orderCode: order.order_code\n          })\n        }\n        toast.success('Payment confirmed! Order sent to kitchen')\n      } else {\n        toast.success('Payment status updated')\n      }\n\n      loadOrders()\n    } catch (error) {\n      toast.error('Failed to update payment status')\n      console.error('Payment update error:', error)\n    }\n  }\n\n  const handleStatusUpdate = async (orderId, newStatus) => {\n    try {\n      await ordersAPI.updateOrderStatus(orderId, newStatus)\n      \n      // Update local state\n      setOrders(prev => prev.map(o => \n        o.id === orderId ? { ...o, status: newStatus } : o\n      ))\n      \n      // Update selected order in modal\n      if (selectedOrder && selectedOrder.id === orderId) {\n        setSelectedOrder(prev => ({\n          ...prev,\n          status: newStatus\n        }))\n      }\n      \n      // Send status update via Socket.IO for real-time updates\n      if (socketUpdateOrderStatus) {\n        socketUpdateOrderStatus(orderId, newStatus)\n      } else if (socket) {\n        socket.emit('order.updated', { orderId, status: newStatus })\n      }\n      \n      toast.success(`Order status updated to ${newStatus}`)\n      loadOrders()\n    } catch (error) {\n      toast.error('Failed to update order status')\n      console.error('Status update error:', error)\n    }\n  }\n\n  const handlePrintInvoice = (order) => {\n    setSelectedOrder(order)\n    setShowInvoiceModal(true)\n  }\n\n  const closeModal = () => {\n    setShowOrderModal(false)\n    setSelectedOrder(null)\n    // Remove search query from URL when closing modal\n    setSearchParams({})\n  }\n\n  const closeInvoiceModal = () => {\n    setShowInvoiceModal(false)\n    setSelectedOrder(null)\n  }\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'PENDING': return 'bg-yellow-100 text-yellow-800'\n      case 'CONFIRMED': return 'bg-blue-100 text-blue-800'\n      case 'PREPARING': return 'bg-orange-100 text-orange-800'\n      case 'READY': return 'bg-green-100 text-green-800'\n      case 'SERVED': return 'bg-purple-100 text-purple-800'\n      case 'COMPLETED': return 'bg-gray-100 text-gray-800'\n      case 'CANCELLED': return 'bg-red-100 text-red-800'\n      default: return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  const getPaymentStatusColor = (status) => {\n    switch (status) {\n      case 'PAID': return 'bg-green-100 text-green-800'\n      case 'PARTIAL': return 'bg-yellow-100 text-yellow-800'\n      case 'UNPAID': return 'bg-red-100 text-red-800'\n      default: return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    })\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"text-center\">\n          <div className=\"loading-spinner mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading orders...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Orders</h1>\n          <p className=\"text-gray-600\">Manage customer orders and status</p>\n        </div>\n        <button\n          onClick={loadOrders}\n          className=\"btn-outline rounded-lg px-4 py-2 flex items-center gap-2\"\n        >\n          Refresh\n        </button>\n      </div>\n\n      {/* Quick Search by Order Code or PIN */}\n      <div className=\"card bg-gradient-to-r from-blue-50 to-purple-50\">\n        <div className=\"card-body\">\n          <h3 className=\"font-semibold text-gray-900 mb-4 flex items-center gap-2\">\n            <QrCodeIcon className=\"h-5 w-5\" />\n            Quick Order Search\n          </h3>\n          <p className=\"text-sm text-gray-600 mb-4\">\n            Enter order code or PIN manually, or use a QR scanner device/app to scan the payment QR code\n          </p>\n          <div className=\"flex gap-3\">\n            <div className=\"relative flex-1\">\n              <MagnifyingGlassIcon className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n              <input\n                type=\"text\"\n                value={searchInput}\n                onChange={(e) => setSearchInput(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handleSearchByCodeOrPin(searchInput)}\n                placeholder=\"Enter order code or PIN (e.g., CAS-20251028-0002 or 69709299)\"\n                className=\"form-input pl-10\"\n              />\n            </div>\n            <button\n              onClick={() => handleSearchByCodeOrPin(searchInput)}\n              className=\"btn-primary px-8 whitespace-nowrap rounded-lg flex items-center justify-center \"\n            >\n              <MagnifyingGlassIcon className=\"h-5 w-5 mr-2\" />\n              Search Order\n            </button>\n          </div>\n          <div className=\"mt-3 flex items-center gap-2 text-sm text-gray-500\">\n            <KeyIcon className=\"h-4 w-4\" />\n            <span>You can search by order code (CAS-20251028-0002) or PIN (69709299)</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"card\">\n        <div className=\"card-body\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div>\n              <label className=\"form-label\">Filter by Code/Customer/PIN</label>\n              <div className=\"relative\">\n                <MagnifyingGlassIcon className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <input\n                  type=\"text\"\n                  value={filters.search}\n                  onChange={(e) => setFilters(prev => ({ ...prev, search: e.target.value }))}\n                  placeholder=\"Order code, customer name, or PIN\"\n                  className=\"form-input pl-10\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label className=\"form-label\">Status</label>\n              <select\n                value={filters.status}\n                onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value }))}\n                className=\"form-input\"\n              >\n                <option value=\"\">All Statuses</option>\n                <option value=\"PENDING\">Pending</option>\n                <option value=\"CONFIRMED\">Confirmed</option>\n                <option value=\"PREPARING\">Preparing</option>\n                <option value=\"READY\">Ready</option>\n                <option value=\"SERVED\">Served</option>\n                <option value=\"COMPLETED\">Completed</option>\n                <option value=\"CANCELLED\">Cancelled</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"form-label\">Table</label>\n              <input\n                type=\"text\"\n                value={filters.table}\n                onChange={(e) => setFilters(prev => ({ ...prev, table: e.target.value }))}\n                placeholder=\"Table number\"\n                className=\"form-input\"\n              />\n            </div>\n\n            <div className=\"flex items-end\">\n              <button\n                onClick={() => setFilters({ status: '', table: '', search: '' })}\n                className=\"btn-outline w-full rounded-lg h-10\"\n              >\n                Clear Filters\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Orders Table */}\n      <div className=\"card\">\n        <div className=\"card-body\">\n          {filteredOrders.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-gray-500\">No orders found</p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Order\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Table\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Customer\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Total\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Payment\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Status\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Time\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Actions\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {filteredOrders.map((order) => (\n                    <tr key={order.id} className=\"hover:bg-gray-50\">\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"text-sm font-medium text-gray-900\">{order.order_code}</div>\n                        <div className=\"text-sm text-gray-500\">PIN: {order.pin}</div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {order.table_number || '-'}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {order.customer_name || '-'}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm font-semibold text-gray-900\">\n                        {order.total?.toFixed(2)} MAD\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <button\n                          onClick={() => handlePaymentConfirmation(order)}\n                          className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium transition-colors ${\n                            order.payment_status === 'PAID'\n                              ? 'bg-green-100 text-green-800 hover:bg-green-200'\n                              : 'bg-red-100 text-red-800 hover:bg-red-200'\n                          }`}\n                          title=\"Click to toggle payment status\"\n                        >\n                          {order.payment_status === 'PAID' ? (\n                            <>\n                              <CheckCircleIcon className=\"h-3 w-3 mr-1\" />\n                              PAID\n                            </>\n                          ) : (\n                            <>\n                              <XCircleIcon className=\"h-3 w-3 mr-1\" />\n                              UNPAID\n                            </>\n                          )}\n                        </button>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <select\n                          value={order.status}\n                          onChange={(e) => handleStatusUpdate(order.id, e.target.value)}\n                          className={`text-xs font-medium rounded-full px-3 py-1 border-0 ${getStatusColor(order.status)}`}\n                        >\n                          <option value=\"PENDING\">PENDING</option>\n                          <option value=\"CONFIRMED\">CONFIRMED</option>\n                          <option value=\"PREPARING\">PREPARING</option>\n                          <option value=\"READY\">READY</option>\n                          <option value=\"SERVED\">SERVED</option>\n                          <option value=\"COMPLETED\">COMPLETED</option>\n                          <option value=\"CANCELLED\">CANCELLED</option>\n                        </select>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {new Date(order.created_at).toLocaleTimeString()}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2\">\n                        <button\n                          onClick={() => {\n                            setSelectedOrder(order)\n                            setShowOrderModal(true)\n                          }}\n                          className=\"text-blue-600 hover:text-blue-900\"\n                          title=\"View Order Details\"\n                        >\n                          <EyeIcon className=\"h-5 w-5\" />\n                        </button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Order Details Modal */}\n      {showOrderModal && selectedOrder && (\n        <div className=\"fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n          <div className=\"bg-white rounded-3xl max-w-4xl w-full max-h-[90vh] overflow-y-auto shadow-2xl\">\n            <div className=\"p-8\">\n              {/* Header */}\n              <div className=\"flex justify-between items-start mb-6\">\n                <div>\n                  <h2 className=\"text-2xl font-bold text-gray-900\">Order Details</h2>\n                  <p className=\"text-gray-600\">Order #{selectedOrder.order_code}</p>\n                </div>\n                <button\n                  onClick={closeModal}\n                  className=\"text-gray-400 hover:text-gray-600 text-2xl\"\n                >\n                  ✕\n                </button>\n              </div>\n\n              {/* Order Information Grid */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n                <div className=\"bg-gray-50 rounded-xl p-4\">\n                  <p className=\"text-sm text-gray-600\">Customer Name</p>\n                  <p className=\"font-semibold text-lg\">{selectedOrder.customer_name || 'No Name'}</p>\n                </div>\n                \n                <div className=\"bg-gray-50 rounded-xl p-4\">\n                  <p className=\"text-sm text-gray-600\">Table Number</p>\n                  <p className=\"font-semibold text-lg\">{selectedOrder.table_number || 'No Table'}</p>\n                </div>\n                \n                <div className=\"bg-gray-50 rounded-xl p-4\">\n                  <p className=\"text-sm text-gray-600\">Order PIN</p>\n                  <p className=\"font-semibold text-lg font-mono\">{selectedOrder.pin || 'No PIN'}</p>\n                </div>\n                \n                <div className=\"bg-gray-50 rounded-xl p-4\">\n                  <p className=\"text-sm text-gray-600\">Branch</p>\n                  <p className=\"font-semibold\">{selectedOrder.branch_name || 'Unknown Branch'}</p>\n                </div>\n              </div>\n\n              {/* Status and Payment Grid */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n                <div className=\"bg-gray-50 rounded-xl p-4\">\n                  <p className=\"text-sm text-gray-600\">Payment Status</p>\n                  <div className=\"flex items-center gap-2 mt-1\">\n                    <span className={`badge ${getPaymentStatusColor(selectedOrder.payment_status)} text-lg`}>\n                      {selectedOrder.payment_status}\n                    </span>\n                    <span className=\"text-sm text-gray-600 capitalize\">\n                      ({selectedOrder.payment_method || 'cash'})\n                    </span>\n                  </div>\n                </div>\n                \n                <div className=\"bg-gray-50 rounded-xl p-4\">\n                  <p className=\"text-sm text-gray-600\">Order Status</p>\n                  <div className=\"mt-1\">\n                    <select\n                      value={selectedOrder.status}\n                      onChange={(e) => handleStatusUpdate(selectedOrder.id, e.target.value)}\n                      className={`text-sm font-medium rounded-full px-4 py-2 border-0 w-full ${getStatusColor(selectedOrder.status)}`}\n                    >\n                      <option value=\"PENDING\">PENDING</option>\n                      <option value=\"CONFIRMED\">CONFIRMED</option>\n                      <option value=\"PREPARING\">PREPARING</option>\n                      <option value=\"READY\">READY</option>\n                      <option value=\"SERVED\">SERVED</option>\n                      <option value=\"COMPLETED\">COMPLETED</option>\n                      <option value=\"CANCELLED\">CANCELLED</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n\n              {/* Timestamps */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n                <div className=\"bg-gray-50 rounded-xl p-4\">\n                  <p className=\"text-sm text-gray-600\">Order Created</p>\n                  <p className=\"font-semibold\">{formatDate(selectedOrder.created_at)}</p>\n                </div>\n                \n                <div className=\"bg-gray-50 rounded-xl p-4\">\n                  <p className=\"text-sm text-gray-600\">Last Updated</p>\n                  <p className=\"font-semibold\">{formatDate(selectedOrder.updated_at)}</p>\n                </div>\n              </div>\n\n              {/* Financial Breakdown */}\n              <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-6 mb-6\">\n                <h3 className=\"font-bold text-gray-900 mb-4 text-lg\">Financial Breakdown</h3>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-600\">Subtotal</p>\n                    <p className=\"text-lg font-semibold\">{selectedOrder.total - selectedOrder.tax - selectedOrder.service_charge || 0} MAD</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-600\">Tax</p>\n                    <p className=\"text-lg font-semibold\">{selectedOrder.tax?.toFixed(2) || '0.00'} MAD</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-600\">Service Charge</p>\n                    <p className=\"text-lg font-semibold\">{selectedOrder.service_charge?.toFixed(2) || '0.00'} MAD</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-600\">Total Amount</p>\n                    <p className=\"text-2xl font-bold text-blue-600\">{selectedOrder.total?.toFixed(2) || '0.00'} MAD</p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Order Items */}\n              {selectedOrder.items && selectedOrder.items.length > 0 && (\n                <div className=\"mb-6\">\n                  <h3 className=\"font-bold text-gray-900 mb-4 text-lg\">Order Items</h3>\n                  <div className=\"space-y-3\">\n                    {selectedOrder.items.map((item, index) => (\n                      <div key={index} className=\"bg-white border border-gray-200 rounded-xl p-4\">\n                        <div className=\"flex justify-between items-start\">\n                          <div className=\"flex-1\">\n                            <p className=\"font-semibold text-gray-900\">\n                              {item.menu_item_name || item.item_name || `Item ${index + 1}`}\n                            </p>\n                            <p className=\"text-sm text-gray-600 mt-1\">\n                              Quantity: {item.quantity} × {item.unit_price?.toFixed(2)} MAD\n                            </p>\n                            {item.note && (\n                              <p className=\"text-sm text-gray-500 mt-1\">\n                                Note: {item.note}\n                              </p>\n                            )}\n                            {item.modifiers && item.modifiers.length > 0 && (\n                              <div className=\"mt-2\">\n                                <p className=\"text-sm text-gray-600 font-medium\">Modifiers:</p>\n                                <div className=\"flex flex-wrap gap-1 mt-1\">\n                                  {item.modifiers.map((modifier, modIndex) => (\n                                    <span key={modIndex} className=\"text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded\">\n                                      {modifier.name} (+{modifier.extra_price} MAD)\n                                    </span>\n                                  ))}\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"text-lg font-bold text-gray-900\">\n                              {((item.unit_price * item.quantity) + (item.modifiers?.reduce((sum, mod) => sum + mod.extra_price, 0) * item.quantity || 0)).toFixed(2)} MAD\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Actions */}\n              <div className=\"flex gap-3 pt-6 border-t border-gray-200\">\n                <button\n                  onClick={() => handlePaymentConfirmation(selectedOrder)}\n                  className={`flex-1 py-3 px-6 rounded-xl font-semibold transition-colors ${\n                    selectedOrder.payment_status === 'PAID'\n                      ? 'bg-red-100 text-red-700 hover:bg-red-200'\n                      : 'bg-green-600 text-white hover:bg-green-700'\n                  }`}\n                >\n                  {selectedOrder.payment_status === 'PAID' ? 'Mark as Unpaid' : 'Confirm Payment'}\n                </button>\n                \n                <button\n                  onClick={() => handlePrintInvoice(selectedOrder)}\n                  className=\"flex items-center justify-center gap-2 py-3 px-6 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-xl transition-colors\"\n                >\n                  <PrinterIcon className=\"h-5 w-5\" />\n                  Print Invoice\n                </button>\n                \n                <button\n                  onClick={closeModal}\n                  className=\"flex-1 py-3 px-6 bg-gray-100 hover:bg-gray-200 text-gray-700 font-semibold rounded-xl transition-colors\"\n                >\n                  Close\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Invoice Modal */}\n      {showInvoiceModal && selectedOrder && businessInfo && (\n        <InvoiceRenderer\n          order={selectedOrder}\n          template={selectedTemplate}\n          businessInfo={businessInfo}\n          onClose={closeInvoiceModal}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default OrdersPage","size_bytes":32497},"frontend/tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nexport default {\n  content: [\n    \"./index.html\",\n    \"./src/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {\n      colors: {\n        primary: {\n          50: '#f0f9ff',\n          100: '#e0f2fe',\n          200: '#bae6fd',\n          300: '#7dd3fc',\n          400: '#38bdf8',\n          500: '#0ea5e9',\n          600: '#0284c7',\n          700: '#0369a1',\n          800: '#075985',\n          900: '#0c4a6e',\n        },\n        secondary: {\n          50: '#f8fafc',\n          100: '#f1f5f9',\n          200: '#e2e8f0',\n          300: '#cbd5e1',\n          400: '#94a3b8',\n          500: '#64748b',\n          600: '#475569',\n          700: '#334155',\n          800: '#1e293b',\n          900: '#0f172a',\n        },\n        accent: {\n          50: '#fdf4ff',\n          100: '#fae8ff',\n          200: '#f5d0fe',\n          300: '#f0abfc',\n          400: '#e879f9',\n          500: '#d946ef',\n          600: '#c026d3',\n          700: '#a21caf',\n          800: '#86198f',\n          900: '#701a75',\n        }\n      },\n      fontFamily: {\n        sans: ['Inter', 'system-ui', 'sans-serif'],\n      },\n      animation: {\n        'fade-in': 'fadeIn 0.5s ease-in-out',\n        'slide-up': 'slideUp 0.3s ease-out',\n        'slide-down': 'slideDown 0.3s ease-out',\n        'slide-left': 'slideLeft 0.3s ease-out',\n        'slide-right': 'slideRight 0.3s ease-out',\n        'bounce-subtle': 'bounceSubtle 0.6s ease-in-out',\n        'bounce-slow': 'bounce 2s infinite',\n        'pulse-slow': 'pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite',\n        'spin-slow': 'spin 3s linear infinite',\n        'gradient-shift': 'gradientShift 15s ease infinite',\n        'float': 'float 6s ease-in-out infinite',\n        'glow': 'glow 2s ease-in-out infinite alternate',\n      },\n      keyframes: {\n        fadeIn: {\n          '0%': { opacity: '0' },\n          '100%': { opacity: '1' },\n        },\n        slideUp: {\n          '0%': { transform: 'translateY(10px)', opacity: '0' },\n          '100%': { transform: 'translateY(0)', opacity: '1' },\n        },\n        slideDown: {\n          '0%': { transform: 'translateY(-10px)', opacity: '0' },\n          '100%': { transform: 'translateY(0)', opacity: '1' },\n        },\n        slideLeft: {\n          '0%': { transform: 'translateX(10px)', opacity: '0' },\n          '100%': { transform: 'translateX(0)', opacity: '1' },\n        },\n        slideRight: {\n          '0%': { transform: 'translateX(-10px)', opacity: '0' },\n          '100%': { transform: 'translateX(0)', opacity: '1' },\n        },\n        bounceSubtle: {\n          '0%, 100%': { transform: 'translateY(0)' },\n          '50%': { transform: 'translateY(-5px)' },\n        },\n        gradientShift: {\n          '0%': { backgroundPosition: '0% 50%' },\n          '50%': { backgroundPosition: '100% 50%' },\n          '100%': { backgroundPosition: '0% 50%' },\n        },\n        float: {\n          '0%, 100%': { transform: 'translateY(0px)' },\n          '50%': { transform: 'translateY(-20px)' },\n        },\n        glow: {\n          '0%': { boxShadow: '0 0 5px rgba(59, 130, 246, 0.5)' },\n          '100%': { boxShadow: '0 0 20px rgba(59, 130, 246, 0.8)' },\n        },\n      },\n      backgroundImage: {\n        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',\n        'gradient-conic': 'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',\n        'hero-pattern': \"url('data:image/svg+xml,%3Csvg width=\\\"60\\\" height=\\\"60\\\" viewBox=\\\"0 0 60 60\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"%3E%3Cg fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"%3E%3Cg fill=\\\"%239C92AC\\\" fill-opacity=\\\"0.1\\\"%3E%3Ccircle cx=\\\"30\\\" cy=\\\"30\\\" r=\\\"4\\\"/%3E%3C/g%3E%3C/g%3E%3C/svg%3E')\",\n      },\n      backdropBlur: {\n        xs: '2px',\n      },\n      boxShadow: {\n        'inner-lg': 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.1)',\n        'glow': '0 0 20px rgba(59, 130, 246, 0.3)',\n        'glow-lg': '0 0 40px rgba(59, 130, 246, 0.4)',\n      },\n      spacing: {\n        '18': '4.5rem',\n        '88': '22rem',\n        '128': '32rem',\n      },\n      borderRadius: {\n        '4xl': '2rem',\n        '5xl': '2.5rem',\n      },\n      scale: {\n        '102': '1.02',\n        '103': '1.03',\n      },\n    },\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    require('@tailwindcss/typography'),\n  ],\n}","size_bytes":4297},"server/src/middlewares/auth.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\n\ntype Role = 'admin' | 'manager' | 'cashier' | 'kitchen' | 'waiter';\n\nexport interface AuthUser {\n  id: number;\n  username: string;\n  role: Role;\n}\n\nexport function authenticate(req: Request, res: Response, next: NextFunction) {\n  const header = req.headers['authorization'];\n  const token = header?.split(' ')[1];\n  if (!token) return res.status(401).json({ error: 'Unauthorized' });\n  try {\n    const payload = jwt.verify(token, process.env.JWT_SECRET || 'devsecretchange') as AuthUser;\n    (req as any).user = payload;\n    next();\n  } catch (e) {\n    return res.status(401).json({ error: 'Invalid token' });\n  }\n}\n\nexport function authorize(roles: Role[]) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const user = (req as any).user as AuthUser | undefined;\n    if (!user) return res.status(401).json({ error: 'Unauthorized' });\n    if (!roles.includes(user.role)) return res.status(403).json({ error: 'Forbidden' });\n    next();\n  };\n}\n","size_bytes":1055},"server/src/routes/modules/orders.ts":{"content":"import { Router } from 'express';\nimport db from '../../utils/db';\nimport { authenticate } from '../../middlewares/auth';\n\nconst router = Router();\n\nrouter.post('/', async (req, res) => {\n  const { branchId, tableId, customerName, items, paymentMethod, clientMeta } = req.body;\n  let trx = await db.transaction();\n  try {\n    const [{ cnt }] = await trx('orders').count<{ cnt: number }>('id as cnt');\n    const orderCode = `${process.env.BRANCH_CODE || 'BR'}-${new Date().toISOString().slice(0,10).replace(/-/g,'')}-${String(Number(cnt) + 1).padStart(4, '0')}`;\n\n    const [orderId] = await trx('orders').insert({\n      branch_id: branchId,\n      order_code: orderCode,\n      table_id: tableId,\n      customer_name: customerName,\n      status: 'SUBMITTED',\n      payment_status: paymentMethod === 'CARD' ? 'PENDING' : 'UNPAID',\n      tax: 0,\n      service_charge: 0,\n      total: 0\n    });\n\n    let total = 0;\n    for (const it of items || []) {\n      const menu = await trx('menu_items').where({ id: it.menuItemId }).first();\n      if (!menu) throw new Error('Invalid menu item');\n      const unitPrice = menu.price;\n      const [orderItemId] = await trx('order_items').insert({\n        order_id: orderId,\n        menu_item_id: it.menuItemId,\n        quantity: it.quantity || 1,\n        unit_price: unitPrice,\n        note: it.note || null\n      });\n      total += unitPrice * (it.quantity || 1);\n\n      for (const mod of it.modifiers || []) {\n        const m = await trx('modifiers').where({ id: mod.modifierId }).first();\n        if (!m) continue;\n        await trx('order_item_modifier').insert({\n          order_item_id: orderItemId,\n          modifier_id: m.id,\n          extra_price: m.extra_price || 0\n        });\n        total += m.extra_price || 0;\n      }\n    }\n\n    await trx('orders').where({ id: orderId }).update({ total, updated_at: trx.fn.now() });\n    await trx.commit();\n\n    const io = (req.app as any).get('io');\n    const order = await db('orders').where({ id: orderId }).first();\n    io.to(`branch:${branchId}:kitchen`).emit('order.created', order);\n\n    const orderQr = `${process.env.FRONTEND_URL || 'http://localhost:5173'}/order/${orderId}`;\n    res.status(201).json({ orderId, orderCode, qr: orderQr, status: 'SUBMITTED' });\n  } catch (err: any) {\n    if (trx) await trx.rollback();\n    res.status(500).json({ error: 'Failed to create order', details: err.message });\n  }\n});\n\nrouter.get('/', authenticate, async (req, res) => {\n  const status = String(req.query.status || '');\n  const branchId = req.query.branchId ? Number(req.query.branchId) : undefined;\n  let q = db('orders').select('*').orderBy('created_at', 'desc');\n  if (status) q = q.where('status', status);\n  if (branchId) q = q.where('branch_id', branchId);\n  const orders = await q;\n  res.json(orders);\n});\n\nrouter.get('/:id', authenticate, async (req, res) => {\n  const id = Number(req.params.id);\n  const order = await db('orders').where({ id }).first();\n  if (!order) return res.status(404).json({ error: 'Not found' });\n  res.json(order);\n});\n\nrouter.patch('/:id/status', authenticate, async (req, res) => {\n  const id = Number(req.params.id);\n  const { status } = req.body;\n  const allowed = ['SUBMITTED','PENDING','CONFIRMED','PREPARING','READY','SERVED','PAID','COMPLETED','CANCELLED'];\n  if (!allowed.includes(status)) return res.status(400).json({ error: 'Invalid status' });\n  await db('orders').where({ id }).update({ status, updated_at: db.fn.now() });\n  const order = await db('orders').where({ id }).first();\n  const io = (req.app as any).get('io');\n  io.to(`branch:${order.branch_id}:kitchen`).emit('order.updated', order);\n  res.json(order);\n});\n\nexport default router;\n","size_bytes":3678},"frontend/src/postcss.config.js":{"content":"export default {\n    plugins: {\n      tailwindcss: {},\n      autoprefixer: {},\n    },\n  }","size_bytes":89},"frontend/src/main.jsx":{"content":"import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { BrowserRouter } from 'react-router-dom'\nimport { QueryClient, QueryClientProvider } from 'react-query'\nimport { Toaster } from 'react-hot-toast'\nimport App from './App.jsx'\nimport './index.css'\n\n// Create a client\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: 1,\n      refetchOnWindowFocus: false,\n      staleTime: 5 * 60 * 1000, // 5 minutes\n    },\n  },\n})\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <BrowserRouter>\n        <App />\n        <Toaster\n          position=\"top-right\"\n          toastOptions={{\n            duration: 4000,\n            style: {\n              background: '#363636',\n              color: '#fff',\n            },\n            success: {\n              duration: 3000,\n              iconTheme: {\n                primary: '#10b981',\n                secondary: '#fff',\n              },\n            },\n            error: {\n              duration: 5000,\n              iconTheme: {\n                primary: '#ef4444',\n                secondary: '#fff',\n              },\n            },\n          }}\n        />\n      </BrowserRouter>\n    </QueryClientProvider>\n  </React.StrictMode>,\n)","size_bytes":1307},"scripts/backup.sh":{"content":"#!/bin/bash\n\n# POSQ Database Backup Script\n# This script creates backups of the database\n\nset -e\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\nprint_status() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\n# Configuration\nBACKUP_DIR=\"./backups\"\nDATE=$(date +%Y%m%d_%H%M%S)\nDB_TYPE=${DB_TYPE:-sqlite}\nDB_PATH=${DB_PATH:-./data/posq.db}\n\n# Create backup directory if it doesn't exist\nmkdir -p \"$BACKUP_DIR\"\n\n# Function to backup SQLite database\nbackup_sqlite() {\n    print_status \"Backing up SQLite database...\"\n    \n    if [ ! -f \"$DB_PATH\" ]; then\n        print_error \"SQLite database not found at $DB_PATH\"\n        exit 1\n    fi\n    \n    BACKUP_FILE=\"$BACKUP_DIR/posq_sqlite_$DATE.db\"\n    cp \"$DB_PATH\" \"$BACKUP_FILE\"\n    \n    # Compress the backup\n    gzip \"$BACKUP_FILE\"\n    \n    print_success \"SQLite backup created: ${BACKUP_FILE}.gz\"\n}\n\n# Function to backup MySQL database\nbackup_mysql() {\n    print_status \"Backing up MySQL database...\"\n    \n    BACKUP_FILE=\"$BACKUP_DIR/posq_mysql_$DATE.sql\"\n    \n    mysqldump \\\n        --host=\"$DB_HOST\" \\\n        --port=\"$DB_PORT\" \\\n        --user=\"$DB_USER\" \\\n        --password=\"$DB_PASSWORD\" \\\n        --single-transaction \\\n        --routines \\\n        --triggers \\\n        \"$DB_NAME\" > \"$BACKUP_FILE\"\n    \n    # Compress the backup\n    gzip \"$BACKUP_FILE\"\n    \n    print_success \"MySQL backup created: ${BACKUP_FILE}.gz\"\n}\n\n# Function to backup PostgreSQL database\nbackup_postgresql() {\n    print_status \"Backing up PostgreSQL database...\"\n    \n    BACKUP_FILE=\"$BACKUP_DIR/posq_postgresql_$DATE.sql\"\n    \n    PGPASSWORD=\"$DB_PASSWORD\" pg_dump \\\n        --host=\"$DB_HOST\" \\\n        --port=\"$DB_PORT\" \\\n        --username=\"$DB_USER\" \\\n        --dbname=\"$DB_NAME\" \\\n        --verbose \\\n        --clean \\\n        --no-owner \\\n        --no-privileges > \"$BACKUP_FILE\"\n    \n    # Compress the backup\n    gzip \"$BACKUP_FILE\"\n    \n    print_success \"PostgreSQL backup created: ${BACKUP_FILE}.gz\"\n}\n\n# Function to cleanup old backups\ncleanup_old_backups() {\n    print_status \"Cleaning up old backups (keeping last 7 days)...\"\n    \n    find \"$BACKUP_DIR\" -name \"*.gz\" -type f -mtime +7 -delete\n    \n    print_success \"Old backups cleaned up\"\n}\n\n# Function to list backups\nlist_backups() {\n    print_status \"Available backups:\"\n    \n    if [ -d \"$BACKUP_DIR\" ] && [ \"$(ls -A \"$BACKUP_DIR\")\" ]; then\n        ls -lah \"$BACKUP_DIR\"/*.gz 2>/dev/null || echo \"No backups found\"\n    else\n        echo \"No backups found\"\n    fi\n}\n\n# Main function\nmain() {\n    echo \"==========================================\"\n    echo \"  POSQ Database Backup\"\n    echo \"==========================================\"\n    echo \"\"\n    \n    case \"$1\" in\n        \"sqlite\")\n            backup_sqlite\n            ;;\n        \"mysql\")\n            backup_mysql\n            ;;\n        \"postgresql\")\n            backup_postgresql\n            ;;\n        \"list\")\n            list_backups\n            exit 0\n            ;;\n        \"cleanup\")\n            cleanup_old_backups\n            exit 0\n            ;;\n        *)\n            # Auto-detect database type\n            case \"$DB_TYPE\" in\n                \"sqlite\"|\"sqlite3\")\n                    backup_sqlite\n                    ;;\n                \"mysql\")\n                    backup_mysql\n                    ;;\n                \"postgresql\"|\"pg\")\n                    backup_postgresql\n                    ;;\n                *)\n                    print_error \"Unknown database type: $DB_TYPE\"\n                    echo \"Usage: $0 [sqlite|mysql|postgresql|list|cleanup]\"\n                    exit 1\n                    ;;\n            esac\n            ;;\n    esac\n    \n    cleanup_old_backups\n    \n    echo \"\"\n    echo \"Backup completed successfully! 🎉\"\n}\n\n# Run main function\nmain \"$@\"","size_bytes":3919},"server/src/middleware/auth.js":{"content":"const jwt = require('jsonwebtoken');\nconst { db } = require('../database/init');\n\nconst authenticateToken = async (req, res, next) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ error: 'Access token required' });\n  }\n\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    const user = await db('users').where({ id: decoded.userId }).first();\n    \n    if (!user || !user.is_active) {\n      return res.status(401).json({ error: 'Invalid or inactive user' });\n    }\n\n    req.user = user;\n    next();\n  } catch (error) {\n    return res.status(403).json({ error: 'Invalid token' });\n  }\n};\n\nconst authorize = (...roles) => {\n  return (req, res, next) => {\n    if (!req.user) {\n      return res.status(401).json({ error: 'Authentication required' });\n    }\n\n    if (!roles.includes(req.user.role)) {\n      return res.status(403).json({ error: 'Insufficient permissions' });\n    }\n\n    next();\n  };\n};\n\nconst authenticatePin = async (req, res, next) => {\n  const { username, pin } = req.body;\n\n  if (!username || !pin) {\n    return res.status(400).json({ error: 'Username and PIN required' });\n  }\n\n  try {\n    const user = await db('users').where({ username, pin }).first();\n    \n    if (!user || !user.is_active) {\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n\n    req.user = user;\n    next();\n  } catch (error) {\n    return res.status(500).json({ error: 'Authentication failed' });\n  }\n};\n\nmodule.exports = {\n  authenticateToken,\n  authorize,\n  authenticatePin\n};","size_bytes":1626},"frontend/src/App.jsx":{"content":"import { Routes, Route } from 'react-router-dom'\nimport { AuthProvider } from './contexts/AuthContext'\nimport { SocketProvider } from './contexts/SocketContext'\nimport { CartProvider } from './contexts/CartContext'\nimport { ThemeProvider } from './contexts/ThemeContext'\n\n// Public routes (Customer PWA)\nimport MenuPage from './pages/customer/MenuPage'\nimport CartPage from './pages/customer/CartPage'\nimport CheckoutPage from './pages/customer/CheckoutPage'\nimport OrderStatusPage from './pages/customer/OrderStatusPage'\n\n// Protected routes (Admin Dashboard)\nimport LoginPage from './pages/admin/LoginPage'\nimport DashboardPage from './pages/admin/DashboardPage'\nimport MenuManagementPage from './pages/admin/MenuManagementPage'\nimport TableManagementPage from './pages/admin/TableManagementPage'\nimport OrdersPage from './pages/admin/OrdersPage'\nimport KitchenDisplayPage from './pages/admin/KitchenDisplayPage'\nimport CashierDashboard from './pages/admin/CashierDashboard'\nimport InventoryPage from './pages/admin/InventoryPage'\nimport ReportsPage from './pages/admin/ReportsPage'\nimport SettingsPage from './pages/admin/SettingsPage'\nimport EmployeesPage from './pages/admin/EmployeesPage'\n\n// Owner routes (Multi-tenant Management)\nimport OwnerDashboard from './pages/owner/OwnerDashboard'\nimport RestaurantForm from './pages/owner/RestaurantForm'\nimport RestaurantDetails from './pages/owner/RestaurantDetails'\nimport ActivityLogs from './pages/owner/ActivityLogs'\n\n// Layout components\nimport CustomerLayout from './components/layout/CustomerLayout'\nimport AdminLayout from './components/layout/AdminLayout'\nimport OwnerLayout from './components/layout/OwnerLayout'\nimport ProtectedRoute from './components/auth/ProtectedRoute'\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <AuthProvider>\n        <SocketProvider>\n          <CartProvider>\n            <Routes>\n            {/* Public Customer Routes */}\n            <Route path=\"/\" element={<CustomerLayout />}>\n              <Route index element={<MenuPage />} />\n              <Route path=\"menu\" element={<MenuPage />} />\n              <Route path=\"cart\" element={<CartPage />} />\n              <Route path=\"checkout\" element={<CheckoutPage />} />\n              <Route path=\"order/:orderId\" element={<OrderStatusPage />} />\n              <Route path=\"order-status\" element={<OrderStatusPage />} />\n            </Route>\n\n            {/* Admin Authentication */}\n            <Route path=\"/admin/login\" element={<LoginPage />} />\n\n            {/* Protected Admin Routes */}\n            <Route path=\"/admin\" element={\n              <ProtectedRoute>\n                <AdminLayout />\n              </ProtectedRoute>\n            }>\n              <Route index element={<DashboardPage />} />\n              <Route path=\"dashboard\" element={<DashboardPage />} />\n              <Route path=\"menu\" element={<MenuManagementPage />} />\n              <Route path=\"tables\" element={<TableManagementPage />} />\n              <Route path=\"orders\" element={<OrdersPage />} />\n              <Route path=\"kitchen\" element={<KitchenDisplayPage />} />\n              <Route path=\"cashier\" element={<CashierDashboard />} />\n              <Route path=\"inventory\" element={<InventoryPage />} />\n              <Route path=\"employees\" element={<EmployeesPage />} />\n              <Route path=\"reports\" element={<ReportsPage />} />\n              <Route path=\"settings\" element={<SettingsPage />} />\n            </Route>\n\n            {/* Protected Owner Routes (Multi-tenant Management) */}\n            <Route path=\"/owner\" element={\n              <ProtectedRoute requiredRoles={['owner']}>\n                <OwnerLayout />\n              </ProtectedRoute>\n            }>\n              <Route index element={<OwnerDashboard />} />\n              <Route path=\"dashboard\" element={<OwnerDashboard />} />\n              <Route path=\"restaurants/new\" element={<RestaurantForm />} />\n              <Route path=\"restaurants/:id\" element={<RestaurantDetails />} />\n              <Route path=\"restaurants/:id/edit\" element={<RestaurantForm />} />\n              <Route path=\"logs\" element={<ActivityLogs />} />\n            </Route>\n\n            {/* Catch all route */}\n            <Route path=\"*\" element={\n              <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n                <div className=\"text-center\">\n                  <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">404</h1>\n                  <p className=\"text-gray-600 mb-8\">Page not found</p>\n                  <a \n                    href=\"/\" \n                    className=\"btn-primary\"\n                  >\n                    Go Home\n                  </a>\n                </div>\n              </div>\n            } />\n            </Routes>\n          </CartProvider>\n        </SocketProvider>\n      </AuthProvider>\n    </ThemeProvider>\n  )\n}\n\nexport default App","size_bytes":4886},"frontend/src/pages/admin/ReportsPage.jsx":{"content":"import { useState, useEffect } from 'react'\nimport { reportsAPI } from '../../services/api'\nimport { \n  ChartBarIcon, \n  DocumentArrowDownIcon,\n  DocumentArrowUpIcon,\n  CalendarIcon,\n  CurrencyDollarIcon,\n  ShoppingBagIcon\n} from '@heroicons/react/24/outline'\nimport toast from 'react-hot-toast'\n\nfunction ReportsPage() {\n  const [loading, setLoading] = useState(false)\n  const [dateRange, setDateRange] = useState({\n    startDate: new Date().toISOString().split('T')[0],\n    endDate: new Date().toISOString().split('T')[0]\n  })\n  const [reportData, setReportData] = useState({\n    dailySales: null,\n    salesRange: null,\n    topItems: null,\n    tableTurnover: null,\n    inventoryUsage: null,\n    paymentMethods: null,\n    cashReconciliation: null\n  })\n\n  useEffect(() => {\n    loadDailySales()\n  }, [])\n\n  const loadDailySales = async () => {\n    try {\n      setLoading(true)\n      const response = await reportsAPI.getDailySales({ \n        date: dateRange.startDate \n      })\n      if (response.data.success) {\n        setReportData(prev => ({ ...prev, dailySales: response.data.data }))\n      }\n    } catch (error) {\n      toast.error('Failed to load daily sales')\n      console.error('Daily sales error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const loadSalesRange = async () => {\n    try {\n      setLoading(true)\n      const response = await reportsAPI.getSalesRange({\n        startDate: dateRange.startDate,\n        endDate: dateRange.endDate\n      })\n      if (response.data.success) {\n        setReportData(prev => ({ ...prev, salesRange: response.data.data }))\n      }\n    } catch (error) {\n      toast.error('Failed to load sales range')\n      console.error('Sales range error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const loadTopItems = async () => {\n    try {\n      setLoading(true)\n      const response = await reportsAPI.getTopItems({\n        startDate: dateRange.startDate,\n        endDate: dateRange.endDate,\n        limit: 10\n      })\n      if (response.data.success) {\n        setReportData(prev => ({ ...prev, topItems: response.data.data }))\n      }\n    } catch (error) {\n      toast.error('Failed to load top items')\n      console.error('Top items error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const loadTableTurnover = async () => {\n    try {\n      setLoading(true)\n      const response = await reportsAPI.getTableTurnover({\n        startDate: dateRange.startDate,\n        endDate: dateRange.endDate\n      })\n      if (response.data.success) {\n        setReportData(prev => ({ ...prev, tableTurnover: response.data.data }))\n      }\n    } catch (error) {\n      toast.error('Failed to load table turnover')\n      console.error('Table turnover error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const loadInventoryUsage = async () => {\n    try {\n      setLoading(true)\n      const response = await reportsAPI.getInventoryUsage({\n        startDate: dateRange.startDate,\n        endDate: dateRange.endDate\n      })\n      if (response.data.success) {\n        setReportData(prev => ({ ...prev, inventoryUsage: response.data.data }))\n      }\n    } catch (error) {\n      toast.error('Failed to load inventory usage')\n      console.error('Inventory usage error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const loadPaymentMethods = async () => {\n    try {\n      setLoading(true)\n      const response = await reportsAPI.getPaymentMethods({\n        startDate: dateRange.startDate,\n        endDate: dateRange.endDate\n      })\n      if (response.data.success) {\n        setReportData(prev => ({ ...prev, paymentMethods: response.data.data }))\n      }\n    } catch (error) {\n      toast.error('Failed to load payment methods')\n      console.error('Payment methods error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const loadCashReconciliation = async () => {\n    try {\n      setLoading(true)\n      const response = await reportsAPI.getCashReconciliation({\n        startDate: dateRange.startDate,\n        endDate: dateRange.endDate\n      })\n      if (response.data.success) {\n        setReportData(prev => ({ ...prev, cashReconciliation: response.data.data }))\n      }\n    } catch (error) {\n      toast.error('Failed to load cash reconciliation')\n      console.error('Cash reconciliation error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const exportReport = async (reportType) => {\n    try {\n      setLoading(true)\n      const response = await reportsAPI.exportReport(reportType, {\n        startDate: dateRange.startDate,\n        endDate: dateRange.endDate\n      })\n      \n      // Create download link\n      const blob = new Blob([response.data], { \n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \n      })\n      const url = window.URL.createObjectURL(blob)\n      const link = document.createElement('a')\n      link.href = url\n      link.download = `${reportType}_report_${dateRange.startDate}_to_${dateRange.endDate}.xlsx`\n      document.body.appendChild(link)\n      link.click()\n      document.body.removeChild(link)\n      window.URL.revokeObjectURL(url)\n      \n      toast.success('Report exported successfully')\n    } catch (error) {\n      toast.error('Failed to export report')\n      console.error('Export error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleDateRangeChange = () => {\n    // Reload all reports with new date range\n    loadSalesRange()\n    loadTopItems()\n    loadTableTurnover()\n    loadInventoryUsage()\n    loadPaymentMethods()\n    loadCashReconciliation()\n  }\n\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat('en-MA', {\n      style: 'currency',\n      currency: 'MAD'\n    }).format(amount || 0)\n  }\n\n  const formatNumber = (number) => {\n    return new Intl.NumberFormat('en-MA').format(number || 0)\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold gradient-text\">Reports & Analytics</h1>\n          <p className=\"text-gray-600 mt-2\">View and export business reports</p>\n        </div>\n      </div>\n\n      {/* Date Range Selector */}\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">Date Range</h2>\n        </div>\n        <div className=\"card-body\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <CalendarIcon className=\"h-5 w-5 text-gray-400\" />\n              <label className=\"text-sm font-medium text-gray-700\">From:</label>\n              <input\n                type=\"date\"\n                value={dateRange.startDate}\n                onChange={(e) => setDateRange(prev => ({ ...prev, startDate: e.target.value }))}\n                className=\"form-input\"\n              />\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <label className=\"text-sm font-medium text-gray-700\">To:</label>\n              <input\n                type=\"date\"\n                value={dateRange.endDate}\n                onChange={(e) => setDateRange(prev => ({ ...prev, endDate: e.target.value }))}\n                className=\"form-input\"\n              />\n            </div>\n            <button\n              onClick={handleDateRangeChange}\n              className=\"btn-primary\"\n            >\n              Update Reports\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <div className=\"card\">\n          <div className=\"card-body text-center\">\n            <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n              <CurrencyDollarIcon className=\"h-6 w-6 text-blue-600\" />\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900\">\n              {formatCurrency(reportData.dailySales?.totalRevenue)}\n            </div>\n            <div className=\"text-sm text-gray-600\">Total Revenue</div>\n          </div>\n        </div>\n\n        <div className=\"card\">\n          <div className=\"card-body text-center\">\n            <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n              <ShoppingBagIcon className=\"h-6 w-6 text-green-600\" />\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900\">\n              {formatNumber(reportData.dailySales?.totalOrders)}\n            </div>\n            <div className=\"text-sm text-gray-600\">Total Orders</div>\n          </div>\n        </div>\n\n        <div className=\"card\">\n          <div className=\"card-body text-center\">\n            <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n              <ChartBarIcon className=\"h-6 w-6 text-purple-600\" />\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900\">\n              {formatCurrency(reportData.dailySales?.averageOrderValue)}\n            </div>\n            <div className=\"text-sm text-gray-600\">Avg Order Value</div>\n          </div>\n        </div>\n\n        <div className=\"card\">\n          <div className=\"card-body text-center\">\n            <div className=\"w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n              <DocumentArrowDownIcon className=\"h-6 w-6 text-orange-600\" />\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900\">\n              {formatNumber(reportData.dailySales?.totalItemsSold)}\n            </div>\n            <div className=\"text-sm text-gray-600\">Items Sold</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Reports Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Sales Report */}\n        <div className=\"card\">\n          <div className=\"card-header\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">Sales Report</h2>\n              <button\n                onClick={() => exportReport('sales')}\n                disabled={loading}\n                className=\"btn-outline btn-sm\"\n              >\n                <DocumentArrowDownIcon className=\"h-4 w-4 mr-1\" />\n                Export\n              </button>\n            </div>\n          </div>\n          <div className=\"card-body\">\n            <button\n              onClick={loadSalesRange}\n              disabled={loading}\n              className=\"w-full btn-primary mb-4\"\n            >\n              {loading ? 'Loading...' : 'Load Sales Data'}\n            </button>\n            \n            {reportData.salesRange && (\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Total Sales:</span>\n                  <span className=\"font-semibold\">{formatCurrency(reportData.salesRange.totalSales)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Orders:</span>\n                  <span className=\"font-semibold\">{formatNumber(reportData.salesRange.totalOrders)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Average Order:</span>\n                  <span className=\"font-semibold\">{formatCurrency(reportData.salesRange.averageOrder)}</span>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Top Items Report */}\n        <div className=\"card\">\n          <div className=\"card-header\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">Top Selling Items</h2>\n              <button\n                onClick={() => exportReport('items')}\n                disabled={loading}\n                className=\"btn-outline btn-sm\"\n              >\n                <DocumentArrowDownIcon className=\"h-4 w-4 mr-1\" />\n                Export\n              </button>\n            </div>\n          </div>\n          <div className=\"card-body\">\n            <button\n              onClick={loadTopItems}\n              disabled={loading}\n              className=\"w-full btn-primary mb-4\"\n            >\n              {loading ? 'Loading...' : 'Load Top Items'}\n            </button>\n            \n            {reportData.topItems && reportData.topItems.length > 0 && (\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-gray-200\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Rank\n                      </th>\n                      <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Item Name\n                      </th>\n                      <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Quantity Sold\n                      </th>\n                      <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Total Revenue\n                      </th>\n                      <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Avg Price\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\n                    {reportData.topItems.map((item, index) => (\n                      <tr key={index} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>\n                        <td className=\"px-4 py-3 whitespace-nowrap\">\n                          <span className={`inline-flex items-center justify-center w-6 h-6 rounded-full text-xs font-bold ${\n                            index === 0 ? 'bg-yellow-100 text-yellow-800' :\n                            index === 1 ? 'bg-gray-100 text-gray-800' :\n                            index === 2 ? 'bg-orange-100 text-orange-800' :\n                            'bg-blue-50 text-blue-700'\n                          }`}>\n                            {index + 1}\n                          </span>\n                        </td>\n                        <td className=\"px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900\">\n                          {item.name}\n                        </td>\n                        <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-900\">\n                          {formatNumber(item.quantitySold)}\n                        </td>\n                        <td className=\"px-4 py-3 whitespace-nowrap text-sm font-semibold text-green-600\">\n                          {formatCurrency(item.totalRevenue)}\n                        </td>\n                        <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-600\">\n                          {formatCurrency(item.totalRevenue / item.quantitySold)}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Table Turnover Report */}\n        <div className=\"card\">\n          <div className=\"card-header\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">Table Turnover</h2>\n              <button\n                onClick={() => exportReport('tables')}\n                disabled={loading}\n                className=\"btn-outline btn-sm\"\n              >\n                <DocumentArrowDownIcon className=\"h-4 w-4 mr-1\" />\n                Export\n              </button>\n            </div>\n          </div>\n          <div className=\"card-body\">\n            <button\n              onClick={loadTableTurnover}\n              disabled={loading}\n              className=\"w-full btn-primary mb-4\"\n            >\n              {loading ? 'Loading...' : 'Load Table Data'}\n            </button>\n            \n            {reportData.tableTurnover && (\n              <div className=\"space-y-4\">\n                {/* Summary Stats */}\n                <div className=\"grid grid-cols-3 gap-4 p-4 bg-gray-50 rounded-lg\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-blue-600\">{reportData.tableTurnover.length}</div>\n                    <div className=\"text-sm text-gray-600\">Total Tables</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-green-600\">\n                      {reportData.tableTurnover.reduce((sum, table) => sum + table.total_orders, 0)}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">Total Orders</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-purple-600\">\n                      ${reportData.tableTurnover.reduce((sum, table) => sum + (table.total_revenue || 0), 0).toFixed(2)}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">Total Revenue</div>\n                  </div>\n                </div>\n\n                {/* Detailed Table */}\n                <div className=\"overflow-x-auto\">\n                  <table className=\"min-w-full divide-y divide-gray-200\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Table Number\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Total Orders\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Total Revenue\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Avg Order Value\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Avg Service Time\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {reportData.tableTurnover.map((table, index) => (\n                        <tr key={index} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                            Table {table.table_number}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                            {table.total_orders}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                            ${(table.total_revenue || 0).toFixed(2)}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                            ${(table.average_order_value || 0).toFixed(2)}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                            {table.average_service_time ? `${Math.round(table.average_service_time)} min` : 'N/A'}\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Payment Methods Report */}\n        <div className=\"card\">\n          <div className=\"card-header\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">Payment Methods</h2>\n              <button\n                onClick={() => exportReport('payments')}\n                disabled={loading}\n                className=\"btn-outline btn-sm\"\n              >\n                <DocumentArrowDownIcon className=\"h-4 w-4 mr-1\" />\n                Export\n              </button>\n            </div>\n          </div>\n          <div className=\"card-body\">\n            <button\n              onClick={loadPaymentMethods}\n              disabled={loading}\n              className=\"w-full btn-primary mb-4\"\n            >\n              {loading ? 'Loading...' : 'Load Payment Data'}\n            </button>\n            \n            {reportData.paymentMethods && (\n              <div className=\"space-y-2\">\n                {reportData.paymentMethods.map((method, index) => (\n                  <div key={index} className=\"flex justify-between items-center py-2 border-b border-gray-100 last:border-b-0\">\n                    <span className=\"text-sm font-medium text-gray-900 capitalize\">{method.method}</span>\n                    <div className=\"text-right\">\n                      <div className=\"text-sm font-semibold text-gray-900\">\n                        {formatCurrency(method.total)}\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        {formatNumber(method.count)} transactions\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Inventory Usage Report */}\n        <div className=\"card\">\n          <div className=\"card-header\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">Inventory Usage</h2>\n              <button\n                onClick={() => exportReport('inventory')}\n                disabled={loading}\n                className=\"btn-outline btn-sm\"\n              >\n                <DocumentArrowDownIcon className=\"h-4 w-4 mr-1\" />\n                Export\n              </button>\n            </div>\n          </div>\n          <div className=\"card-body\">\n            <button\n              onClick={loadInventoryUsage}\n              disabled={loading}\n              className=\"w-full btn-primary mb-4\"\n            >\n              {loading ? 'Loading...' : 'Load Inventory Data'}\n            </button>\n            \n            {reportData.inventoryUsage && (\n              <div className=\"space-y-2\">\n                {reportData.inventoryUsage.slice(0, 5).map((item, index) => (\n                  <div key={index} className=\"flex justify-between items-center py-2 border-b border-gray-100 last:border-b-0\">\n                    <div>\n                      <span className=\"text-sm font-medium text-gray-900\">{item.name}</span>\n                      <div className=\"text-xs text-gray-500\">{formatNumber(item.quantityUsed)} used</div>\n                    </div>\n                    <span className=\"text-sm font-semibold text-gray-900\">\n                      {formatCurrency(item.totalCost)}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Cash Reconciliation Report */}\n        <div className=\"card\">\n          <div className=\"card-header\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">Cash Reconciliation</h2>\n              <button\n                onClick={() => exportReport('cash')}\n                disabled={loading}\n                className=\"btn-outline btn-sm\"\n              >\n                <DocumentArrowDownIcon className=\"h-4 w-4 mr-1\" />\n                Export\n              </button>\n            </div>\n          </div>\n          <div className=\"card-body\">\n            <button\n              onClick={loadCashReconciliation}\n              disabled={loading}\n              className=\"w-full btn-primary mb-4\"\n            >\n              {loading ? 'Loading...' : 'Load Cash Data'}\n            </button>\n            \n            {reportData.cashReconciliation && (\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Opening Cash:</span>\n                  <span className=\"font-semibold\">{formatCurrency(reportData.cashReconciliation.openingCash)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Cash Sales:</span>\n                  <span className=\"font-semibold\">{formatCurrency(reportData.cashReconciliation.cashSales)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Expected Cash:</span>\n                  <span className=\"font-semibold\">{formatCurrency(reportData.cashReconciliation.expectedCash)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Actual Cash:</span>\n                  <span className=\"font-semibold\">{formatCurrency(reportData.cashReconciliation.actualCash)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Difference:</span>\n                  <span className={`font-semibold ${\n                    reportData.cashReconciliation.difference >= 0 ? 'text-green-600' : 'text-red-600'\n                  }`}>\n                    {formatCurrency(reportData.cashReconciliation.difference)}\n                  </span>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Export All Reports */}\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">Export All Reports</h2>\n        </div>\n        <div className=\"card-body\">\n          <div className=\"flex flex-wrap gap-3\">\n            <button\n              onClick={() => exportReport('sales')}\n              disabled={loading}\n              className=\"btn-outline\"\n            >\n              <DocumentArrowDownIcon className=\"h-4 w-4 mr-2\" />\n              Sales Report\n            </button>\n            <button\n              onClick={() => exportReport('items')}\n              disabled={loading}\n              className=\"btn-outline\"\n            >\n              <DocumentArrowDownIcon className=\"h-4 w-4 mr-2\" />\n              Items Report\n            </button>\n            <button\n              onClick={() => exportReport('tables')}\n              disabled={loading}\n              className=\"btn-outline\"\n            >\n              <DocumentArrowDownIcon className=\"h-4 w-4 mr-2\" />\n              Tables Report\n            </button>\n            <button\n              onClick={() => exportReport('payments')}\n              disabled={loading}\n              className=\"btn-outline\"\n            >\n              <DocumentArrowDownIcon className=\"h-4 w-4 mr-2\" />\n              Payments Report\n            </button>\n            <button\n              onClick={() => exportReport('inventory')}\n              disabled={loading}\n              className=\"btn-outline\"\n            >\n              <DocumentArrowDownIcon className=\"h-4 w-4 mr-2\" />\n              Inventory Report\n            </button>\n            <button\n              onClick={() => exportReport('cash')}\n              disabled={loading}\n              className=\"btn-outline\"\n            >\n              <DocumentArrowDownIcon className=\"h-4 w-4 mr-2\" />\n              Cash Report\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ReportsPage","size_bytes":28441},"server/reset_migrations.js":{"content":"const knex = require('knex'); const config = require('./knexfile.cjs'); const db = knex(config.development); async function resetMigrations() { try { console.log('Resetting migrations...'); await db.schema.dropTableIfExists('knex_migrations'); console.log('V Dropped knex_migrations table'); console.log('? Migrations reset completed! Now run: npm run migrate'); await db.destroy(); } catch (error) { console.error('? Error:', error.message); await db.destroy(); } } resetMigrations(); \n","size_bytes":487},"server/src/routes/modules/payments.ts":{"content":"import { Router } from 'express';\nimport db from '../../utils/db';\nimport { authenticate } from '../../middlewares/auth';\n\nconst router = Router();\n\nrouter.post('/', authenticate, async (req, res) => {\n  const { orderId, payment_type, amount, transaction_ref } = req.body;\n  try {\n    await db.transaction(async (trx) => {\n      await trx('payments').insert({ order_id: orderId, payment_type, amount, transaction_ref });\n      await trx('orders').where({ id: orderId }).update({ payment_status: 'PAID', status: 'PAID', updated_at: trx.fn.now() });\n    });\n    const order = await db('orders').where({ id: orderId }).first();\n    const io = (req.app as any).get('io');\n    io.to(`branch:${order.branch_id}:kitchen`).emit('order.paid', { orderId, amount, payment_type });\n    res.status(201).json({ ok: true });\n  } catch (e: any) {\n    res.status(400).json({ error: 'Payment recording failed', details: e.message });\n  }\n});\n\nexport default router;\n","size_bytes":948},"server/knexfile.js":{"content":"require('dotenv').config();\nconst config = {\n  development: {\n    client: process.env.DB_TYPE || 'sqlite3',\n    connection: process.env.DB_TYPE === 'sqlite3' \n      ? { filename: process.env.DB_PATH || './data/posq.db' }\n      : {\n          host: process.env.DB_HOST || 'localhost',\n          port: process.env.DB_PORT || 3306,\n          user: process.env.DB_USER || 'posq',\n          password: process.env.DB_PASSWORD || '',\n          database: process.env.DB_NAME || 'posq'\n        },\n    migrations: {\n      directory: './src/migrations'\n    },\n    seeds: {\n      directory: './src/seeds'\n    },\n    useNullAsDefault: true\n  },\n\n  production: {\n    client: process.env.DB_TYPE || 'sqlite3',\n    connection: process.env.DB_TYPE === 'sqlite3' \n      ? { filename: process.env.DB_PATH || './data/posq.db' }\n      : {\n          host: process.env.DB_HOST,\n          port: process.env.DB_PORT,\n          user: process.env.DB_USER,\n          password: process.env.DB_PASSWORD,\n          database: process.env.DB_NAME\n        },\n    migrations: {\n      directory: './src/migrations'\n    },\n    seeds: {\n      directory: './src/seeds'\n    },\n    useNullAsDefault: true,\n    pool: {\n      min: 2,\n      max: 10\n    }\n  },\n\n  test: {\n    client: 'sqlite3',\n    connection: {\n      filename: ':memory:'\n    },\n    migrations: {\n      directory: './src/migrations'\n    },\n    seeds: {\n      directory: './src/seeds'\n    },\n    useNullAsDefault: true\n  }\n};\n\nmodule.exports = config;","size_bytes":1472},"frontend/src/components/StockItemForm.jsx":{"content":"import { useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { inventoryAPI } from '../services/api'\nimport toast from 'react-hot-toast'\n\nfunction StockItemForm({ \n  item = null, \n  onSave, \n  onCancel \n}) {\n  const [loading, setLoading] = useState(false)\n  \n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n    watch\n  } = useForm({\n    defaultValues: {\n      name: item?.name || '',\n      sku: item?.sku || '',\n      description: item?.description || '',\n      unit: item?.unit || 'piece',\n      currentStock: item?.current_stock || 0,\n      minStock: item?.min_stock || 0,\n      maxStock: item?.max_stock || 100,\n      costPrice: item?.cost_price || 0,\n      supplier: item?.supplier || '',\n      isActive: item?.is_active !== false\n    }\n  })\n\n  const onSubmit = async (data) => {\n    try {\n      setLoading(true)\n      \n      const itemData = {\n        ...data,\n        current_stock: parseFloat(data.currentStock),\n        min_stock: parseFloat(data.minStock),\n        max_stock: parseFloat(data.maxStock),\n        cost_price: parseFloat(data.costPrice),\n        is_active: data.isActive\n      }\n\n      let response\n      if (item) {\n        // Update existing item\n        response = await inventoryAPI.updateStockItem(item.id, itemData)\n      } else {\n        // Create new item\n        response = await inventoryAPI.createStockItem(itemData)\n      }\n\n      toast.success(`Stock item ${item ? 'updated' : 'created'} successfully`)\n      onSave(response.data.item)\n    } catch (error) {\n      console.error('Stock item save error:', error)\n      toast.error(error.response?.data?.error || 'Failed to save stock item')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n      {/* Basic Information */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <label className=\"form-label\">Item Name *</label>\n          <input\n            type=\"text\"\n            {...register('name', { required: 'Item name is required' })}\n            className=\"form-input\"\n            placeholder=\"Enter item name\"\n          />\n          {errors.name && (\n            <p className=\"form-error\">{errors.name.message}</p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"form-label\">SKU</label>\n          <input\n            type=\"text\"\n            {...register('sku')}\n            className=\"form-input\"\n            placeholder=\"Enter SKU (optional)\"\n          />\n        </div>\n      </div>\n\n      <div>\n        <label className=\"form-label\">Description</label>\n        <textarea\n          {...register('description')}\n          rows={3}\n          className=\"form-input\"\n          placeholder=\"Enter item description\"\n        />\n      </div>\n\n      {/* Stock Information */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <label className=\"form-label\">Unit *</label>\n          <select\n            {...register('unit', { required: 'Unit is required' })}\n            className=\"form-input\"\n          >\n            <option value=\"piece\">Piece</option>\n            <option value=\"kg\">Kilogram</option>\n            <option value=\"g\">Gram</option>\n            <option value=\"liter\">Liter</option>\n            <option value=\"ml\">Milliliter</option>\n            <option value=\"box\">Box</option>\n            <option value=\"pack\">Pack</option>\n          </select>\n          {errors.unit && (\n            <p className=\"form-error\">{errors.unit.message}</p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"form-label\">Current Stock *</label>\n          <input\n            type=\"number\"\n            min=\"0\"\n            step=\"0.01\"\n            {...register('currentStock', { \n              required: 'Current stock is required',\n              min: { value: 0, message: 'Stock cannot be negative' }\n            })}\n            className=\"form-input\"\n            placeholder=\"0\"\n          />\n          {errors.currentStock && (\n            <p className=\"form-error\">{errors.currentStock.message}</p>\n          )}\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <label className=\"form-label\">Minimum Stock</label>\n          <input\n            type=\"number\"\n            min=\"0\"\n            step=\"0.01\"\n            {...register('minStock', { \n              min: { value: 0, message: 'Minimum stock cannot be negative' }\n            })}\n            className=\"form-input\"\n            placeholder=\"0\"\n          />\n          {errors.minStock && (\n            <p className=\"form-error\">{errors.minStock.message}</p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"form-label\">Maximum Stock</label>\n          <input\n            type=\"number\"\n            min=\"0\"\n            step=\"0.01\"\n            {...register('maxStock', { \n              min: { value: 0, message: 'Maximum stock cannot be negative' }\n            })}\n            className=\"form-input\"\n            placeholder=\"100\"\n          />\n          {errors.maxStock && (\n            <p className=\"form-error\">{errors.maxStock.message}</p>\n          )}\n        </div>\n      </div>\n\n      {/* Cost Information */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <label className=\"form-label\">Cost Price</label>\n          <input\n            type=\"number\"\n            min=\"0\"\n            step=\"0.01\"\n            {...register('costPrice', { \n              min: { value: 0, message: 'Cost price cannot be negative' }\n            })}\n            className=\"form-input\"\n            placeholder=\"0.00\"\n          />\n          {errors.costPrice && (\n            <p className=\"form-error\">{errors.costPrice.message}</p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"form-label\">Supplier</label>\n          <input\n            type=\"text\"\n            {...register('supplier')}\n            className=\"form-input\"\n            placeholder=\"Enter supplier name\"\n          />\n        </div>\n      </div>\n\n      {/* Status */}\n      <div>\n        <label className=\"flex items-center\">\n          <input\n            type=\"checkbox\"\n            {...register('isActive')}\n            className=\"form-checkbox\"\n          />\n          <span className=\"ml-2 text-sm text-gray-700\">Active (available for recipes)</span>\n        </label>\n      </div>\n\n      {/* Actions */}\n      <div className=\"flex justify-end space-x-3 pt-6 border-t border-gray-200\">\n        <button\n          type=\"button\"\n          onClick={onCancel}\n          className=\"btn-outline\"\n          disabled={loading}\n        >\n          Cancel\n        </button>\n        <button\n          type=\"submit\"\n          className=\"btn-primary\"\n          disabled={loading}\n        >\n          {loading ? (\n            <>\n              <div className=\"loading-spinner mr-2\"></div>\n              {item ? 'Updating...' : 'Creating...'}\n            </>\n          ) : (\n            item ? 'Update Item' : 'Create Item'\n          )}\n        </button>\n      </div>\n    </form>\n  )\n}\n\nexport default StockItemForm","size_bytes":7159},"frontend/src/components/auth/ProtectedRoute.jsx":{"content":"import { Navigate, useLocation } from 'react-router-dom'\nimport { useAuth } from '../../contexts/AuthContext'\n\nfunction ProtectedRoute({ children, requiredRoles = [] }) {\n  const { isAuthenticated, user, isLoading } = useAuth()\n  const location = useLocation()\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"loading-spinner mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (!isAuthenticated) {\n    return <Navigate to=\"/admin/login\" state={{ from: location }} replace />\n  }\n\n  if (requiredRoles.length > 0 && !requiredRoles.includes(user.role)) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">403</h1>\n          <p className=\"text-gray-600 mb-8\">Access denied</p>\n          <p className=\"text-sm text-gray-500\">You don't have permission to access this page.</p>\n        </div>\n      </div>\n    )\n  }\n\n  return children\n}\n\nexport default ProtectedRoute","size_bytes":1203},"server/src/middleware/validation.js":{"content":"const { body, param, query, validationResult } = require('express-validator');\n\nconst handleValidationErrors = (req, res, next) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: 'Validation failed',\n      details: errors.array()\n    });\n  }\n  next();\n};\n\nconst validateLogin = [\n  body('username').notEmpty().withMessage('Username is required'),\n  body('password').isLength({ min: 6 }).withMessage('Password must be at least 6 characters'),\n  handleValidationErrors\n];\n\nconst validateOrder = [\n  body('branchId').isInt().withMessage('Branch ID must be a valid integer'),\n  body('customerName').optional().isString().withMessage('Customer name must be a string'),\n  body('items').isArray({ min: 1 }).withMessage('At least one item is required'),\n  body('items.*.menuItemId').isInt().withMessage('Menu item ID must be a valid integer'),\n  body('items.*.quantity').isInt({ min: 1 }).withMessage('Quantity must be at least 1'),\n  body('items.*.note').optional().isString(),\n  body('items.*.modifiers').optional().isArray(),\n  handleValidationErrors\n];\n\nconst validateMenuItem = [\n  body('name').notEmpty().withMessage('Menu item name is required'),\n  body('price').isFloat({ min: 0 }).withMessage('Price must be a positive number'),\n  body('categoryId').isInt().withMessage('Category ID must be a valid integer'),\n  body('branchId').isInt().withMessage('Branch ID must be a valid integer'),\n  handleValidationErrors\n];\n\nconst validateTable = [\n  body('tableNumber').notEmpty().withMessage('Table number is required'),\n  body('branchId').isInt().withMessage('Branch ID must be a valid integer'),\n  handleValidationErrors\n];\n\nconst validatePayment = [\n  body('orderId').isInt().withMessage('Order ID must be a valid integer'),\n  body('paymentType').isIn(['CASH', 'CARD', 'ONLINE']).withMessage('Invalid payment type'),\n  body('amount').isFloat({ min: 0 }).withMessage('Amount must be a positive number'),\n  handleValidationErrors\n];\n\nconst validateId = [\n  param('id').isInt().withMessage('ID must be a valid integer'),\n  handleValidationErrors\n];\n\nmodule.exports = {\n  validateLogin,\n  validateOrder,\n  validateMenuItem,\n  validateTable,\n  validatePayment,\n  validateId,\n  handleValidationErrors\n};","size_bytes":2262},"frontend/src/components/CartBottomBar.jsx":{"content":"import { useState } from 'react'\nimport { useCart } from '../contexts/CartContext'\nimport { ShoppingCartIcon, CreditCardIcon, QrCodeIcon } from '@heroicons/react/24/outline'\nimport { useNavigate } from 'react-router-dom'\n\nfunction CartBottomBar() {\n  const { cartItems, total, itemCount } = useCart()\n  const [showCart, setShowCart] = useState(false)\n  const navigate = useNavigate()\n\n  const handleCheckout = () => {\n    if (cartItems?.length === 0) {\n      return\n    }\n    navigate('/checkout')\n  }\n\n  if (cartItems?.length === 0) {\n    return null\n  }\n\n  return (\n    <>\n      {/* Cart Bottom Bar */}\n      <div className=\"fixed bottom-0 left-0 right-0 bg-black/90 backdrop-blur-md border-t border-yellow-400/30 shadow-2xl z-50 md:hidden\">\n        <div className=\"flex items-center justify-between p-4\">\n          <button\n            onClick={() => setShowCart(true)}\n            className=\"flex items-center space-x-3 flex-1\"\n          >\n            <div className=\"relative\">\n              <ShoppingCartIcon className=\"h-8 w-8 text-yellow-400\" />\n              {itemCount > 0 && (\n                <span className=\"absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center font-semibold\">\n                  {itemCount}\n                </span>\n              )}\n            </div>\n            <div className=\"text-left\">\n              <p className=\"text-sm font-medium text-white\">{itemCount} items</p>\n              <p className=\"text-lg font-bold text-yellow-400\">{total.toFixed(2)} MAD</p>\n            </div>\n          </button>\n          \n          <button\n            onClick={handleCheckout}\n            className=\"btn-primary px-6 py-3 rounded-xl\"\n          >\n            <CreditCardIcon className=\"h-5 w-5 mr-2\" />\n            Pay Now\n          </button>\n        </div>\n      </div>\n\n      {/* Cart Modal */}\n      {showCart && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-70 flex items-end z-50 md:hidden\">\n          <div className=\"bg-black/90 backdrop-blur-md rounded-t-2xl w-full max-h-[80vh] overflow-hidden border-t border-yellow-400/30\">\n            <div className=\"p-4 border-b border-yellow-400/30\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-xl font-bold text-white\">Your Order</h2>\n                <button\n                  onClick={() => setShowCart(false)}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                  </svg>\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"overflow-y-auto max-h-96\">\n              {cartItems?.map((item, index) => (\n                <div key={index} className=\"p-4 border-b border-yellow-400/20\">\n                  <div className=\"flex items-center space-x-3\">\n                    <img\n                      src={item.image || 'https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=100&h=100&fit=crop'}\n                      alt={item.name}\n                      className=\"w-16 h-16 rounded-lg object-cover\"\n                    />\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-medium text-white\">{item.name}</h3>\n                      <p className=\"text-sm text-gray-300\">Qty: {item.quantity}</p>\n                      <p className=\"text-sm font-semibold text-yellow-400\">\n                        {(item.price * item.quantity)?.toFixed(2)} MAD\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"p-4 border-t border-yellow-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <span className=\"text-lg font-semibold text-white\">Total:</span>\n                <span className=\"text-2xl font-bold text-yellow-400\">{total.toFixed(2)} MAD</span>\n              </div>\n              \n              <div className=\"space-y-3\">\n                <button\n                  onClick={handleCheckout}\n                  className=\"w-full btn-primary py-3 rounded-xl\"\n                >\n                  <CreditCardIcon className=\"h-5 w-5 mr-2\" />\n                  Proceed to Payment\n                </button>\n                \n                <button\n                  onClick={() => setShowCart(false)}\n                  className=\"w-full btn-outline py-3 rounded-xl\"\n                >\n                  Continue Shopping\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default CartBottomBar","size_bytes":4867},"frontend/src/components/MenuItemForm.jsx":{"content":"import { useState, useEffect } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { menuAPI } from '../services/api'\nimport ImageUpload from './ImageUpload'\nimport toast from 'react-hot-toast'\n\nfunction MenuItemForm({ \n  item = null, \n  categories = [], \n  onSave, \n  onCancel,\n  branchId = 1 \n}) {\n  const [loading, setLoading] = useState(false)\n  const [imageUrl, setImageUrl] = useState(item?.image || '')\n  \n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n    watch\n  } = useForm({\n    defaultValues: {\n      name: item?.name || '',\n      description: item?.description || '',\n      price: item?.price || 0,\n      sku: item?.sku || '',\n      categoryId: item?.category_id || '',\n      branchId: branchId,\n      isAvailable: item?.is_available !== false\n    }\n  })\n\n  const onSubmit = async (data) => {\n    try {\n      setLoading(true)\n      \n      const menuItemData = {\n        ...data,\n        image: imageUrl,\n        branchId: parseInt(data.branchId),\n        categoryId: parseInt(data.categoryId)\n      }\n\n      let response\n      if (item) {\n        // Update existing item\n        response = await menuAPI.updateMenuItem(item.id, menuItemData)\n      } else {\n        // Create new item\n        response = await menuAPI.createMenuItem(menuItemData)\n      }\n\n      toast.success(`Menu item ${item ? 'updated' : 'created'} successfully`)\n      onSave(response.data.item)\n    } catch (error) {\n      console.error('Menu item save error:', error)\n      toast.error(error.response?.data?.error || 'Failed to save menu item')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n      {/* Basic Information */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <label className=\"form-label\">Item Name *</label>\n          <input\n            type=\"text\"\n            {...register('name', { required: 'Item name is required' })}\n            className=\"form-input\"\n            placeholder=\"Enter item name\"\n          />\n          {errors.name && (\n            <p className=\"form-error\">{errors.name.message}</p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"form-label\">SKU</label>\n          <input\n            type=\"text\"\n            {...register('sku')}\n            className=\"form-input\"\n            placeholder=\"Enter SKU (optional)\"\n          />\n        </div>\n      </div>\n\n      <div>\n        <label className=\"form-label\">Description</label>\n        <textarea\n          {...register('description')}\n          rows={3}\n          className=\"form-input\"\n          placeholder=\"Enter item description\"\n        />\n      </div>\n\n      {/* Price and Category */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <label className=\"form-label\">Price (MAD) *</label>\n          <input\n            type=\"number\"\n            step=\"0.01\"\n            min=\"0\"\n            {...register('price', { \n              required: 'Price is required',\n              min: { value: 0, message: 'Price must be positive' }\n            })}\n            className=\"form-input\"\n            placeholder=\"0.00\"\n          />\n          {errors.price && (\n            <p className=\"form-error\">{errors.price.message}</p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"form-label\">Category *</label>\n          <select\n            {...register('categoryId', { required: 'Category is required' })}\n            className=\"form-input\"\n          >\n            <option value=\"\">Select a category</option>\n            {categories.map((category) => (\n              <option key={category.id} value={category.id}>\n                {category.name}\n              </option>\n            ))}\n          </select>\n          {errors.categoryId && (\n            <p className=\"form-error\">{errors.categoryId.message}</p>\n          )}\n        </div>\n      </div>\n\n      {/* Image Upload */}\n      <div>\n        <label className=\"form-label\">Item Image</label>\n        <ImageUpload\n          value={imageUrl}\n          onChange={setImageUrl}\n          showPreview={true}\n          maxSize={5 * 1024 * 1024} // 5MB\n        />\n        <p className=\"text-xs text-gray-500 mt-1\">\n          Upload a high-quality image of your menu item. Recommended size: 400x300px\n        </p>\n      </div>\n\n      {/* Availability */}\n      <div>\n        <label className=\"flex items-center\">\n          <input\n            type=\"checkbox\"\n            {...register('isAvailable')}\n            className=\"form-checkbox\"\n          />\n          <span className=\"ml-2 text-sm text-gray-700\">Available for ordering</span>\n        </label>\n      </div>\n\n      {/* Actions */}\n      <div className=\"flex justify-end space-x-3 pt-6 border-t border-gray-200\">\n        <button\n          type=\"button\"\n          onClick={onCancel}\n          className=\"btn-outline\"\n          disabled={loading}\n        >\n          Cancel\n        </button>\n        <button\n          type=\"submit\"\n          className=\"btn-primary\"\n          disabled={loading}\n        >\n          {loading ? (\n            <>\n              <div className=\"loading-spinner mr-2\"></div>\n              {item ? 'Updating...' : 'Creating...'}\n            </>\n          ) : (\n            item ? 'Update Item' : 'Create Item'\n          )}\n        </button>\n      </div>\n    </form>\n  )\n}\n\nexport default MenuItemForm","size_bytes":5428},"server/src/routes/orders.js":{"content":"const express = require('express');\nconst QRCode = require('qrcode');\nconst { db } = require('../database/init');\nconst { authenticateToken, authorize } = require('../middleware/auth');\nconst { validateOrder } = require('../middleware/validation');\nconst { orderRateLimiter } = require('../middleware/rateLimiter');\nconst { logger } = require('../middleware/errorHandler');\n\nconst router = express.Router();\n\nrouter.post('/', orderRateLimiter, validateOrder, async (req, res) => {\n  const trx = await db.transaction();\n  \n  try {\n    const { branchId, tableId, tableNumber, customerName, items, paymentMethod, clientMeta } = req.body;\n\n    console.log('🔵 BACKEND - Received order data:', { branchId, tableId, tableNumber, customerName });\n\n    // USE WHICHEVER FIELD HAS THE TABLE DATA (tableId OR tableNumber)\n    let tableIdentifier;\n    \n    if (tableNumber) {\n      tableIdentifier = tableNumber;\n      console.log('🔍 Using tableNumber as identifier:', tableIdentifier);\n    } else if (tableId) {\n      tableIdentifier = tableId;\n      console.log('🔍 Using tableId as identifier:', tableIdentifier);\n    } else {\n      await trx.rollback();\n      return res.status(400).json({ error: 'Table information is required. Please provide tableNumber or tableId.' });\n    }\n\n    // RESOLVE TABLE ID FROM TABLE IDENTIFIER\n    let actualTableId;\n    let actualTableNumber;\n\n    console.log('🔍 Looking up table by identifier:', { tableIdentifier, branchId });\n    \n    const table = await trx('tables')\n      .where({ \n        table_number: tableIdentifier.toString(),\n        branch_id: branchId \n      })\n      .first();\n    \n    if (!table) {\n      await trx.rollback();\n      \n      // Get available tables for better error message\n      const availableTables = await trx('tables')\n        .where({ branch_id: branchId })\n        .select('table_number');\n      const tableList = availableTables.map(t => t.table_number).join(', ');\n      \n      return res.status(400).json({ \n        error: `Table \"${tableIdentifier}\" not found in branch ${branchId}. Available tables: ${tableList || 'None'}`\n      });\n    }\n    \n    actualTableId = table.id;\n    actualTableNumber = table.table_number;\n    console.log('✅ Resolved table:', { actualTableId, actualTableNumber });\n\n    // Generate order code\n    const branch = await trx('branches').where({ id: branchId }).first();\n    if (!branch) {\n      await trx.rollback();\n      return res.status(400).json({ error: `Branch ${branchId} not found` });\n    }\n\n    const timestamp = new Date().toISOString().slice(0, 10).replace(/-/g, '');\n    const orderCount = await trx('orders')\n      .where({ branch_id: branchId })\n      .andWhere('created_at', '>=', new Date().toISOString().slice(0, 10))\n      .count('id as count')\n      .first();\n    \n    const orderCode = `${branch.code}-${timestamp}-${String(parseInt(orderCount.count) + 1).padStart(4, '0')}`;\n\n    // Generate unique 8-digit PIN\n    let pin;\n    let isUnique = false;\n    let attempts = 0;\n    const maxAttempts = 10;\n\n    while (!isUnique && attempts < maxAttempts) {\n      pin = Math.floor(10000000 + Math.random() * 90000000).toString();\n      const existingOrder = await trx('orders').where({ pin }).first();\n      if (!existingOrder) {\n        isUnique = true;\n      }\n      attempts++;\n    }\n\n    if (!isUnique) {\n      await trx.rollback();\n      return res.status(500).json({ error: 'Failed to generate unique PIN' });\n    }\n\n    // Calculate totals\n    let subtotal = 0;\n    const orderItems = [];\n\n    for (const item of items) {\n      const menuItem = await trx('menu_items').where({ id: item.menuItemId }).first();\n      if (!menuItem) {\n        await trx.rollback();\n        return res.status(400).json({ error: `Menu item ${item.menuItemId} not found` });\n      }\n\n      if (!menuItem.is_available) {\n        await trx.rollback();\n        return res.status(400).json({ error: `Menu item \"${menuItem.name}\" is not available` });\n      }\n\n      let itemTotal = menuItem.price * item.quantity;\n      const modifiers = [];\n\n      // Add modifier costs\n      if (item.modifiers && item.modifiers.length > 0) {\n        for (const modifierId of item.modifiers) {\n          const modifier = await trx('modifiers').where({ id: modifierId }).first();\n          if (modifier) {\n            itemTotal += modifier.extra_price * item.quantity;\n            modifiers.push(modifier);\n          }\n        }\n      }\n\n      subtotal += itemTotal;\n      orderItems.push({\n        menuItemId: item.menuItemId,\n        quantity: item.quantity,\n        unitPrice: menuItem.price,\n        note: item.note,\n        modifiers,\n        itemTotal // This is just for calculation, not for database storage\n      });\n    }\n\n    // Get tax and service charge rates\n    const taxRate = await trx('settings').where({ key: 'tax_rate' }).first();\n    const serviceChargeRate = await trx('settings').where({ key: 'service_charge_rate' }).first();\n    \n    const taxRateValue = parseFloat(taxRate?.value || 10);\n    const serviceChargeRateValue = parseFloat(serviceChargeRate?.value || 5);\n    \n    const tax = subtotal * (taxRateValue / 100);\n    const serviceCharge = subtotal * (serviceChargeRateValue / 100);\n    const total = subtotal + tax + serviceCharge;\n\n    // Create order\n    const [orderId] = await trx('orders').insert({\n      branch_id: branchId,\n      order_code: orderCode,\n      pin: pin,\n      table_id: actualTableId,\n      customer_name: customerName,\n      total: parseFloat(total.toFixed(2)),\n      tax: parseFloat(tax.toFixed(2)),\n      service_charge: parseFloat(serviceCharge.toFixed(2)),\n      status: paymentMethod === 'CARD' ? 'AWAITING_PAYMENT' : 'PENDING',\n      payment_status: 'UNPAID',\n      payment_method: paymentMethod || 'cash'\n    });\n\n    // Create order items - FIXED: removed total_price column\n    for (const orderItem of orderItems) {\n      const [orderItemId] = await trx('order_items').insert({\n        order_id: orderId,\n        menu_item_id: orderItem.menuItemId,\n        quantity: orderItem.quantity,\n        unit_price: orderItem.unitPrice,\n        note: orderItem.note\n        // Removed total_price since it doesn't exist in your table\n      });\n\n      // Create order item modifiers\n      for (const modifier of orderItem.modifiers) {\n        await trx('order_item_modifiers').insert({\n          order_item_id: orderItemId,\n          modifier_id: modifier.id,\n          extra_price: modifier.extra_price\n        });\n      }\n    }\n\n    await trx.commit();\n\n    // Generate order tracking QR code for customer\n    const orderTrackingUrl = `${process.env.FRONTEND_URL || 'http://localhost:5173'}/order-status/${orderId}?pin=${pin}`;\n    const trackingQrCode = await QRCode.toDataURL(orderTrackingUrl);\n\n    // Generate payment QR code for cashier (cash payments only)\n    let paymentQrCode = null;\n    if (paymentMethod === 'cash' || !paymentMethod) {\n      const paymentData = JSON.stringify({\n        orderCode,\n        orderId,\n        total: total.toFixed(2),\n        tableNumber: actualTableNumber\n      });\n      paymentQrCode = await QRCode.toDataURL(paymentData, {\n        width: 300,\n        margin: 2\n      });\n    }\n\n    // Emit real-time event\n    const io = req.app.get('io');\n    const order = await db('orders')\n      .select('orders.*', 'tables.table_number', 'branches.name as branch_name')\n      .leftJoin('tables', 'orders.table_id', 'tables.id')\n      .leftJoin('branches', 'orders.branch_id', 'branches.id')\n      .where({ 'orders.id': orderId })\n      .first();\n\n    if (io) {\n      io.to(`branch:${branchId}:kitchen`).emit('order.created', order);\n      io.to(`branch:${branchId}:cashier`).emit('order.created', order);\n    }\n\n    // Log order creation\n    await db('audit_logs').insert({\n      user_id: null,\n      action: 'ORDER_CREATE',\n      meta: JSON.stringify({ \n        orderId, \n        orderCode, \n        tableId: actualTableId, \n        tableNumber: actualTableNumber,\n        customerName, \n        total,\n        paymentMethod,\n        ip: req.ip,\n        userAgent: req.get('User-Agent')\n      })\n    });\n\n    logger.info(`Order created: ${orderCode} for table ${actualTableNumber} - Payment: ${paymentMethod || 'cash'}`);\n\n    res.status(201).json({\n      orderId,\n      orderCode,\n      pin: pin,\n      tableNumber: actualTableNumber,\n      trackingUrl: orderTrackingUrl,\n      trackingQrCode: trackingQrCode,\n      paymentQrCode: paymentQrCode,\n      status: 'PENDING',\n      total: parseFloat(total.toFixed(2)),\n      paymentMethod: paymentMethod || 'cash',\n      message: 'Order created successfully'\n    });\n\n  } catch (error) {\n    await trx.rollback();\n    logger.error('Order creation error:', error);\n    res.status(500).json({ error: error.message || 'Failed to create order' });\n  }\n});\n// Get orders (admin/cashier)\nrouter.get('/', authenticateToken, authorize('admin', 'manager', 'cashier'), async (req, res) => {\n  try {\n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n    \n    const { status, tableId, limit = 50, offset = 0 } = req.query;\n\n    let query = db('orders')\n      .select(\n        'orders.*',\n        'tables.table_number',\n        'branches.name as branch_name'\n      )\n      .leftJoin('tables', 'orders.table_id', 'tables.id')\n      .leftJoin('branches', 'orders.branch_id', 'branches.id')\n      .where({ 'orders.branch_id': branchId });\n\n    if (status) {\n      if (Array.isArray(status)) {\n        query = query.whereIn('orders.status', status);\n      } else {\n        query = query.where({ 'orders.status': status });\n      }\n    }\n\n    if (tableId) {\n      query = query.where({ 'orders.table_id': tableId });\n    }\n\n    const orders = await query\n      .orderBy('orders.created_at', 'desc')\n      .limit(parseInt(limit))\n      .offset(parseInt(offset));\n\n    // Get order items for each order\n    for (const order of orders) {\n      const items = await db('order_items')\n        .select(\n          'order_items.*',\n          'menu_items.name as item_name',\n          'menu_items.sku'\n        )\n        .leftJoin('menu_items', 'order_items.menu_item_id', 'menu_items.id')\n        .where({ 'order_items.order_id': order.id });\n\n      // Get modifiers for each item\n      for (const item of items) {\n        const modifiers = await db('order_item_modifiers')\n          .select('modifiers.name', 'order_item_modifiers.extra_price')\n          .leftJoin('modifiers', 'order_item_modifiers.modifier_id', 'modifiers.id')\n          .where({ 'order_item_modifiers.order_item_id': item.id });\n\n        item.modifiers = modifiers;\n      }\n\n      order.items = items;\n    }\n\n    res.json({ success: true, orders });\n  } catch (error) {\n    logger.error('Orders fetch error:', error);\n    res.status(500).json({ error: 'Failed to fetch orders' });\n  }\n});\n\n// Get order by PIN (public endpoint for customers)\nrouter.get('/pin/:pin', async (req, res) => {\n  try {\n    const { pin } = req.params;\n\n    if (!pin || pin.length !== 8) {\n      return res.status(400).json({ error: 'Invalid PIN format' });\n    }\n\n    const order = await db('orders')\n      .select(\n        'orders.*',\n        'tables.table_number',\n        'branches.name as branch_name',\n        'branches.code as branch_code'\n      )\n      .leftJoin('tables', 'orders.table_id', 'tables.id')\n      .leftJoin('branches', 'orders.branch_id', 'branches.id')\n      .where({ 'orders.pin': pin })\n      .first();\n\n    if (!order) {\n      return res.status(404).json({ error: 'Order not found' });\n    }\n\n    // Get order items with full details\n    const items = await db('order_items')\n      .select(\n        'order_items.*',\n        'menu_items.name as menu_item_name',\n        'menu_items.sku',\n        'menu_items.image as menu_item_image'\n        // Removed description if it doesn't exist\n      )\n      .leftJoin('menu_items', 'order_items.menu_item_id', 'menu_items.id')\n      .where({ 'order_items.order_id': order.id });\n\n    // Get modifiers for each item - FIXED: removed description column\n    for (const item of items) {\n      const modifiers = await db('order_item_modifiers')\n        .select(\n          'modifiers.name',\n          // 'modifiers.description', // Remove this if column doesn't exist\n          'order_item_modifiers.extra_price'\n        )\n        .leftJoin('modifiers', 'order_item_modifiers.modifier_id', 'modifiers.id')\n        .where({ 'order_item_modifiers.order_item_id': item.id });\n      item.modifiers = modifiers;\n    }\n\n    order.items = items;\n\n    res.json({ \n      success: true, \n      order: {\n        id: order.id,\n        branch_id: order.branch_id,\n        order_code: order.order_code,\n        table_id: order.table_id,\n        table_number: order.table_number,\n        customer_name: order.customer_name,\n        total: order.total,\n        tax: order.tax,\n        service_charge: order.service_charge,\n        status: order.status,\n        payment_status: order.payment_status,\n        payment_method: order.payment_method,\n        pin: order.pin,\n        branch_name: order.branch_name,\n        branch_code: order.branch_code,\n        created_at: order.created_at,\n        updated_at: order.updated_at,\n        items: items\n      }\n    });\n  } catch (error) {\n    logger.error('Order PIN lookup error:', error);\n    res.status(500).json({ error: 'Failed to lookup order: ' + error.message });\n  }\n});\n\n\n// Search order by PIN (admin/cashier endpoint for internal search)\nrouter.get('/search/pin/:pin', authenticateToken, authorize('admin', 'manager', 'cashier'), async (req, res) => {\n  try {\n    const { pin } = req.params;\n    const branchId = req.user.branch_id;\n\n    console.log('PIN search request:', { pin, branchId, user: req.user });\n\n    if (!pin || pin.length !== 8) {\n      return res.status(400).json({ error: 'Invalid PIN format' });\n    }\n\n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n\n    const order = await db('orders')\n      .select(\n        'orders.*',\n        'tables.table_number',\n        'branches.name as branch_name',\n        'branches.code as branch_code'\n      )\n      .leftJoin('tables', 'orders.table_id', 'tables.id')\n      .leftJoin('branches', 'orders.branch_id', 'branches.id')\n      .where({ \n        'orders.pin': pin,\n        'orders.branch_id': branchId\n      })\n      .first();\n\n    console.log('Found order:', order);\n\n    if (!order) {\n      // Check if order exists in other branches\n      const orderInOtherBranch = await db('orders')\n        .select('branch_id')\n        .where({ pin: pin })\n        .first();\n        \n      if (orderInOtherBranch) {\n        return res.status(403).json({ \n          error: `Order found but belongs to different branch (ID: ${orderInOtherBranch.branch_id})` \n        });\n      }\n      return res.status(404).json({ error: 'Order not found with this PIN' });\n    }\n\n    // Get order items with full details\n    const items = await db('order_items')\n      .select(\n        'order_items.*',\n        'menu_items.name as menu_item_name',\n        'menu_items.sku',\n        'menu_items.image as menu_item_image'\n        // Removed description if it doesn't exist\n      )\n      .leftJoin('menu_items', 'order_items.menu_item_id', 'menu_items.id')\n      .where({ 'order_items.order_id': order.id });\n\n    console.log('Found items:', items.length);\n\n    // Get modifiers for each item - FIXED: removed description column\n    for (const item of items) {\n      const modifiers = await db('order_item_modifiers')\n        .select(\n          'modifiers.name',\n          // 'modifiers.description', // Remove this if column doesn't exist\n          'order_item_modifiers.extra_price'\n        )\n        .leftJoin('modifiers', 'order_item_modifiers.modifier_id', 'modifiers.id')\n        .where({ 'order_item_modifiers.order_item_id': item.id });\n      item.modifiers = modifiers;\n      console.log(`Item ${item.id} modifiers:`, modifiers);\n    }\n\n    order.items = items;\n\n    res.json({\n      success: true,\n      order: order\n    });\n\n  } catch (error) {\n    console.error('PIN search error:', error);\n    logger.error('PIN search error:', error);\n    res.status(500).json({ error: 'Failed to search order by PIN: ' + error.message });\n  }\n});\n// Get order by code (cashier endpoint for QR code scanning/search)\nrouter.get('/code/:code', authenticateToken, authorize('admin', 'manager', 'cashier'), async (req, res) => {\n  try {\n    const { code } = req.params;\n    const branchId = req.user.branch_id;\n\n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n\n    const order = await db('orders')\n      .select(\n        'orders.*',\n        'tables.table_number',\n        'branches.name as branch_name',\n        'branches.code as branch_code'\n      )\n      .leftJoin('tables', 'orders.table_id', 'tables.id')\n      .leftJoin('branches', 'orders.branch_id', 'branches.id')\n      .where({ \n        'orders.order_code': code,\n        'orders.branch_id': branchId\n      })\n      .first();\n\n    if (!order) {\n      return res.status(404).json({ error: 'Order not found' });\n    }\n\n    // Get order items with full details\n    const items = await db('order_items')\n      .select(\n        'order_items.*',\n        'menu_items.name as menu_item_name',\n        'menu_items.sku',\n        'menu_items.image as menu_item_image'\n        // Removed description if it doesn't exist\n      )\n      .leftJoin('menu_items', 'order_items.menu_item_id', 'menu_items.id')\n      .where({ 'order_items.order_id': order.id });\n\n    // Get modifiers for each item - FIXED: removed description column\n    for (const item of items) {\n      const modifiers = await db('order_item_modifiers')\n        .select(\n          'modifiers.name',\n          // 'modifiers.description', // Remove this if column doesn't exist\n          'order_item_modifiers.extra_price'\n        )\n        .leftJoin('modifiers', 'order_item_modifiers.modifier_id', 'modifiers.id')\n        .where({ 'order_item_modifiers.order_item_id': item.id });\n      item.modifiers = modifiers;\n    }\n\n    order.items = items;\n\n    res.json({ success: true, order });\n  } catch (error) {\n    logger.error('Order code lookup error:', error);\n    res.status(500).json({ error: 'Failed to lookup order: ' + error.message });\n  }\n});\n\n// Confirm payment (cashier endpoint)\nrouter.patch('/:id/payment', authenticateToken, authorize('admin', 'manager', 'cashier'), async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { paymentStatus, paymentMethod } = req.body;\n    const branchId = req.user.branch_id;\n\n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n\n    // Validate payment status\n    const validPaymentStatuses = ['PAID', 'UNPAID'];\n    if (!validPaymentStatuses.includes(paymentStatus)) {\n      return res.status(400).json({ error: 'Invalid payment status' });\n    }\n\n    // Get current order\n    const currentOrder = await db('orders')\n      .where({ id, branch_id: branchId })\n      .first();\n\n    if (!currentOrder) {\n      return res.status(404).json({ error: 'Order not found' });\n    }\n\n    // Update payment status\n    await db('orders')\n      .where({ id })\n      .update({\n        payment_status: paymentStatus,\n        payment_method: paymentMethod || currentOrder.payment_method,\n        status: paymentStatus === 'PAID' ? 'PREPARING' : currentOrder.status,\n        updated_at: db.raw('CURRENT_TIMESTAMP')\n      });\n\n    // Get updated order with details\n    const order = await db('orders')\n      .select('orders.*', 'tables.table_number', 'branches.name as branch_name')\n      .leftJoin('tables', 'orders.table_id', 'tables.id')\n      .leftJoin('branches', 'orders.branch_id', 'branches.id')\n      .where({ 'orders.id': id })\n      .first();\n\n    // Get order items for kitchen notification\n    const items = await db('order_items')\n      .select('order_items.*', 'menu_items.name as item_name')\n      .leftJoin('menu_items', 'order_items.menu_item_id', 'menu_items.id')\n      .where({ 'order_items.order_id': id });\n\n    order.items = items;\n\n    // Emit real-time events\n    const io = req.app.get('io');\n    \n    if (paymentStatus === 'PAID') {\n      // Notify kitchen to start preparation\n      io.to(`branch:${branchId}:kitchen`).emit('order.paid', order);\n      \n      // Notify cashier dashboard\n      io.to(`branch:${branchId}:cashier`).emit('order.updated', order);\n      \n      // Update revenue\n      io.to(`branch:${branchId}:admin`).emit('revenue.updated', {\n        amount: order.total,\n        orderId: order.id,\n        orderCode: order.order_code\n      });\n\n      logger.info(`Payment confirmed for order ${order.order_code} - Total: ${order.total}`);\n    }\n\n    // Log payment action\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: paymentStatus === 'PAID' ? 'PAYMENT_CONFIRMED' : 'PAYMENT_REVERTED',\n      meta: JSON.stringify({\n        orderId: id,\n        orderCode: order.order_code,\n        paymentStatus,\n        paymentMethod,\n        total: order.total\n      })\n    });\n\n    res.json({\n      success: true,\n      message: `Payment ${paymentStatus === 'PAID' ? 'confirmed' : 'reverted'} successfully`,\n      order\n    });\n  } catch (error) {\n    logger.error('Payment confirmation error:', error);\n    res.status(500).json({ error: 'Failed to update payment status' });\n  }\n});\n\n// Get single order (secured endpoint - requires auth or PIN)\nrouter.get('/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { pin } = req.query;\n    const token = req.headers.authorization;\n\n    // Check if user is authenticated\n    const isAuthenticated = !!token;\n\n    const order = await db('orders')\n      .select(\n        'orders.*',\n        'tables.table_number',\n        'branches.name as branch_name'\n      )\n      .leftJoin('tables', 'orders.table_id', 'tables.id')\n      .leftJoin('branches', 'orders.branch_id', 'branches.id')\n      .where({ 'orders.id': id })\n      .first();\n\n    if (!order) {\n      return res.status(404).json({ error: 'Order not found' });\n    }\n\n    // For unauthenticated requests, verify PIN\n    if (!isAuthenticated) {\n      if (!pin || pin !== order.pin) {\n        return res.status(403).json({ error: 'Invalid PIN or authentication required' });\n      }\n    }\n\n    // Get order items\n    const items = await db('order_items')\n      .select(\n        'order_items.*',\n        'menu_items.name as item_name',\n        'menu_items.sku',\n        'menu_items.description as item_description'\n      )\n      .leftJoin('menu_items', 'order_items.menu_item_id', 'menu_items.id')\n      .where({ 'order_items.order_id': id });\n\n    // Get modifiers for each item\n    for (const item of items) {\n      const modifiers = await db('order_item_modifiers')\n        .select('modifiers.name', 'order_item_modifiers.extra_price')\n        .leftJoin('modifiers', 'order_item_modifiers.modifier_id', 'modifiers.id')\n        .where({ 'order_item_modifiers.order_item_id': item.id });\n\n      item.modifiers = modifiers;\n    }\n\n    order.items = items;\n\n    // Only include payments for authenticated users\n    if (isAuthenticated) {\n      const payments = await db('payments').where({ order_id: id });\n      order.payments = payments;\n    }\n\n    res.json({ order });\n  } catch (error) {\n    logger.error('Order fetch error:', error);\n    res.status(500).json({ error: 'Failed to fetch order' });\n  }\n});\n\n// Update order status (admin/cashier/kitchen)\nrouter.patch('/:id/status', authenticateToken, authorize('admin', 'manager', 'cashier', 'kitchen'), async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { status } = req.body;\n\n    const validStatuses = ['PENDING', 'CONFIRMED', 'PREPARING', 'READY', 'SERVED', 'COMPLETED', 'CANCELLED'];\n    if (!validStatuses.includes(status)) {\n      return res.status(400).json({ error: 'Invalid status' });\n    }\n\n    // Get current order status before updating\n    const currentOrder = await db('orders').where({ id }).first();\n    \n    if (!currentOrder) {\n      return res.status(404).json({ error: 'Order not found' });\n    }\n\n    await db('orders')\n      .where({ id })\n      .update({\n        status,\n        updated_at: db.raw('CURRENT_TIMESTAMP')\n      });\n\n    const order = await db('orders')\n      .select('orders.*', 'tables.table_number')\n      .leftJoin('tables', 'orders.table_id', 'tables.id')\n      .where({ 'orders.id': id })\n      .first();\n\n    // Automatic inventory deduction when order is completed\n    if (status === 'COMPLETED' && currentOrder.status !== 'COMPLETED') {\n      try {\n        // Get all order items\n        const orderItems = await db('order_items')\n          .select('menu_item_id', 'quantity')\n          .where({ order_id: id });\n\n        for (const item of orderItems) {\n          // Get recipes for this menu item\n          const recipes = await db('recipes')\n            .select('stock_item_id', 'qty_per_serving')\n            .where({ menu_item_id: item.menu_item_id });\n\n          for (const recipe of recipes) {\n            const deductionQty = recipe.qty_per_serving * item.quantity;\n            \n            // Update stock quantity\n            await db('stock_items')\n              .where({ id: recipe.stock_item_id })\n              .decrement('quantity', deductionQty);\n\n            // Record the movement\n            await db('stock_movements').insert({\n              stock_item_id: recipe.stock_item_id,\n              movement_type: 'OUT',\n              quantity: deductionQty,\n              reference_type: 'ORDER',\n              reference_id: id,\n              notes: `Auto-deduction for order ${order.order_code}`,\n              created_by: req.user.id\n            });\n          }\n        }\n\n        logger.info(`Inventory deducted for completed order ${order.order_code}`);\n      } catch (invError) {\n        logger.error(`Inventory deduction error for order ${id}:`, invError);\n        // Don't fail the entire request if inventory deduction fails\n      }\n    }\n\n    // Emit real-time event\n    const io = req.app.get('io');\n    io.to(`branch:${order.branch_id}:kitchen`).emit('order.updated', order);\n    io.to(`branch:${order.branch_id}:cashier`).emit('order.updated', order);\n\n    // Log status change\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'ORDER_STATUS_UPDATE',\n      meta: JSON.stringify({ orderId: id, status, userId: req.user.id })\n    });\n\n    logger.info(`Order ${id} status updated to ${status} by ${req.user.username}`);\n\n    res.json({ order });\n  } catch (error) {\n    logger.error('Order status update error:', error);\n    res.status(500).json({ error: 'Failed to update order status' });\n  }\n});\n\n// Confirm order (cashier)\nrouter.post('/:id/confirm', authenticateToken, authorize('admin', 'manager', 'cashier'), async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const order = await db('orders').where({ id }).first();\n    if (!order) {\n      return res.status(404).json({ error: 'Order not found' });\n    }\n\n    if (order.status !== 'PENDING' && order.status !== 'AWAITING_PAYMENT') {\n      return res.status(400).json({ error: 'Order cannot be confirmed in current status' });\n    }\n\n    await db('orders')\n      .where({ id })\n      .update({\n        status: 'CONFIRMED',\n        updated_at: db.raw('CURRENT_TIMESTAMP')\n      });\n\n    // Consume inventory\n    await consumeInventoryForOrder(id);\n\n    // Emit real-time event\n    const io = req.app.get('io');\n    const updatedOrder = await db('orders')\n      .select('orders.*', 'tables.table_number')\n      .leftJoin('tables', 'orders.table_id', 'tables.id')\n      .where({ 'orders.id': id })\n      .first();\n\n    io.to(`branch:${order.branch_id}:kitchen`).emit('order.confirmed', updatedOrder);\n\n    // Log confirmation\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'ORDER_CONFIRM',\n      meta: JSON.stringify({ orderId: id, userId: req.user.id })\n    });\n\n    logger.info(`Order ${id} confirmed by ${req.user.username}`);\n\n    res.json({ order: updatedOrder, message: 'Order confirmed successfully' });\n  } catch (error) {\n    logger.error('Order confirmation error:', error);\n    res.status(500).json({ error: 'Failed to confirm order' });\n  }\n});\n\n// Cancel order (admin/cashier)\nrouter.post('/:id/cancel', authenticateToken, authorize('admin', 'manager', 'cashier'), async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { reason } = req.body;\n\n    const order = await db('orders').where({ id }).first();\n    if (!order) {\n      return res.status(404).json({ error: 'Order not found' });\n    }\n\n    if (order.status === 'COMPLETED' || order.status === 'CANCELLED') {\n      return res.status(400).json({ error: 'Order cannot be cancelled in current status' });\n    }\n\n    await db('orders')\n      .where({ id })\n      .update({\n        status: 'CANCELLED',\n        updated_at: db.raw('CURRENT_TIMESTAMP')\n      });\n\n    // Emit real-time event\n    const io = req.app.get('io');\n    const updatedOrder = await db('orders')\n      .select('orders.*', 'tables.table_number')\n      .leftJoin('tables', 'orders.table_id', 'tables.id')\n      .where({ 'orders.id': id })\n      .first();\n\n    io.to(`branch:${order.branch_id}:kitchen`).emit('order.cancelled', updatedOrder);\n    io.to(`branch:${order.branch_id}:cashier`).emit('order.cancelled', updatedOrder);\n\n    // Log cancellation\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'ORDER_CANCEL',\n      meta: JSON.stringify({ orderId: id, reason, userId: req.user.id })\n    });\n\n    logger.info(`Order ${id} cancelled by ${req.user.username}: ${reason}`);\n\n    res.json({ order: updatedOrder, message: 'Order cancelled successfully' });\n  } catch (error) {\n    logger.error('Order cancellation error:', error);\n    res.status(500).json({ error: 'Failed to cancel order' });\n  }\n});\n\n// Helper function to consume inventory\nasync function consumeInventoryForOrder(orderId) {\n  try {\n    const order = await db('orders').where({ id: orderId }).first();\n    const orderItems = await db('order_items').where({ order_id: orderId });\n    \n    for (const item of orderItems) {\n      const recipes = await db('recipes').where({ menu_item_id: item.menu_item_id });\n      const menuItem = await db('menu_items').where({ id: item.menu_item_id }).first();\n      \n      for (const recipe of recipes) {\n        const quantityToConsume = recipe.qty_per_serving * item.quantity;\n        \n        // Update stock quantity\n        await db('stock_items')\n          .where({ id: recipe.stock_item_id })\n          .decrement('quantity', quantityToConsume);\n\n        // Log stock movement with order tracking\n        await db('stock_movements').insert({\n          stock_item_id: recipe.stock_item_id,\n          change: -quantityToConsume,\n          reason: `Order ${order.order_code} - ${item.quantity}x ${menuItem?.name || 'item'}`,\n          order_id: orderId,\n          type: 'order'\n        });\n\n        // Check for low stock and create alert\n        const stockItem = await db('stock_items').where({ id: recipe.stock_item_id }).first();\n        if (stockItem && stockItem.quantity <= stockItem.min_threshold) {\n          // Check if there's already an unresolved alert for this item\n          const existingAlert = await db('low_stock_alerts')\n            .where({ stock_item_id: stockItem.id, is_resolved: false })\n            .first();\n\n          if (!existingAlert) {\n            await db('low_stock_alerts').insert({\n              stock_item_id: stockItem.id,\n              branch_id: stockItem.branch_id,\n              current_quantity: stockItem.quantity,\n              min_threshold: stockItem.min_threshold\n            });\n            logger.warn(`⚠️ Low stock alert: ${stockItem.name} (${stockItem.quantity} ${stockItem.unit} remaining, min: ${stockItem.min_threshold})`);\n          }\n        }\n      }\n    }\n  } catch (error) {\n    logger.error('Inventory consumption error:', error);\n    throw error;\n  }\n}\n\nmodule.exports = router;","size_bytes":32139},"server/src/routes/sync.js":{"content":"const express = require('express');\nconst { db } = require('../database/init');\nconst { authenticateToken, authorize } = require('../middleware/auth');\nconst { logger } = require('../middleware/errorHandler');\n\nconst router = express.Router();\n\n// Get sync status\nrouter.get('/status', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const syncEnabled = await db('settings').where({ key: 'sync_enabled' }).first();\n    const operatingMode = await db('settings').where({ key: 'operating_mode' }).first();\n    \n    const lastSync = await db('sync_logs')\n      .where({ synced: true })\n      .orderBy('created_at', 'desc')\n      .first();\n\n    const pendingSyncCount = await db('sync_logs')\n      .where({ synced: false })\n      .count('id as count')\n      .first();\n\n    res.json({\n      enabled: syncEnabled?.value === 'true',\n      mode: operatingMode?.value || 'LOCAL',\n      lastSync: lastSync?.created_at || null,\n      pendingCount: pendingSyncCount.count || 0\n    });\n  } catch (error) {\n    logger.error('Sync status fetch error:', error);\n    res.status(500).json({ error: 'Failed to fetch sync status' });\n  }\n});\n\n// Trigger manual sync\nrouter.post('/manual', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const operatingMode = await db('settings').where({ key: 'operating_mode' }).first();\n    const syncEnabled = await db('settings').where({ key: 'sync_enabled' }).first();\n\n    if (!syncEnabled || syncEnabled.value !== 'true') {\n      return res.status(400).json({ error: 'Sync is not enabled' });\n    }\n\n    if (operatingMode?.value === 'LOCAL') {\n      // Push local changes to cloud\n      await pushLocalChanges();\n    } else {\n      // Pull changes from cloud\n      await pullCloudChanges();\n    }\n\n    // Log manual sync\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'MANUAL_SYNC',\n      meta: JSON.stringify({ \n        mode: operatingMode?.value || 'LOCAL',\n        userId: req.user.id\n      })\n    });\n\n    logger.info(`Manual sync triggered by ${req.user.username} in ${operatingMode?.value || 'LOCAL'} mode`);\n\n    res.json({ message: 'Manual sync completed successfully' });\n  } catch (error) {\n    logger.error('Manual sync error:', error);\n    res.status(500).json({ error: 'Manual sync failed' });\n  }\n});\n\n// Push local changes to cloud\nrouter.post('/push', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { operations } = req.body;\n\n    if (!operations || !Array.isArray(operations)) {\n      return res.status(400).json({ error: 'Operations array is required' });\n    }\n\n    const results = [];\n\n    for (const operation of operations) {\n      try {\n        await processSyncOperation(operation);\n        results.push({ id: operation.id, status: 'success' });\n      } catch (error) {\n        results.push({ id: operation.id, status: 'error', error: error.message });\n      }\n    }\n\n    // Mark operations as synced\n    const operationIds = operations.map(op => op.id);\n    await db('sync_logs')\n      .whereIn('id', operationIds)\n      .update({ synced: true });\n\n    res.json({ \n      message: 'Sync operations processed',\n      results \n    });\n  } catch (error) {\n    logger.error('Sync push error:', error);\n    res.status(500).json({ error: 'Failed to process sync operations' });\n  }\n});\n\n// Pull changes from cloud\nrouter.get('/pull', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { since } = req.query;\n    \n    let query = db('sync_logs')\n      .where({ synced: false })\n      .orderBy('created_at', 'asc');\n\n    if (since) {\n      query = query.where('created_at', '>', since);\n    }\n\n    const operations = await query.limit(100);\n\n    res.json({ operations });\n  } catch (error) {\n    logger.error('Sync pull error:', error);\n    res.status(500).json({ error: 'Failed to fetch sync operations' });\n  }\n});\n\n// Get sync logs\nrouter.get('/logs', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { limit = 100, offset = 0, synced } = req.query;\n\n    let query = db('sync_logs')\n      .select('sync_logs.*')\n      .orderBy('created_at', 'desc');\n\n    if (synced !== undefined) {\n      query = query.where({ synced: synced === 'true' });\n    }\n\n    const logs = await query\n      .limit(parseInt(limit))\n      .offset(parseInt(offset));\n\n    res.json({ logs });\n  } catch (error) {\n    logger.error('Sync logs fetch error:', error);\n    res.status(500).json({ error: 'Failed to fetch sync logs' });\n  }\n});\n\n// Clear sync logs\nrouter.delete('/logs', authenticateToken, authorize('admin'), async (req, res) => {\n  try {\n    const { olderThan } = req.body;\n\n    let query = db('sync_logs');\n\n    if (olderThan) {\n      query = query.where('created_at', '<', olderThan);\n    }\n\n    const deletedCount = await query.del();\n\n    // Log sync logs cleanup\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'SYNC_LOGS_CLEANUP',\n      meta: JSON.stringify({ \n        deletedCount,\n        olderThan,\n        userId: req.user.id\n      })\n    });\n\n    logger.info(`Sync logs cleaned up by ${req.user.username}: ${deletedCount} records deleted`);\n\n    res.json({ \n      message: `${deletedCount} sync log records deleted`,\n      deletedCount \n    });\n  } catch (error) {\n    logger.error('Sync logs cleanup error:', error);\n    res.status(500).json({ error: 'Failed to clear sync logs' });\n  }\n});\n\n// Helper function to push local changes\nasync function pushLocalChanges() {\n  try {\n    const unsyncedLogs = await db('sync_logs')\n      .where({ synced: false })\n      .orderBy('created_at', 'asc');\n\n    if (unsyncedLogs.length === 0) {\n      return { message: 'No changes to sync' };\n    }\n\n    // In a real implementation, you would send these to a central server\n    // For now, we'll just mark them as synced\n    await db('sync_logs')\n      .whereIn('id', unsyncedLogs.map(log => log.id))\n      .update({ synced: true });\n\n    logger.info(`Pushed ${unsyncedLogs.length} local changes to cloud`);\n    return { message: `Pushed ${unsyncedLogs.length} changes` };\n  } catch (error) {\n    logger.error('Push local changes error:', error);\n    throw error;\n  }\n}\n\n// Helper function to pull cloud changes\nasync function pullCloudChanges() {\n  try {\n    // In a real implementation, you would fetch changes from a central server\n    // For now, we'll just return a success message\n    logger.info('Pulled changes from cloud');\n    return { message: 'Pulled changes from cloud' };\n  } catch (error) {\n    logger.error('Pull cloud changes error:', error);\n    throw error;\n  }\n}\n\n// Helper function to process sync operation\nasync function processSyncOperation(operation) {\n  try {\n    const { table_name, record_id, operation: op, payload } = operation;\n\n    switch (op) {\n      case 'INSERT':\n        await db(table_name).insert(JSON.parse(payload));\n        break;\n      case 'UPDATE':\n        const updateData = JSON.parse(payload);\n        await db(table_name).where({ id: record_id }).update(updateData);\n        break;\n      case 'DELETE':\n        await db(table_name).where({ id: record_id }).del();\n        break;\n      default:\n        throw new Error(`Unknown operation: ${op}`);\n    }\n\n    logger.info(`Processed sync operation: ${op} on ${table_name}:${record_id}`);\n  } catch (error) {\n    logger.error('Process sync operation error:', error);\n    throw error;\n  }\n}\n\n// Helper function to log sync operation\nasync function logSyncOperation(tableName, recordId, operation, payload) {\n  try {\n    await db('sync_logs').insert({\n      table_name: tableName,\n      record_id: recordId,\n      operation,\n      payload: JSON.stringify(payload),\n      synced: false\n    });\n  } catch (error) {\n    logger.error('Log sync operation error:', error);\n  }\n}\n\nmodule.exports = {\n  router,\n  logSyncOperation\n};","size_bytes":7894},"server/src/utils/db.ts":{"content":"import knex, { Knex } from 'knex';\nimport path from 'path';\nimport dotenv from 'dotenv';\n\ndotenv.config({ path: path.resolve(process.cwd(), 'server/.env') });\n\nconst mode = process.env.MODE || 'LOCAL';\n\nlet db: Knex;\n\nif (mode === 'LOCAL') {\n  db = knex({\n    client: 'sqlite3',\n    connection: {\n      filename: process.env.SQLITE_PATH || path.resolve(process.cwd(), 'server/data/posq.sqlite')\n    },\n    useNullAsDefault: true\n  });\n} else {\n  db = knex({\n    client: (process.env.DB_CLIENT || 'mysql2') as any,\n    connection: {\n      host: process.env.DB_HOST,\n      port: process.env.DB_PORT ? Number(process.env.DB_PORT) : undefined,\n      database: process.env.DB_NAME,\n      user: process.env.DB_USER,\n      password: process.env.DB_PASSWORD\n    }\n  });\n}\n\nexport default db;\n","size_bytes":784},"frontend/src/components/ImageUpload.jsx":{"content":"import { useState, useRef } from \"react\";\nimport { uploadAPI } from \"../services/api\";\nimport {\n  PhotoIcon,\n  XMarkIcon,\n  CloudArrowUpIcon,\n} from \"@heroicons/react/24/outline\";\nimport toast from \"react-hot-toast\";\n\nfunction ImageUpload({\n  value = \"\",\n  onChange,\n  className = \"\",\n  disabled = false,\n  showPreview = true,\n  maxSize = 5 * 1024 * 1024, // 5MB\n  acceptedTypes = [\n    \"image/jpeg\",\n    \"image/jpg\",\n    \"image/png\",\n    \"image/gif\",\n    \"image/webp\",\n  ],\n}) {\n  const [uploading, setUploading] = useState(false);\n  const [dragActive, setDragActive] = useState(false);\n  const fileInputRef = useRef(null);\n\n  const handleFileSelect = async (file) => {\n    if (!file) return;\n\n    // Validate file type\n    if (!acceptedTypes.includes(file.type)) {\n      toast.error(\"Please select a valid image file (JPEG, PNG, GIF, WebP)\");\n      return;\n    }\n\n    // Validate file size\n    if (file.size > maxSize) {\n      toast.error(\n        `File size must be less than ${Math.round(maxSize / 1024 / 1024)}MB`,\n      );\n      return;\n    }\n\n    setUploading(true);\n\n    try {\n      const formData = new FormData();\n      formData.append(\"image\", file);\n\n      const response = await uploadAPI.uploadImage(formData);\n\n      if (response.data.success) {\n        onChange(response.data.imageUrl);\n        toast.success(\"Image uploaded successfully\");\n      } else {\n        throw new Error(\"Upload failed\");\n      }\n    } catch (error) {\n      console.error(\"Upload error:\", error);\n      toast.error(error.response?.data?.error || \"Failed to upload image\");\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleFileInputChange = (e) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      handleFileSelect(file);\n    }\n  };\n\n  const handleDrop = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n\n    const file = e.dataTransfer.files?.[0];\n    if (file) {\n      handleFileSelect(file);\n    }\n  };\n\n  const handleDragOver = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(true);\n  };\n\n  const handleDragLeave = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n  };\n\n  const removeImage = () => {\n    onChange(\"\");\n  };\n\n  const openFileDialog = () => {\n    if (!disabled && !uploading) {\n      fileInputRef.current?.click();\n    }\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      {/* Upload Area */}\n      <div\n        className={`relative border-2 border-dashed rounded-2xl p-8 text-center cursor-pointer transition-all duration-300 ${\n          dragActive\n            ? \"border-blue-500 bg-blue-50 scale-105 shadow-lg\"\n            : \"border-gray-300 hover:border-blue-400 hover:bg-blue-50/50 hover:scale-102\"\n        } ${disabled ? \"opacity-50 cursor-not-allowed\" : \"\"}`}\n        onDrop={handleDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={openFileDialog}\n      >\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          accept={acceptedTypes.join(\",\")}\n          onChange={handleFileInputChange}\n          className=\"hidden\"\n          disabled={disabled || uploading}\n        />\n\n        {uploading ? (\n          <div className=\"flex flex-col items-center\">\n            <div className=\"loading-spinner mb-4\"></div>\n            <p className=\"text-lg text-gray-600 font-medium\">Uploading...</p>\n          </div>\n        ) : (\n          <div className=\"flex flex-col items-center\">\n            <div className=\"w-16 h-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center mb-4 shadow-lg\">\n              <CloudArrowUpIcon className=\"h-8 w-8 text-white\" />\n            </div>\n            <p className=\"text-lg text-gray-700 mb-2\">\n              <span className=\"font-semibold gradient-text\">\n                Click to upload\n              </span>{\" \"}\n              or drag and drop\n            </p>\n            <p className=\"text-sm text-gray-500\">\n              PNG, JPG, GIF, WebP up to {Math.round(maxSize / 1024 / 1024)}MB\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Image Preview */}\n      {showPreview && value && (\n        <div className=\"relative animate-fadeInUp\">\n          <div className=\"relative inline-block\">\n            <img\n              src={value}\n              alt=\"Uploaded\"\n              className=\"h-40 w-40 object-cover rounded-2xl border-2 border-gray-200 shadow-lg hover:shadow-xl transition-shadow duration-300\"\n              onError={(e) => {\n                console.error(\"Failed to load image:\", value);\n                e.target.src = 'data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"160\" height=\"160\"><rect width=\"160\" height=\"160\" fill=\"%23f3f4f6\"/><text x=\"50%\" y=\"50%\" font-family=\"Arial\" font-size=\"14\" fill=\"%239ca3af\" text-anchor=\"middle\" dy=\".3em\">Image Error</text></svg>';\n              }}\n            />\n            {!disabled && (\n              <button\n                onClick={removeImage}\n                className=\"absolute -top-2 -right-2 bg-gradient-to-r from-red-500 to-pink-500 text-white rounded-full p-2 hover:from-red-600 hover:to-pink-600 transition-all duration-200 shadow-lg hover:scale-110\"\n                type=\"button\"\n              >\n                <XMarkIcon className=\"h-4 w-4\" />\n              </button>\n            )}\n          </div>\n          <p className=\"text-sm text-gray-500 mt-2 font-medium\">\n            Click the X to remove\n          </p>\n        </div>\n      )}\n\n      {/* Current Image URL (for debugging) */}\n      {value && (\n        <div className=\"text-xs text-gray-500 break-all\">\n          <span className=\"font-medium\">Current image:</span> {value}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ImageUpload;\n","size_bytes":5803},"frontend/src/contexts/SocketContext.jsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react'\nimport { io } from 'socket.io-client'\nimport { useAuth } from './AuthContext'\nimport toast from 'react-hot-toast'\n\nconst SocketContext = createContext()\n\nexport function SocketProvider({ children }) {\n  const [socket, setSocket] = useState(null)\n  const [isConnected, setIsConnected] = useState(false)\n  const [orders, setOrders] = useState([])\n  const { isAuthenticated, user } = useAuth()\n\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      const socketInstance = io(import.meta.env.VITE_API_URL || 'http://localhost:3001', {\n        transports: ['websocket'],\n        auth: {\n          userId: user.id,\n          role: user.role\n        }\n      })\n\n      socketInstance.on('connect', () => {\n        console.log('Socket connected:', socketInstance.id)\n        setIsConnected(true)\n        \n        // Join appropriate rooms based on user role\n        if (user.role === 'kitchen') {\n          socketInstance.emit('join-kitchen', 1) // Default branch ID\n        } else if (['admin', 'manager', 'cashier'].includes(user.role)) {\n          socketInstance.emit('join-cashier', 1) // Default branch ID\n        }\n      })\n\n      socketInstance.on('disconnect', () => {\n        console.log('Socket disconnected')\n        setIsConnected(false)\n      })\n\n      socketInstance.on('connect_error', (error) => {\n        console.error('Socket connection error:', error)\n        setIsConnected(false)\n      })\n\n      // Order events\n      socketInstance.on('order.created', (order) => {\n        console.log('New order created:', order)\n        setOrders(prev => [order, ...prev])\n        \n        if (user.role === 'kitchen') {\n          toast.success(`New order: ${order.order_code}`)\n        } else if (['admin', 'manager', 'cashier'].includes(user.role)) {\n          toast.success(`New order: ${order.order_code} - Table ${order.table_number}`)\n        }\n      })\n\n      socketInstance.on('order.updated', (order) => {\n        console.log('Order updated:', order)\n        setOrders(prev => \n          prev.map(o => o.id === order.id ? { ...o, ...order } : o)\n        )\n        \n        if (user.role === 'kitchen') {\n          toast.info(`Order ${order.order_code} status: ${order.status}`)\n        }\n      })\n\n      socketInstance.on('order.confirmed', (order) => {\n        console.log('Order confirmed:', order)\n        setOrders(prev => \n          prev.map(o => o.id === order.id ? { ...o, ...order } : o)\n        )\n        \n        if (user.role === 'kitchen') {\n          toast.success(`Order ${order.order_code} confirmed - Start preparing!`)\n        }\n      })\n\n      socketInstance.on('order.cancelled', (order) => {\n        console.log('Order cancelled:', order)\n        setOrders(prev => \n          prev.map(o => o.id === order.id ? { ...o, ...order } : o)\n        )\n        \n        if (user.role === 'kitchen') {\n          toast.error(`Order ${order.order_code} cancelled`)\n        }\n      })\n\n      // Payment events\n      socketInstance.on('payment.recorded', (data) => {\n        console.log('Payment recorded:', data)\n        setOrders(prev => \n          prev.map(o => o.id === data.orderId ? { ...o, payment_status: data.paymentStatus } : o)\n        )\n        \n        if (['admin', 'manager', 'cashier'].includes(user.role)) {\n          toast.success(`Payment recorded: ${data.totalPaid} MAD`)\n        }\n      })\n\n      // Kitchen acknowledgment\n      socketInstance.on('kitchen.ack', (data) => {\n        console.log('Kitchen acknowledgment:', data)\n        setOrders(prev => \n          prev.map(o => o.id === data.orderId ? { ...o, status: 'PREPARING' } : o)\n        )\n      })\n\n      // Printer events\n      socketInstance.on('printer.status', (data) => {\n        console.log('Printer status:', data)\n        if (data.status === 'error') {\n          toast.error(`Printer ${data.printerId} error: ${data.error}`)\n        }\n      })\n\n      setSocket(socketInstance)\n\n      return () => {\n        socketInstance.disconnect()\n        setSocket(null)\n        setIsConnected(false)\n      }\n    }\n  }, [isAuthenticated, user])\n\n  const updateOrderStatus = (orderId, status) => {\n    if (socket) {\n      socket.emit('order-status-update', {\n        orderId,\n        status,\n        userId: user?.id\n      })\n    }\n  }\n\n  const acknowledgeOrder = (orderId) => {\n    if (socket && user?.role === 'kitchen') {\n      socket.emit('kitchen-ack', {\n        orderId,\n        userId: user.id\n      })\n    }\n  }\n\n  const updatePaymentStatus = (orderId, paymentStatus) => {\n    if (socket) {\n      socket.emit('payment-update', {\n        orderId,\n        paymentStatus,\n        userId: user?.id\n      })\n    }\n  }\n\n  const joinBranch = (branchId) => {\n    if (socket) {\n      socket.emit('join-branch', branchId)\n    }\n  }\n\n  const value = {\n    socket,\n    isConnected,\n    orders,\n    updateOrderStatus,\n    acknowledgeOrder,\n    updatePaymentStatus,\n    joinBranch\n  }\n\n  return (\n    <SocketContext.Provider value={value}>\n      {children}\n    </SocketContext.Provider>\n  )\n}\n\nexport function useSocket() {\n  const context = useContext(SocketContext)\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider')\n  }\n  return context\n}","size_bytes":5237},"server/src/seeds/02_app_settings.js":{"content":"exports.seed = async function(knex) {\n  // Delete existing entries\n  await knex('app_settings').del();\n\n  // Insert app settings\n  await knex('app_settings').insert([\n    // General Settings\n    {\n      key: 'app_name',\n      value: 'POSQ Restaurant',\n      type: 'string',\n      category: 'general',\n      description: 'Application name displayed throughout the app',\n      is_public: true\n    },\n    {\n      key: 'app_description',\n      value: 'Modern Restaurant Management System',\n      type: 'string',\n      category: 'general',\n      description: 'Application description',\n      is_public: true\n    },\n    {\n      key: 'currency',\n      value: 'MAD',\n      type: 'string',\n      category: 'general',\n      description: 'Default currency',\n      is_public: true\n    },\n    {\n      key: 'tax_rate',\n      value: '10',\n      type: 'number',\n      category: 'general',\n      description: 'Tax rate percentage',\n      is_public: false\n    },\n    {\n      key: 'service_charge',\n      value: '5',\n      type: 'number',\n      category: 'general',\n      description: 'Service charge percentage',\n      is_public: false\n    },\n\n    // Theme Settings\n    {\n      key: 'primary_color',\n      value: '#3B82F6',\n      type: 'color',\n      category: 'theme',\n      description: 'Primary brand color',\n      is_public: true\n    },\n    {\n      key: 'secondary_color',\n      value: '#1E40AF',\n      type: 'color',\n      category: 'theme',\n      description: 'Secondary brand color',\n      is_public: true\n    },\n    {\n      key: 'accent_color',\n      value: '#60A5FA',\n      type: 'color',\n      category: 'theme',\n      description: 'Accent color for highlights',\n      is_public: true\n    },\n    {\n      key: 'success_color',\n      value: '#10B981',\n      type: 'color',\n      category: 'theme',\n      description: 'Success state color',\n      is_public: true\n    },\n    {\n      key: 'warning_color',\n      value: '#F59E0B',\n      type: 'color',\n      category: 'theme',\n      description: 'Warning state color',\n      is_public: true\n    },\n    {\n      key: 'error_color',\n      value: '#EF4444',\n      type: 'color',\n      category: 'theme',\n      description: 'Error state color',\n      is_public: true\n    },\n    {\n      key: 'background_color',\n      value: '#F8FAFC',\n      type: 'color',\n      category: 'theme',\n      description: 'Background color',\n      is_public: true\n    },\n    {\n      key: 'surface_color',\n      value: '#FFFFFF',\n      type: 'color',\n      category: 'theme',\n      description: 'Surface/card background color',\n      is_public: true\n    },\n    {\n      key: 'text_primary',\n      value: '#1E293B',\n      type: 'color',\n      category: 'theme',\n      description: 'Primary text color',\n      is_public: true\n    },\n    {\n      key: 'text_secondary',\n      value: '#64748B',\n      type: 'color',\n      category: 'theme',\n      description: 'Secondary text color',\n      is_public: true\n    },\n\n    // Branding Settings\n    {\n      key: 'logo_url',\n      value: '',\n      type: 'string',\n      category: 'branding',\n      description: 'Logo image URL',\n      is_public: true\n    },\n    {\n      key: 'favicon_url',\n      value: '',\n      type: 'string',\n      category: 'branding',\n      description: 'Favicon image URL',\n      is_public: true\n    },\n    {\n      key: 'welcome_message',\n      value: 'Welcome to our restaurant!',\n      type: 'string',\n      category: 'branding',\n      description: 'Welcome message for customers',\n      is_public: true\n    },\n\n    // Layout Settings\n    {\n      key: 'sidebar_width',\n      value: '256',\n      type: 'number',\n      category: 'layout',\n      description: 'Admin sidebar width in pixels',\n      is_public: false\n    },\n    {\n      key: 'header_height',\n      value: '64',\n      type: 'number',\n      category: 'layout',\n      description: 'Header height in pixels',\n      is_public: false\n    },\n    {\n      key: 'border_radius',\n      value: '12',\n      type: 'number',\n      category: 'layout',\n      description: 'Default border radius in pixels',\n      is_public: true\n    },\n    {\n      key: 'shadow_intensity',\n      value: 'medium',\n      type: 'string',\n      category: 'layout',\n      description: 'Shadow intensity (light, medium, heavy)',\n      is_public: true\n    },\n\n    // Payment Settings\n    {\n      key: 'payment_methods',\n      value: '[\"cash\", \"card\"]',\n      type: 'json',\n      category: 'payment',\n      description: 'Available payment methods',\n      is_public: true\n    },\n    {\n      key: 'cash_only_mode',\n      value: 'false',\n      type: 'boolean',\n      category: 'payment',\n      description: 'Enable cash-only mode',\n      is_public: true\n    },\n\n    // UI Text Settings\n    {\n      key: 'header_text',\n      value: 'Welcome to our restaurant!',\n      type: 'string',\n      category: 'ui_text',\n      description: 'Header text for menu page',\n      is_public: true\n    },\n    {\n      key: 'footer_text',\n      value: 'Thank you for choosing us!',\n      type: 'string',\n      category: 'ui_text',\n      description: 'Footer text for menu page',\n      is_public: true\n    },\n    {\n      key: 'order_instructions',\n      value: 'Scan QR code to order • Pay at cashier',\n      type: 'string',\n      category: 'ui_text',\n      description: 'Order instructions text',\n      is_public: true\n    },\n\n    // Menu Template Settings\n    {\n      key: 'menu_template',\n      value: 'default',\n      type: 'string',\n      category: 'ui_text',\n      description: 'Menu page template (default, modern, elegant, minimal)',\n      is_public: true\n    }\n  ]);\n};","size_bytes":5545},"server/src/routes/modules/settings.ts":{"content":"import { Router } from 'express';\nimport db from '../../utils/db';\nimport { authenticate, authorize } from '../../middlewares/auth';\n\nconst router = Router();\n\nrouter.get('/', authenticate, authorize(['admin','manager']), async (_req, res) => {\n  const rows = await db('settings');\n  const settings: Record<string, string> = {};\n  for (const r of rows) settings[r.key] = r.value;\n  res.json(settings);\n});\n\nrouter.put('/', authenticate, authorize(['admin']), async (req, res) => {\n  const entries = Object.entries(req.body || {});\n  try {\n    await db.transaction(async (trx) => {\n      for (const [key, value] of entries) {\n        const exists = await trx('settings').where({ key }).first();\n        if (exists) await trx('settings').where({ key }).update({ value });\n        else await trx('settings').insert({ key, value });\n      }\n    });\n    res.json({ ok: true });\n  } catch (e: any) {\n    res.status(400).json({ error: 'Failed to update settings', details: e.message });\n  }\n});\n\nexport default router;\n","size_bytes":1012},"DEPLOYMENT.md":{"content":"# POSQ Deployment Guide\n\nThis guide covers different deployment scenarios for the POSQ Restaurant POS system.\n\n## 🚀 Quick Start (Docker)\n\n### Prerequisites\n- Docker and Docker Compose\n- Git\n\n### 1. Clone and Setup\n```bash\ngit clone <repository-url>\ncd posq-restaurant-pos\nchmod +x scripts/setup.sh\n./scripts/setup.sh\n```\n\n### 2. Start Services\n```bash\n./start.sh\n```\n\n### 3. Access Application\n- **Customer PWA**: http://localhost:5173\n- **Admin Dashboard**: http://localhost:5173/admin/login\n- **API Server**: http://localhost:3000\n- **Printer Service**: http://localhost:4000\n\n## 🏠 Local Development\n\n### Prerequisites\n- Node.js 18+\n- npm or yarn\n\n### 1. Install Dependencies\n```bash\nnpm install\ncd server && npm install\ncd ../frontend && npm install\ncd ../printer-service && npm install\n```\n\n### 2. Environment Setup\n```bash\ncp .env.example .env\n# Edit .env with your configuration\n```\n\n### 3. Database Setup\n```bash\ncd server\nnpm run migrate\nnpm run seed\n```\n\n### 4. Start Development Servers\n```bash\n# Terminal 1: Backend\ncd server && npm run dev\n\n# Terminal 2: Frontend\ncd frontend && npm run dev\n\n# Terminal 3: Printer Service\ncd printer-service && npm run dev\n```\n\n## ☁️ Cloud Deployment\n\n### Option 1: VPS Deployment\n\n#### 1. Server Setup\n```bash\n# Update system\nsudo apt update && sudo apt upgrade -y\n\n# Install Docker\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsh get-docker.sh\nsudo usermod -aG docker $USER\n\n# Install Docker Compose\nsudo curl -L \"https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n```\n\n#### 2. Application Deployment\n```bash\n# Clone repository\ngit clone <repository-url>\ncd posq-restaurant-pos\n\n# Configure environment\ncp .env.example .env\nnano .env\n# Set OPERATING_MODE=CLOUD\n# Configure database credentials\n# Set domain and SSL settings\n\n# Start services\ndocker-compose up --build -d\n```\n\n#### 3. SSL Setup (Nginx + Certbot)\n```bash\n# Install Nginx\nsudo apt install nginx certbot python3-certbot-nginx -y\n\n# Configure Nginx\nsudo nano /etc/nginx/sites-available/posq\n```\n\nNginx configuration:\n```nginx\nserver {\n    listen 80;\n    server_name your-domain.com;\n\n    location / {\n        proxy_pass http://localhost:5173;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n\n    location /api {\n        proxy_pass http://localhost:3000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n\n    location /socket.io {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\n```bash\n# Enable site\nsudo ln -s /etc/nginx/sites-available/posq /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl reload nginx\n\n# Get SSL certificate\nsudo certbot --nginx -d your-domain.com\n```\n\n### Option 2: Docker Swarm\n\n#### 1. Initialize Swarm\n```bash\ndocker swarm init\n```\n\n#### 2. Deploy Stack\n```bash\ndocker stack deploy -c docker-compose.yml posq\n```\n\n#### 3. Scale Services\n```bash\ndocker service scale posq_api=3\ndocker service scale posq_frontend=2\n```\n\n## 🗄️ Database Setup\n\n### SQLite (Local Mode)\n```bash\n# Database is automatically created\n# Located at: server/data/posq.db\n# Backup: cp server/data/posq.db backups/\n```\n\n### MySQL (Cloud Mode)\n```bash\n# Install MySQL\nsudo apt install mysql-server -y\n\n# Create database\nmysql -u root -p\nCREATE DATABASE posq;\nCREATE USER 'posq'@'localhost' IDENTIFIED BY 'your_password';\nGRANT ALL PRIVILEGES ON posq.* TO 'posq'@'localhost';\nFLUSH PRIVILEGES;\nEXIT;\n\n# Run migrations\ncd server\nDB_TYPE=mysql npm run migrate\nnpm run seed\n```\n\n### PostgreSQL (Cloud Mode)\n```bash\n# Install PostgreSQL\nsudo apt install postgresql postgresql-contrib -y\n\n# Create database\nsudo -u postgres psql\nCREATE DATABASE posq;\nCREATE USER posq WITH PASSWORD 'your_password';\nGRANT ALL PRIVILEGES ON DATABASE posq TO posq;\n\\q\n\n# Run migrations\ncd server\nDB_TYPE=pg npm run migrate\nnpm run seed\n```\n\n## 🖨️ Printer Setup\n\n### Network Printers\n1. Connect printer to network\n2. Note printer IP address\n3. Configure in admin settings\n4. Test print from dashboard\n\n### USB Printers\n1. Connect printer via USB\n2. Install printer drivers\n3. Configure printer service\n4. Test connection\n\n### Printer Configuration\n```bash\n# Test printer service\ncurl -X POST http://localhost:4000/test \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"printerId\": \"kitchen\"}'\n```\n\n## 🔧 Configuration\n\n### Environment Variables\n\n#### Required\n```bash\nNODE_ENV=production\nPORT=3000\nFRONTEND_URL=https://your-domain.com\nDB_TYPE=mysql\nDB_HOST=localhost\nDB_PORT=3306\nDB_NAME=posq\nDB_USER=posq\nDB_PASSWORD=your_password\nJWT_SECRET=your-super-secret-jwt-key\n```\n\n#### Optional\n```bash\n# Payment Gateway\nSTRIPE_SECRET_KEY=sk_live_...\nSTRIPE_PUBLISHABLE_KEY=pk_live_...\n\n# Printer Service\nDEFAULT_PRINTER_IP=192.168.1.100\n\n# Operating Mode\nOPERATING_MODE=CLOUD\n\n# Sync Settings\nSYNC_ENABLED=true\nCENTRAL_SERVER_URL=https://central.posq.com\n```\n\n### SSL Configuration\n```bash\n# Generate SSL certificate\nsudo certbot certonly --standalone -d your-domain.com\n\n# Auto-renewal\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet\n```\n\n## 📊 Monitoring\n\n### Health Checks\n```bash\n# API Health\ncurl http://localhost:3000/health\n\n# Printer Service Health\ncurl http://localhost:4000/health\n\n# Database Connection\ncurl http://localhost:3000/api/settings/database/test\n```\n\n### Logs\n```bash\n# View logs\ndocker-compose logs -f\n\n# Specific service logs\ndocker-compose logs -f api\ndocker-compose logs -f frontend\ndocker-compose logs -f printer\n```\n\n### Backup\n```bash\n# Automated backup script\n./scripts/backup.sh\n\n# Manual backup\n./scripts/backup.sh sqlite\n./scripts/backup.sh mysql\n./scripts/backup.sh postgresql\n```\n\n## 🔄 Updates\n\n### Application Updates\n```bash\n# Pull latest changes\ngit pull origin main\n\n# Rebuild and restart\ndocker-compose down\ndocker-compose up --build -d\n\n# Run migrations if needed\ndocker-compose exec api npm run migrate\n```\n\n### Database Migrations\n```bash\n# Run migrations\ndocker-compose exec api npm run migrate\n\n# Rollback if needed\ndocker-compose exec api npm run migrate:rollback\n```\n\n## 🚨 Troubleshooting\n\n### Common Issues\n\n#### 1. Database Connection Failed\n```bash\n# Check database status\nsudo systemctl status mysql\nsudo systemctl status postgresql\n\n# Test connection\nmysql -u posq -p posq\npsql -U posq -d posq\n```\n\n#### 2. Printer Not Working\n```bash\n# Check printer service\ncurl http://localhost:4000/health\n\n# Test printer connection\ntelnet 192.168.1.100 9100\n```\n\n#### 3. SSL Certificate Issues\n```bash\n# Check certificate\nsudo certbot certificates\n\n# Renew certificate\nsudo certbot renew\n```\n\n#### 4. Performance Issues\n```bash\n# Check resource usage\ndocker stats\n\n# Scale services\ndocker-compose up --scale api=3 -d\n```\n\n### Log Analysis\n```bash\n# Application logs\ntail -f server/logs/combined.log\ntail -f server/logs/error.log\n\n# System logs\njournalctl -u docker\njournalctl -u nginx\n```\n\n## 🔒 Security\n\n### Firewall Configuration\n```bash\n# Allow necessary ports\nsudo ufw allow 22    # SSH\nsudo ufw allow 80    # HTTP\nsudo ufw allow 443   # HTTPS\nsudo ufw enable\n```\n\n### Database Security\n```bash\n# MySQL security\nsudo mysql_secure_installation\n\n# PostgreSQL security\nsudo -u postgres psql\nALTER USER posq PASSWORD 'strong_password';\n```\n\n### Application Security\n- Use strong JWT secrets\n- Enable HTTPS in production\n- Regular security updates\n- Monitor access logs\n- Implement rate limiting\n\n## 📈 Scaling\n\n### Horizontal Scaling\n```bash\n# Scale API servers\ndocker-compose up --scale api=5 -d\n\n# Load balancer configuration\n# Use Nginx or HAProxy for load balancing\n```\n\n### Database Scaling\n- Use read replicas for MySQL/PostgreSQL\n- Implement connection pooling\n- Consider database sharding for large deployments\n\n### Caching\n```bash\n# Redis configuration\n# Enable Redis for session storage and caching\n```\n\n## 🆘 Support\n\n### Getting Help\n1. Check the logs first\n2. Review this deployment guide\n3. Check GitHub issues\n4. Contact support team\n\n### Emergency Procedures\n```bash\n# Stop all services\ndocker-compose down\n\n# Restore from backup\n./scripts/restore.sh sqlite backups/posq_20240101.db.gz\n\n# Restart services\ndocker-compose up -d\n```\n\n---\n\n**POSQ Deployment Guide** - Comprehensive deployment instructions for all scenarios.","size_bytes":8460},"printer-service/index.js":{"content":"const express = require('express');\n<<<<<<< HEAD\n<<<<<<< HEAD\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nconst { io } = require('socket.io-client');\nconst winston = require('winston');\nrequire('dotenv').config();\n\nconst PrinterManager = require('./src/printer-manager');\nconst ReceiptGenerator = require('./src/receipt-generator');\n\n// Configure logger\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  defaultMeta: { service: 'posq-printer' },\n  transports: [\n    new winston.transports.File({ filename: 'logs/printer-error.log', level: 'error' }),\n    new winston.transports.File({ filename: 'logs/printer-combined.log' }),\n    new winston.transports.Console({\n      format: winston.format.simple()\n    })\n  ]\n});\n\nconst app = express();\nconst PORT = process.env.PORT || 4000;\n\n// Middleware\napp.use(cors());\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// Initialize printer manager\nconst printerManager = new PrinterManager(logger);\nconst receiptGenerator = new ReceiptGenerator();\n\n// Connect to main API server via Socket.IO\nconst apiSocket = io(process.env.API_URL || 'http://localhost:3000', {\n  transports: ['websocket']\n});\n\napiSocket.on('connect', () => {\n  logger.info('Connected to API server');\n});\n\napiSocket.on('disconnect', () => {\n  logger.error('Disconnected from API server');\n});\n\n// Listen for print jobs from API server\napiSocket.on('print.job', async (data) => {\n  try {\n    logger.info(`Received print job: ${data.type} for order ${data.orderId}`);\n    await handlePrintJob(data);\n  } catch (error) {\n    logger.error('Error handling print job:', error);\n    apiSocket.emit('print.error', {\n      jobId: data.jobId,\n      error: error.message\n    });\n  }\n});\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({\n    status: 'OK',\n    timestamp: new Date().toISOString(),\n    printers: printerManager.getPrinterStatus()\n  });\n});\n\n// Get printer status\napp.get('/printers', (req, res) => {\n  try {\n    const printers = printerManager.getPrinterStatus();\n    res.json({ printers });\n  } catch (error) {\n    logger.error('Error fetching printer status:', error);\n    res.status(500).json({ error: 'Failed to fetch printer status' });\n  }\n});\n\n// Test print endpoint\napp.post('/test', async (req, res) => {\n  try {\n    const { printerId } = req.body;\n    \n    const testContent = receiptGenerator.generateTestReceipt();\n    const success = await printerManager.print(printerId, testContent);\n    \n    if (success) {\n      res.json({ message: 'Test print successful' });\n    } else {\n      res.status(500).json({ error: 'Test print failed' });\n    }\n  } catch (error) {\n    logger.error('Test print error:', error);\n    res.status(500).json({ error: 'Test print failed' });\n  }\n});\n\n// Print receipt endpoint\napp.post('/print', async (req, res) => {\n  try {\n    const { printerId, content, type = 'receipt' } = req.body;\n    \n    if (!printerId || !content) {\n      return res.status(400).json({ error: 'Printer ID and content are required' });\n    }\n\n    const success = await printerManager.print(printerId, content);\n    \n    if (success) {\n      res.json({ message: 'Print job successful' });\n    } else {\n      res.status(500).json({ error: 'Print job failed' });\n    }\n  } catch (error) {\n    logger.error('Print job error:', error);\n    res.status(500).json({ error: 'Print job failed' });\n  }\n});\n\n// Print order receipt\napp.post('/print/order', async (req, res) => {\n  try {\n    const { orderData, printerId } = req.body;\n    \n    if (!orderData || !printerId) {\n      return res.status(400).json({ error: 'Order data and printer ID are required' });\n    }\n\n    const receiptContent = receiptGenerator.generateOrderReceipt(orderData);\n    const success = await printerManager.print(printerId, receiptContent);\n    \n    if (success) {\n      // Notify API server of successful print\n      apiSocket.emit('print.success', {\n        orderId: orderData.id,\n        printerId,\n        timestamp: new Date().toISOString()\n      });\n      \n      res.json({ message: 'Order receipt printed successfully' });\n    } else {\n      // Notify API server of failed print\n      apiSocket.emit('print.error', {\n        orderId: orderData.id,\n        printerId,\n        error: 'Print failed',\n        timestamp: new Date().toISOString()\n      });\n      \n      res.status(500).json({ error: 'Order receipt print failed' });\n    }\n  } catch (error) {\n    logger.error('Order print error:', error);\n    \n    // Notify API server of error\n    apiSocket.emit('print.error', {\n      orderId: req.body.orderData?.id,\n      printerId: req.body.printerId,\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n    \n    res.status(500).json({ error: 'Order receipt print failed' });\n  }\n});\n\n// Add printer endpoint\napp.post('/printers', async (req, res) => {\n  try {\n    const { id, name, type, connection } = req.body;\n    \n    if (!id || !name || !type || !connection) {\n      return res.status(400).json({ error: 'All printer fields are required' });\n    }\n\n    const success = await printerManager.addPrinter(id, name, type, connection);\n    \n    if (success) {\n      res.json({ message: 'Printer added successfully' });\n    } else {\n      res.status(500).json({ error: 'Failed to add printer' });\n    }\n  } catch (error) {\n    logger.error('Add printer error:', error);\n    res.status(500).json({ error: 'Failed to add printer' });\n  }\n});\n\n// Remove printer endpoint\napp.delete('/printers/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    const success = await printerManager.removePrinter(id);\n    \n    if (success) {\n      res.json({ message: 'Printer removed successfully' });\n    } else {\n      res.status(500).json({ error: 'Failed to remove printer' });\n    }\n  } catch (error) {\n    logger.error('Remove printer error:', error);\n    res.status(500).json({ error: 'Failed to remove printer' });\n  }\n});\n\n// Handle print job from API server\nasync function handlePrintJob(data) {\n  try {\n    const { type, orderData, printerId, jobId } = data;\n    \n    let content;\n    switch (type) {\n      case 'order':\n        content = receiptGenerator.generateOrderReceipt(orderData);\n        break;\n      case 'test':\n        content = receiptGenerator.generateTestReceipt();\n        break;\n      default:\n        throw new Error(`Unknown print type: ${type}`);\n    }\n\n    const success = await printerManager.print(printerId, content);\n    \n    if (success) {\n      apiSocket.emit('print.success', {\n        jobId,\n        orderId: orderData?.id,\n        printerId,\n        timestamp: new Date().toISOString()\n      });\n    } else {\n      apiSocket.emit('print.error', {\n        jobId,\n        orderId: orderData?.id,\n        printerId,\n        error: 'Print failed',\n        timestamp: new Date().toISOString()\n      });\n    }\n  } catch (error) {\n    logger.error('Handle print job error:', error);\n    apiSocket.emit('print.error', {\n      jobId: data.jobId,\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n}\n\n// Start server\napp.listen(PORT, () => {\n  logger.info(`🖨️  POSQ Printer Service running on port ${PORT}`);\n  logger.info(`📡 API Server: ${process.env.API_URL || 'http://localhost:3000'}`);\n});\n\n// Graceful shutdown\nprocess.on('SIGINT', () => {\n  logger.info('Shutting down printer service...');\n  apiSocket.disconnect();\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', () => {\n  logger.info('Shutting down printer service...');\n  apiSocket.disconnect();\n  process.exit(0);\n});\n=======\n=======\n>>>>>>> origin/main\nconst bodyParser = require('body-parser');\nconst app = express();\napp.use(bodyParser.json());\n\napp.post('/print', async (req, res) => {\n  const { printerId, content } = req.body;\n  try {\n    console.log('Printing on', printerId);\n    console.log(content);\n    res.json({ ok: true });\n  } catch (err) {\n    console.error('Print error', err);\n    res.status(500).json({ ok: false, error: err.message });\n  }\n});\n\napp.get('/health', (_req, res) => res.json({ ok: true }));\n\napp.listen(4000, () => console.log('Printer service running on 4000'));\n<<<<<<< HEAD\n>>>>>>> e0c392214cbb541e36508749d9336f9cc9e18c38\n=======\n>>>>>>> origin/main\n","size_bytes":8386},"UI_IMPROVEMENTS.md":{"content":"# 🎨 Modern UI Improvements for POSQ Restaurant System\n\n## ✨ Overview\nI've completely transformed the POSQ Restaurant System with modern, beautiful UI design that provides an exceptional user experience for both customers and administrators.\n\n## 🎯 Key Design Principles\n\n### 1. **Modern Color Palette**\n- **Primary Colors**: Blue to Purple gradients (#667eea → #764ba2)\n- **Accent Colors**: Vibrant gradients for success, warning, and danger states\n- **Background**: Subtle gradient from blue-50 to purple-50\n- **Glass Effects**: Backdrop blur with transparency for modern depth\n\n### 2. **Typography & Spacing**\n- **Font**: Inter (Google Fonts) - Clean, modern, highly readable\n- **Hierarchy**: Clear typography scale with proper contrast\n- **Spacing**: Generous whitespace for breathing room\n- **Responsive**: Mobile-first design approach\n\n### 3. **Interactive Elements**\n- **Hover Effects**: Smooth scale transforms and color transitions\n- **Animations**: Fade-in, slide-up, bounce, and glow effects\n- **Loading States**: Beautiful spinners and skeleton screens\n- **Micro-interactions**: Button hover effects and icon animations\n\n## 🏗️ Component Improvements\n\n### **Buttons**\n```css\n.btn-primary {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  border-radius: 12px;\n  box-shadow: 0 10px 20px rgba(59, 130, 246, 0.3);\n  transform: hover:scale-105;\n  transition: all 0.3s ease;\n}\n```\n\n**Features:**\n- Gradient backgrounds with depth\n- Hover scale effects (105%)\n- Shimmer animation on hover\n- Multiple variants (primary, secondary, success, danger)\n- Responsive sizing (sm, lg)\n\n### **Cards**\n```css\n.card {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  border-radius: 16px;\n  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);\n  transform: hover:translateY(-5px);\n}\n```\n\n**Features:**\n- Glass morphism effect\n- Hover lift animation\n- Rounded corners (16px)\n- Subtle shadows with depth\n- Responsive padding\n\n### **Forms**\n```css\n.form-input {\n  border-radius: 12px;\n  border: 2px solid #e5e7eb;\n  padding: 12px 16px;\n  transition: all 0.3s ease;\n  transform: focus:translateY(-1px);\n  box-shadow: focus:0 10px 25px rgba(59, 130, 246, 0.15);\n}\n```\n\n**Features:**\n- Focus lift animation\n- Gradient focus rings\n- Smooth transitions\n- Better visual hierarchy\n- Improved accessibility\n\n### **Menu Items**\n```css\n.menu-item-card {\n  border-radius: 16px;\n  overflow: hidden;\n  transition: all 0.3s ease;\n  transform: hover:translateY(-8px) scale(1.02);\n  box-shadow: hover:0 25px 50px -12px rgba(0, 0, 0, 0.25);\n}\n```\n\n**Features:**\n- 3D hover effects\n- Image zoom on hover\n- Price overlay badges\n- Gradient overlays\n- Smooth animations\n\n## 🎨 Visual Enhancements\n\n### **Customer Interface**\n\n#### **Header**\n- **Logo**: Gradient circular logo with \"P\" icon\n- **Title**: Gradient text effect\n- **Cart Button**: Animated bounce on hover\n- **Background**: Glass morphism with backdrop blur\n- **Sticky**: Smooth sticky positioning\n\n#### **Menu Page**\n- **Hero Section**: Large gradient icon with animated text\n- **Food Cards**: 3D hover effects with image zoom\n- **Price Badges**: Floating price overlays\n- **Animations**: Staggered fade-in animations\n- **Modal**: Glass morphism with gradient overlays\n\n#### **Footer**\n- **Design**: Centered logo and branding\n- **Typography**: Clear hierarchy\n- **Background**: Glass effect\n\n### **Admin Interface**\n\n#### **Login Page**\n- **Background**: Beautiful gradient background\n- **Logo**: Large gradient circular logo\n- **Form**: Glass morphism card\n- **Toggle**: Gradient button states\n- **Animations**: Fade-in entrance\n\n#### **Image Upload**\n- **Upload Area**: Large, interactive drop zone\n- **Icon**: Gradient circular icon\n- **Preview**: Rounded corners with shadows\n- **Remove Button**: Gradient hover effects\n- **Animations**: Smooth transitions\n\n## 🎭 Animation System\n\n### **Entrance Animations**\n- `animate-fadeInUp`: Smooth fade-in from bottom\n- `animate-fadeInLeft`: Slide in from left\n- `animate-fadeInRight`: Slide in from right\n- `animate-bounce`: Subtle bounce effect\n\n### **Hover Animations**\n- `hover:scale-105`: 5% scale increase\n- `hover:scale-110`: 10% scale increase\n- `hover:translateY(-5px)`: Lift effect\n- `hover:animate-bounce`: Icon bounce\n\n### **Loading Animations**\n- `loading-spinner`: Smooth rotating spinner\n- `animate-pulse`: Gentle pulsing effect\n- `animate-glow`: Glowing effect for focus states\n\n## 📱 Responsive Design\n\n### **Mobile First**\n- Touch-friendly button sizes (44px minimum)\n- Optimized spacing for mobile\n- Swipe-friendly interactions\n- Readable typography scales\n\n### **Breakpoints**\n- **Mobile**: < 768px\n- **Tablet**: 768px - 1024px\n- **Desktop**: > 1024px\n\n### **Adaptive Components**\n- Responsive grid layouts\n- Flexible image sizing\n- Adaptive typography\n- Mobile-optimized forms\n\n## 🎨 Color System\n\n### **Primary Palette**\n```css\n--primary-50: #f0f9ff;\n--primary-500: #0ea5e9;\n--primary-600: #0284c7;\n--primary-900: #0c4a6e;\n```\n\n### **Gradient Combinations**\n- **Primary**: Blue to Purple (#667eea → #764ba2)\n- **Success**: Green to Emerald (#4facfe → #00f2fe)\n- **Warning**: Yellow to Orange (#43e97b → #38f9d7)\n- **Danger**: Red to Pink (#f093fb → #f5576c)\n\n### **Status Colors**\n- **Success**: Green gradients with borders\n- **Warning**: Yellow gradients with borders\n- **Danger**: Red gradients with borders\n- **Info**: Blue gradients with borders\n\n## 🚀 Performance Optimizations\n\n### **CSS Optimizations**\n- Efficient animations using `transform` and `opacity`\n- Hardware acceleration with `will-change`\n- Optimized transitions (300ms standard)\n- Minimal repaints and reflows\n\n### **Visual Performance**\n- Smooth 60fps animations\n- Optimized image loading\n- Efficient hover states\n- Reduced layout shifts\n\n## 🎯 User Experience Improvements\n\n### **Visual Hierarchy**\n- Clear information architecture\n- Proper contrast ratios\n- Intuitive navigation\n- Consistent spacing\n\n### **Accessibility**\n- High contrast ratios\n- Focus indicators\n- Screen reader friendly\n- Keyboard navigation\n\n### **Micro-interactions**\n- Button hover effects\n- Loading states\n- Success animations\n- Error feedback\n\n## 🔧 Implementation Details\n\n### **CSS Architecture**\n- Tailwind CSS with custom components\n- CSS custom properties for theming\n- Modular component styles\n- Utility-first approach\n\n### **Animation Library**\n- Custom keyframes\n- Tailwind animation utilities\n- Smooth transitions\n- Performance optimized\n\n### **Responsive Strategy**\n- Mobile-first design\n- Flexible layouts\n- Adaptive components\n- Touch-friendly interfaces\n\n## 📊 Results\n\n### **Visual Impact**\n- ✅ Modern, professional appearance\n- ✅ Consistent design language\n- ✅ Beautiful animations and transitions\n- ✅ Excellent user experience\n\n### **Technical Benefits**\n- ✅ Optimized performance\n- ✅ Responsive design\n- ✅ Accessible interface\n- ✅ Maintainable code\n\n### **User Benefits**\n- ✅ Intuitive navigation\n- ✅ Engaging interactions\n- ✅ Professional appearance\n- ✅ Mobile-friendly design\n\n## 🎉 Conclusion\n\nThe POSQ Restaurant System now features a stunning, modern UI that rivals the best restaurant management systems. The design combines beautiful aesthetics with excellent usability, creating an exceptional experience for both customers and administrators.\n\n**Key Features:**\n- 🎨 Modern gradient design system\n- ✨ Smooth animations and transitions\n- 📱 Fully responsive design\n- 🚀 Optimized performance\n- ♿ Accessible interface\n- 🎯 Intuitive user experience\n\nThe system is now ready for production use with a professional, modern interface that will impress users and enhance the overall restaurant management experience.","size_bytes":7699},"server/src/index.ts":{"content":"import path from 'path';\nimport dotenv from 'dotenv';\nimport { createHttpAndIo } from './app';\nimport { migrateAndSeedIfNeeded } from './utils/bootstrap';\n\ndotenv.config({ path: path.resolve(process.cwd(), 'server/.env') });\nconst PORT = process.env.PORT ? Number(process.env.PORT) : 3001;\n\nasync function start() {\n  await migrateAndSeedIfNeeded();\n  const { httpServer } = createHttpAndIo();\n  httpServer.listen(PORT, () => {\n    console.log(`Server listening on http://localhost:${PORT}`);\n  });\n}\n\nstart().catch((e) => {\n  console.error('Startup failed', e);\n  process.exit(1);\n});\n","size_bytes":586},"frontend/src/services/api.js":{"content":"import axios from 'axios'\n\nconst API_BASE_URL = import.meta.env.VITE_API_URL || ''\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n})\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token')\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`\n    }\n    return config\n  },\n  (error) => {\n    return Promise.reject(error)\n  }\n)\n\n// Response interceptor to handle errors and refresh tokens\nlet isRefreshing = false\nlet failedQueue = []\n\nconst processQueue = (error, token = null) => {\n  failedQueue.forEach(prom => {\n    if (error) {\n      prom.reject(error)\n    } else {\n      prom.resolve(token)\n    }\n  })\n  failedQueue = []\n}\n\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config\n\n    // If error is 401 or 403 and we haven't retried yet\n    if ((error.response?.status === 401 || error.response?.status === 403) && !originalRequest._retry) {\n      if (isRefreshing) {\n        // If already refreshing, queue this request\n        return new Promise((resolve, reject) => {\n          failedQueue.push({ resolve, reject })\n        }).then(token => {\n          originalRequest.headers['Authorization'] = 'Bearer ' + token\n          return api(originalRequest)\n        }).catch(err => {\n          return Promise.reject(err)\n        })\n      }\n\n      originalRequest._retry = true\n      isRefreshing = true\n\n      const refreshToken = localStorage.getItem('refreshToken')\n      \n      if (!refreshToken) {\n        // No refresh token, logout\n        processQueue(error, null)\n        isRefreshing = false\n        localStorage.removeItem('token')\n        localStorage.removeItem('refreshToken')\n        localStorage.removeItem('user')\n        window.location.href = '/admin/login'\n        return Promise.reject(error)\n      }\n\n      try {\n        const response = await axios.post(`${API_BASE_URL}/api/auth/refresh`, { refreshToken })\n        const { accessToken } = response.data\n        \n        localStorage.setItem('token', accessToken)\n        api.defaults.headers.common['Authorization'] = 'Bearer ' + accessToken\n        originalRequest.headers['Authorization'] = 'Bearer ' + accessToken\n        \n        processQueue(null, accessToken)\n        isRefreshing = false\n        \n        return api(originalRequest)\n      } catch (refreshError) {\n        processQueue(refreshError, null)\n        isRefreshing = false\n        \n        // Refresh failed, logout\n        localStorage.removeItem('token')\n        localStorage.removeItem('refreshToken')\n        localStorage.removeItem('user')\n        window.location.href = '/admin/login'\n        return Promise.reject(refreshError)\n      }\n    }\n\n    return Promise.reject(error)\n  }\n)\n\n// Auth API\nexport const authAPI = {\n  login: (credentials) => api.post('/api/auth/login', credentials),\n  pinLogin: (credentials) => api.post('/api/auth/pin-login', credentials),\n  logout: () => api.post('/api/auth/logout'),\n  refreshToken: (refreshToken) => api.post('/api/auth/refresh', { refreshToken }),\n  getProfile: () => api.get('/api/auth/profile'),\n  changePassword: (passwords) => api.post('/api/auth/change-password', passwords),\n}\n\n// Menu API\nexport const menuAPI = {\n  getMenu: (params) => api.get('/api/menu', { params }),\n  getCategories: (params) => api.get('/api/menu/categories', { params }),\n  createCategory: (data) => api.post('/api/menu/categories', data),\n  updateCategory: (id, data) => api.put(`/api/menu/categories/${id}`, data),\n  deleteCategory: (id) => api.delete(`/api/menu/categories/${id}`),\n  getMenuItems: (params) => api.get('/api/menu/items', { params }),\n  createMenuItem: (data) => api.post('/api/menu/items', data),\n  updateMenuItem: (id, data) => api.put(`/api/menu/items/${id}`, data),\n  deleteMenuItem: (id) => api.delete(`/api/menu/items/${id}`),\n  toggleAvailability: (id, isAvailable) => api.patch(`/api/menu/items/${id}/availability`, { isAvailable }),\n}\n\n// Orders API\nexport const ordersAPI = {\n  createOrder: (data) => api.post('/api/orders', data),\n  getOrders: (params) => api.get('/api/orders', { params }),\n  getOrder: (id) => api.get(`/api/orders/${id}`),\n    searchOrderByPin: (pin) => {\n    return api.get(`/api/orders/search/pin/${pin}`);\n  },\n  getOrderByPin: (pin) => api.get(`/api/orders/pin/${pin}`),\n  getOrderByCode: (code) => api.get(`/api/orders/code/${code}`),\n  updateOrderStatus: (id, status) => api.patch(`/api/orders/${id}/status`, { status }),\n  updatePayment: (id, data) => api.patch(`/api/orders/${id}/payment`, data),\n  confirmOrder: (id) => api.post(`/api/orders/${id}/confirm`),\n  cancelOrder: (id, reason) => api.post(`/api/orders/${id}/cancel`, { reason }),\n}\n\n// Tables API\n// export const tablesAPI = {\n//   getTables: (params) => api.get('/api/tables', { params }),\n//   getTable: (id) => api.get(`/api/tables/${id}`),\n//   createTable: (data) => api.post('/api/tables', data),\n//   updateTable: (id, data) => api.put(`/api/tables/${id}`, data),\n//   deleteTable: (id) => api.delete(`/api/tables/${id}`),\n//   getTableQR: (id) => api.get(`/api/tables/${id}/qr?format=dataurl`),\n//   getTableQRSheet: (branchId) => api.get(`/api/tables/branch/${branchId}/qr-sheet`),\n//   getTableOrders: (id) => api.get(`/api/tables/${id}/orders`),\n// }\n\n// Payments API\nexport const paymentsAPI = {\n  recordPayment: (data) => api.post('/api/payments', data),\n  processCardPayment: (data) => api.post('/api/payments/card', data),\n  getOrderPayments: (orderId) => api.get(`/api/payments/order/${orderId}`),\n  processRefund: (data) => api.post('/api/payments/refund', data),\n}\n\n// Tables API\nexport const tablesAPI = {\n  getTables: (params) => api.get('/api/tables', { params }),\n  getTable: (id) => api.get(`/api/tables/${id}`),\n  createTable: (data) => api.post('/api/tables', data),\n  updateTable: (id, data) => api.put(`/api/tables/${id}`, data),\n  deleteTable: (id) => api.delete(`/api/tables/${id}`),\n  getTableQR: (id, format) => api.get(`/api/tables/${id}/qr`, { params: { format } }),\n  getQRSheet: (branchId) => api.get(`/api/tables/branch/${branchId}/qr-sheet`),\n  getTableOrders: (id, params) => api.get(`/api/tables/${id}/orders`, { params }),\n}\n\n// Inventory API\nexport const inventoryAPI = {\n  getStockItems: (params) => api.get('/api/inventory/stock', { params }),\n  createStockItem: (data) => api.post('/api/inventory/stock', data),\n  updateStockItem: (id, data) => api.put(`/api/inventory/stock/${id}`, data),\n  deleteStockItem: (id) => api.delete(`/api/inventory/stock/${id}`),\n  recordStockMovement: (id, data) => api.post(`/api/inventory/stock/${id}/move`, data),\n  getStockMovements: (id, params) => api.get(`/api/inventory/stock/${id}/movements`, { params }),\n  getInventoryHistory: (params) => api.get('/api/inventory/history', { params }),\n  getLowStockAlerts: (params) => api.get('/api/inventory/stock/alerts/low', { params }),\n  getLowStockItems: (params) => api.get('/api/inventory/stock/alerts/low', { params }),\n  getAlerts: (params) => api.get('/api/inventory/alerts', { params }),\n  resolveAlert: (id) => api.patch(`/api/inventory/alerts/${id}/resolve`),\n  getRecipes: (params) => api.get('/api/inventory/recipes', { params }),\n  createRecipe: (data) => api.post('/api/inventory/recipes', data),\n  updateRecipe: (id, data) => api.put(`/api/inventory/recipes/${id}`, data),\n  deleteRecipe: (id) => api.delete(`/api/inventory/recipes/${id}`),\n}\n\n// Settings API\nexport const settingsAPI = {\n  getSettings: () => api.get('/api/settings'),\n  updateSettings: (data) => api.put('/api/settings', { settings: data }),\n  getSetting: (key) => api.get(`/api/settings/${key}`),\n  updateSetting: (key, value) => api.put(`/api/settings/${key}`, { value }),\n  getOperatingMode: () => api.get('/api/settings/mode/operating'),\n  updateOperatingMode: (mode) => api.post('/api/settings/change-operating-mode', { mode }),\n  changeOperatingMode: (mode) => api.post('/api/settings/change-operating-mode', { mode }),\n  getDatabaseConfig: () => api.get('/api/settings/database/config'),\n  testDatabaseConnection: (config) => api.post('/api/settings/database/test', config),\n  initializeDatabase: (config) => api.post('/api/settings/database/initialize', config),\n  exportDatabase: () => api.get('/api/settings/database/export', { responseType: 'blob' }),\n  getPaymentGatewayConfig: () => api.get('/api/settings/payment/gateway'),\n  getPrinterConfig: () => api.get('/api/settings/printer/config'),\n  updatePrinterConfig: (config) => api.put('/api/settings/printer/config', config),\n  resetSettings: () => api.post('/api/settings/reset'),\n}\n\n// Sync API\nexport const syncAPI = {\n  getSyncStatus: () => api.get('/api/sync/status'),\n  triggerManualSync: () => api.post('/api/sync/manual'),\n  pushChanges: (operations) => api.post('/api/sync/push', { operations }),\n  pullChanges: (params) => api.get('/api/sync/pull', { params }),\n  getSyncLogs: (params) => api.get('/api/sync/logs', { params }),\n  clearSyncLogs: (data) => api.delete('/api/sync/logs', { data }),\n}\n\n// Reports API\nexport const reportsAPI = {\n  getDailySales: (params) => api.get('/api/reports/sales/daily', { params }),\n  getSalesRange: (params) => api.get('/api/reports/sales/range', { params }),\n  getTopItems: (params) => api.get('/api/reports/items/top', { params }),\n  getTableTurnover: (params) => api.get('/api/reports/tables/turnover', { params }),\n  getInventoryUsage: (params) => api.get('/api/reports/inventory/usage', { params }),\n  getPaymentMethods: (params) => api.get('/api/reports/payments/methods', { params }),\n  getCashReconciliation: (params) => api.get('/api/reports/cash/reconciliation', { params }),\n  exportReport: (reportType, params) => api.get(`/api/reports/export/${reportType}`, { params }),\n}\n\n// Upload API\nexport const uploadAPI = {\n  uploadImage: (formData) => api.post('/api/upload/image', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  }),\n  uploadImages: (formData) => api.post('/api/upload/images', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  }),\n  deleteImage: (filename) => api.delete(`/api/upload/image/${filename}`),\n  getImages: () => api.get('/api/upload/images'),\n}\n\n// App Settings API (Dynamic Settings)\nexport const appSettingsAPI = {\n  getSettings: () => api.get('/api/app-settings'),\n  getSettingsByCategory: (category) => api.get(`/api/app-settings/category/${category}`),\n  updateSetting: (key, value) => api.put(`/api/app-settings/${key}`, { value }),\n  updateSettings: (settings) => api.put('/api/app-settings', { settings }),\n  resetSettings: (category) => api.post('/api/app-settings/reset', { category }),\n}\n\n// Backup API\nexport const backupAPI = {\n  createBackup: () => api.post('/api/backup/create'),\n  listBackups: () => api.get('/api/backup/list'),\n  restoreBackup: (filename) => api.post('/api/backup/restore', { filename }),\n  deleteBackup: (filename) => api.delete(`/api/backup/${filename}`),\n}\n\n// Employees API\nexport const employeesAPI = {\n  getEmployees: () => api.get('/api/employees'),\n  getEmployee: (id) => api.get(`/api/employees/${id}`),\n  createEmployee: (data) => api.post('/api/employees', data),\n  updateEmployee: (id, data) => api.put(`/api/employees/${id}`, data),\n  deleteEmployee: (id) => api.delete(`/api/employees/${id}`),\n  activateEmployee: (id) => api.post(`/api/employees/${id}/activate`),\n}\n\n// Restaurants API (Multi-tenant)\nexport const restaurantsAPI = {\n  getRestaurants: () => api.get('/api/restaurants'),\n  getRestaurant: (id) => api.get(`/api/restaurants/${id}`),\n  createRestaurant: (data) => api.post('/api/restaurants', data),\n  updateRestaurant: (id, data) => api.put(`/api/restaurants/${id}`, data),\n  deleteRestaurant: (id) => api.delete(`/api/restaurants/${id}`),\n  activateRestaurant: (id) => api.post(`/api/restaurants/${id}/activate`),\n  getRestaurantDashboard: (id) => api.get(`/api/restaurants/${id}/dashboard`),\n}\n\nexport default api","size_bytes":12051},"printer-service/src/printer-manager.js":{"content":"const escpos = require('escpos');\nconst escposUSB = require('escpos-usb');\nconst escposNetwork = require('escpos-network');\n\nclass PrinterManager {\n  constructor(logger) {\n    this.logger = logger;\n    this.printers = new Map();\n    this.initializeDefaultPrinters();\n  }\n\n  initializeDefaultPrinters() {\n    // Add default kitchen printer (network)\n    this.addPrinter('kitchen', 'Kitchen Printer', 'network', {\n      address: process.env.DEFAULT_PRINTER_IP || '192.168.1.100',\n      port: 9100\n    });\n\n    // Add default bar printer (network)\n    this.addPrinter('bar', 'Bar Printer', 'network', {\n      address: process.env.DEFAULT_PRINTER_IP || '192.168.1.101',\n      port: 9100\n    });\n  }\n\n  addPrinter(id, name, type, connection) {\n    try {\n      let device;\n      \n      switch (type) {\n        case 'usb':\n          device = new escposUSB();\n          break;\n        case 'network':\n          device = new escposNetwork(connection.address, connection.port);\n          break;\n        default:\n          throw new Error(`Unsupported printer type: ${type}`);\n      }\n\n      const printer = new escpos.Printer(device);\n      \n      this.printers.set(id, {\n        id,\n        name,\n        type,\n        connection,\n        device,\n        printer,\n        status: 'connected'\n      });\n\n      this.logger.info(`Printer added: ${name} (${type})`);\n      return true;\n    } catch (error) {\n      this.logger.error(`Failed to add printer ${name}:`, error);\n      return false;\n    }\n  }\n\n  removePrinter(id) {\n    try {\n      const printer = this.printers.get(id);\n      if (printer) {\n        printer.device.close();\n        this.printers.delete(id);\n        this.logger.info(`Printer removed: ${id}`);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      this.logger.error(`Failed to remove printer ${id}:`, error);\n      return false;\n    }\n  }\n\n  async print(printerId, content) {\n    try {\n      const printer = this.printers.get(printerId);\n      if (!printer) {\n        throw new Error(`Printer not found: ${printerId}`);\n      }\n\n      this.logger.info(`Printing to ${printer.name}...`);\n      \n      // Open device\n      await printer.device.open();\n      \n      // Print content\n      printer.printer.text(content);\n      printer.printer.cut();\n      \n      // Close device\n      printer.device.close();\n      \n      this.logger.info(`Successfully printed to ${printer.name}`);\n      return true;\n    } catch (error) {\n      this.logger.error(`Print failed for ${printerId}:`, error);\n      \n      // Update printer status\n      const printer = this.printers.get(printerId);\n      if (printer) {\n        printer.status = 'error';\n      }\n      \n      return false;\n    }\n  }\n\n  getPrinterStatus() {\n    const status = [];\n    for (const [id, printer] of this.printers) {\n      status.push({\n        id: printer.id,\n        name: printer.name,\n        type: printer.type,\n        connection: printer.connection,\n        status: printer.status\n      });\n    }\n    return status;\n  }\n\n  async testPrinter(printerId) {\n    try {\n      const testContent = `\nPOSQ Printer Test\n================\nDate: ${new Date().toLocaleString()}\nPrinter: ${printerId}\nStatus: OK\n\nThis is a test print.\nIf you can read this, the printer is working correctly.\n\n================\nPOSQ Restaurant POS\n      `.trim();\n\n      return await this.print(printerId, testContent);\n    } catch (error) {\n      this.logger.error(`Test print failed for ${printerId}:`, error);\n      return false;\n    }\n  }\n}\n\nmodule.exports = PrinterManager;","size_bytes":3543},"server/src/seeds/01_initial_data.js":{"content":"const bcrypt = require('bcryptjs');\n\nexports.seed = async function(knex) {\n  // Deletes ALL existing entries\n  await knex('sync_logs').del();\n  await knex('audit_logs').del();\n  await knex('settings').del();\n  await knex('stock_movements').del();\n  await knex('recipes').del();\n  await knex('stock_items').del();\n  await knex('payments').del();\n  await knex('order_item_modifiers').del();\n  await knex('order_items').del();\n  await knex('orders').del();\n  await knex('modifiers').del();\n  await knex('menu_items').del();\n  await knex('categories').del();\n  await knex('tables').del();\n  await knex('branches').del();\n  await knex('users').del();\n\n  // Insert seed entries\n  const hashedPassword = await bcrypt.hash('admin123', 12);\n  \n  // Users\n  await knex('users').insert([\n    {\n      id: 1,\n      username: 'admin',\n      password_hash: hashedPassword,\n      full_name: 'System Administrator',\n      role: 'admin',\n      pin: '1234',\n      is_active: true\n    },\n    {\n      id: 2,\n      username: 'cashier1',\n      password_hash: await bcrypt.hash('cashier123', 12),\n      full_name: 'Cashier One',\n      role: 'cashier',\n      pin: '5678',\n      is_active: true\n    },\n    {\n      id: 3,\n      username: 'kitchen1',\n      password_hash: await bcrypt.hash('kitchen123', 12),\n      full_name: 'Kitchen Staff',\n      role: 'kitchen',\n      pin: '9999',\n      is_active: true\n    }\n  ]);\n\n  // Branches\n  await knex('branches').insert([\n    {\n      id: 1,\n      name: 'Casablanca Main',\n      code: 'CAS',\n      address: '123 Avenue Mohammed V, Casablanca, Morocco'\n    }\n  ]);\n\n  // Tables\n  const tables = [];\n  for (let i = 1; i <= 12; i++) {\n    tables.push({\n      id: i,\n      branch_id: 1,\n      table_number: `T${i}`,\n      qr_code: `https://posq.local/menu?table=T${i}&branch=CAS`,\n      description: `Table ${i}`\n    });\n  }\n  await knex('tables').insert(tables);\n\n  // Categories\n  await knex('categories').insert([\n    { id: 1, branch_id: 1, name: 'Appetizers', position: 1 },\n    { id: 2, branch_id: 1, name: 'Main Courses', position: 2 },\n    { id: 3, branch_id: 1, name: 'Desserts', position: 3 },\n    { id: 4, branch_id: 1, name: 'Beverages', position: 4 },\n    { id: 5, branch_id: 1, name: 'Traditional Dishes', position: 5 }\n  ]);\n\n    // Menu Items\n    await knex('menu_items').insert([\n      // Appetizers\n      { id: 1, branch_id: 1, category_id: 1, sku: 'APP001', name: 'Hummus', description: 'Creamy chickpea dip with olive oil', price: 25.00, image: 'https://images.unsplash.com/photo-1626645738196-c2a7c87a8f58?w=400&h=300&fit=crop', is_available: true },\n      { id: 2, branch_id: 1, category_id: 1, sku: 'APP002', name: 'Baba Ganoush', description: 'Smoky eggplant dip', price: 28.00, image: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400&h=300&fit=crop', is_available: true },\n      { id: 3, branch_id: 1, category_id: 1, sku: 'APP003', name: 'Falafel Plate', description: 'Crispy chickpea balls with tahini', price: 35.00, image: 'https://images.unsplash.com/photo-1555939594-58d7cb561ad1?w=400&h=300&fit=crop', is_available: true },\n      \n      // Main Courses\n      { id: 4, branch_id: 1, category_id: 2, sku: 'MAIN001', name: 'Grilled Chicken', description: 'Marinated chicken breast with herbs', price: 85.00, image: 'https://images.unsplash.com/photo-1532550907401-a500c9a57435?w=400&h=300&fit=crop', is_available: true },\n      { id: 5, branch_id: 1, category_id: 2, sku: 'MAIN002', name: 'Beef Kebab', description: 'Tender beef cubes with vegetables', price: 95.00, image: 'https://images.unsplash.com/photo-1529692236671-f1f6cf9683ba?w=400&h=300&fit=crop', is_available: true },\n      { id: 6, branch_id: 1, category_id: 2, sku: 'MAIN003', name: 'Fish Tagine', description: 'Fresh fish with preserved lemons', price: 90.00, image: 'https://images.unsplash.com/photo-1551218808-94e220e084d2?w=400&h=300&fit=crop', is_available: true },\n      \n      // Traditional Dishes\n      { id: 7, branch_id: 1, category_id: 5, sku: 'TRAD001', name: 'Couscous Royal', description: 'Traditional couscous with lamb and vegetables', price: 120.00, image: 'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop', is_available: true },\n      { id: 8, branch_id: 1, category_id: 5, sku: 'TRAD002', name: 'Tajine Lamb', description: 'Slow-cooked lamb with prunes and almonds', price: 110.00, image: 'https://images.unsplash.com/photo-1563379091339-03246963d4a1?w=400&h=300&fit=crop', is_available: true },\n      { id: 9, branch_id: 1, category_id: 5, sku: 'TRAD003', name: 'Pastilla', description: 'Sweet and savory pigeon pie', price: 100.00, image: 'https://images.unsplash.com/photo-1571997478779-2adcbbe9ab2f?w=400&h=300&fit=crop', is_available: true },\n      \n      // Desserts\n      { id: 10, branch_id: 1, category_id: 3, sku: 'DES001', name: 'Baklava', description: 'Layered pastry with nuts and honey', price: 45.00, image: 'https://images.unsplash.com/photo-1578985545062-69928b1d9587?w=400&h=300&fit=crop', is_available: true },\n      { id: 11, branch_id: 1, category_id: 3, sku: 'DES002', name: 'Mint Tea', description: 'Traditional Moroccan mint tea', price: 15.00, image: 'https://images.unsplash.com/photo-1556679343-c7306c1976bc?w=400&h=300&fit=crop', is_available: true },\n      \n      // Beverages\n      { id: 12, branch_id: 1, category_id: 4, sku: 'BEV001', name: 'Fresh Orange Juice', description: 'Freshly squeezed orange juice', price: 20.00, image: 'https://images.unsplash.com/photo-1621506289937-a8e4df240d0b?w=400&h=300&fit=crop', is_available: true },\n      { id: 13, branch_id: 1, category_id: 4, sku: 'BEV002', name: 'Moroccan Coffee', description: 'Traditional Moroccan coffee', price: 18.00, image: 'https://images.unsplash.com/photo-1495474472287-4d71bcdd2085?w=400&h=300&fit=crop', is_available: true },\n      { id: 14, branch_id: 1, category_id: 4, sku: 'BEV003', name: 'Sparkling Water', description: 'Bottled sparkling water', price: 12.00, image: 'https://images.unsplash.com/photo-1548839140-5d6c0b0b0b0b?w=400&h=300&fit=crop', is_available: true }\n    ]);\n\n  // Modifiers\n  await knex('modifiers').insert([\n    { id: 1, menu_item_id: 4, name: 'Extra Spicy', extra_price: 0 },\n    { id: 2, menu_item_id: 4, name: 'No Spice', extra_price: 0 },\n    { id: 3, menu_item_id: 5, name: 'Well Done', extra_price: 0 },\n    { id: 4, menu_item_id: 5, name: 'Medium Rare', extra_price: 0 },\n    { id: 5, menu_item_id: 12, name: 'Large Size', extra_price: 5.00 },\n    { id: 6, menu_item_id: 13, name: 'Extra Sugar', extra_price: 0 },\n    { id: 7, menu_item_id: 13, name: 'No Sugar', extra_price: 0 }\n  ]);\n\n  // Stock Items\n  await knex('stock_items').insert([\n    { id: 1, branch_id: 1, name: 'Chicken Breast', sku: 'CHK001', quantity: 50.0, unit: 'kg', min_threshold: 10.0 },\n    { id: 2, branch_id: 1, name: 'Beef Cubes', sku: 'BEEF001', quantity: 30.0, unit: 'kg', min_threshold: 5.0 },\n    { id: 3, branch_id: 1, name: 'Fresh Fish', sku: 'FISH001', quantity: 20.0, unit: 'kg', min_threshold: 5.0 },\n    { id: 4, branch_id: 1, name: 'Couscous', sku: 'COUS001', quantity: 100.0, unit: 'kg', min_threshold: 20.0 },\n    { id: 5, branch_id: 1, name: 'Oranges', sku: 'ORG001', quantity: 200.0, unit: 'pieces', min_threshold: 50.0 },\n    { id: 6, branch_id: 1, name: 'Coffee Beans', sku: 'COF001', quantity: 25.0, unit: 'kg', min_threshold: 5.0 }\n  ]);\n\n  // Recipes (menu item to stock item mapping)\n  await knex('recipes').insert([\n    { menu_item_id: 4, stock_item_id: 1, qty_per_serving: 0.3 }, // Grilled Chicken -> Chicken Breast\n    { menu_item_id: 5, stock_item_id: 2, qty_per_serving: 0.4 }, // Beef Kebab -> Beef Cubes\n    { menu_item_id: 6, stock_item_id: 3, qty_per_serving: 0.5 }, // Fish Tagine -> Fresh Fish\n    { menu_item_id: 7, stock_item_id: 4, qty_per_serving: 0.2 }, // Couscous Royal -> Couscous\n    { menu_item_id: 12, stock_item_id: 5, qty_per_serving: 2.0 }, // Orange Juice -> Oranges\n    { menu_item_id: 13, stock_item_id: 6, qty_per_serving: 0.02 } // Moroccan Coffee -> Coffee Beans\n  ]);\n\n  // Settings\n  await knex('settings').insert([\n    { key: 'restaurant_name', value: 'POSQ Restaurant' },\n    { key: 'currency', value: 'MAD' },\n    { key: 'tax_rate', value: '10' },\n    { key: 'service_charge_rate', value: '5' },\n    { key: 'operating_mode', value: 'LOCAL' },\n    { key: 'printer_enabled', value: 'true' },\n    { key: 'sync_enabled', value: 'false' },\n    { key: 'backup_enabled', value: 'true' },\n    { key: 'backup_frequency', value: 'daily' }\n  ]);\n};","size_bytes":8484},"server/src/routes/modules/tables.ts":{"content":"import { Router } from 'express';\nimport db from '../../utils/db';\nimport { authenticate, authorize } from '../../middlewares/auth';\n\nconst router = Router();\n\nrouter.get('/', async (req, res) => {\n  const branchId = Number(req.query.branchId || req.query.branch_id);\n  try {\n    const tables = await db('tables').where(function() {\n      if (branchId) this.where('branch_id', branchId);\n    }).orderBy('table_number', 'asc');\n    res.json(tables);\n  } catch (e) {\n    res.status(500).json({ error: 'Failed to load tables' });\n  }\n});\n\nrouter.post('/', authenticate, authorize(['admin', 'manager']), async (req, res) => {\n  try {\n    const [id] = await db('tables').insert(req.body);\n    const t = await db('tables').where({ id }).first();\n    res.status(201).json(t);\n  } catch (e) {\n    res.status(400).json({ error: 'Failed to create table' });\n  }\n});\n\nexport default router;\n","size_bytes":880},"frontend/src/contexts/ThemeContext.jsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react'\nimport { appSettingsAPI } from '../services/api'\n\nconst ThemeContext = createContext()\n\nexport function ThemeProvider({ children }) {\n  const [settings, setSettings] = useState({})\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    loadSettings()\n  }, [])\n\n  const loadSettings = async () => {\n    try {\n      const response = await appSettingsAPI.getSettings()\n      if (response.data.success) {\n        setSettings(response.data.settings)\n        applyTheme(response.data.settings)\n      }\n    } catch (error) {\n      console.error('Failed to load settings:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const applyTheme = (themeSettings) => {\n    const root = document.documentElement\n    \n    // Apply color variables\n    if (themeSettings.primary_color) {\n      root.style.setProperty('--primary-color', themeSettings.primary_color.value)\n    }\n    if (themeSettings.secondary_color) {\n      root.style.setProperty('--secondary-color', themeSettings.secondary_color.value)\n    }\n    if (themeSettings.accent_color) {\n      root.style.setProperty('--accent-color', themeSettings.accent_color.value)\n    }\n    if (themeSettings.success_color) {\n      root.style.setProperty('--success-color', themeSettings.success_color.value)\n    }\n    if (themeSettings.warning_color) {\n      root.style.setProperty('--warning-color', themeSettings.warning_color.value)\n    }\n    if (themeSettings.error_color) {\n      root.style.setProperty('--error-color', themeSettings.error_color.value)\n    }\n    if (themeSettings.background_color) {\n      root.style.setProperty('--background-color', themeSettings.background_color.value)\n    }\n    if (themeSettings.surface_color) {\n      root.style.setProperty('--surface-color', themeSettings.surface_color.value)\n    }\n    if (themeSettings.text_primary) {\n      root.style.setProperty('--text-primary', themeSettings.text_primary.value)\n    }\n    if (themeSettings.text_secondary) {\n      root.style.setProperty('--text-secondary', themeSettings.text_secondary.value)\n    }\n\n    // Apply layout variables\n    if (themeSettings.border_radius) {\n      root.style.setProperty('--border-radius', `${themeSettings.border_radius.value}px`)\n    }\n    if (themeSettings.sidebar_width) {\n      root.style.setProperty('--sidebar-width', `${themeSettings.sidebar_width.value}px`)\n    }\n    if (themeSettings.header_height) {\n      root.style.setProperty('--header-height', `${themeSettings.header_height.value}px`)\n    }\n\n    // Apply shadow intensity\n    if (themeSettings.shadow_intensity) {\n      const intensity = themeSettings.shadow_intensity.value\n      switch (intensity) {\n        case 'light':\n          root.style.setProperty('--shadow-sm', '0 1px 2px 0 rgba(0, 0, 0, 0.05)')\n          root.style.setProperty('--shadow-md', '0 4px 6px -1px rgba(0, 0, 0, 0.1)')\n          root.style.setProperty('--shadow-lg', '0 10px 15px -3px rgba(0, 0, 0, 0.1)')\n          root.style.setProperty('--shadow-xl', '0 20px 25px -5px rgba(0, 0, 0, 0.1)')\n          break\n        case 'heavy':\n          root.style.setProperty('--shadow-sm', '0 2px 4px 0 rgba(0, 0, 0, 0.1)')\n          root.style.setProperty('--shadow-md', '0 8px 12px -2px rgba(0, 0, 0, 0.15)')\n          root.style.setProperty('--shadow-lg', '0 20px 30px -5px rgba(0, 0, 0, 0.15)')\n          root.style.setProperty('--shadow-xl', '0 40px 50px -10px rgba(0, 0, 0, 0.2)')\n          break\n        default: // medium\n          root.style.setProperty('--shadow-sm', '0 1px 3px 0 rgba(0, 0, 0, 0.1)')\n          root.style.setProperty('--shadow-md', '0 4px 6px -1px rgba(0, 0, 0, 0.1)')\n          root.style.setProperty('--shadow-lg', '0 10px 15px -3px rgba(0, 0, 0, 0.1)')\n          root.style.setProperty('--shadow-xl', '0 20px 25px -5px rgba(0, 0, 0, 0.1)')\n      }\n    }\n  }\n\n  const updateSettings = async (newSettings) => {\n    try {\n      const response = await appSettingsAPI.updateSettings(newSettings)\n      if (response.data.success) {\n        // Reload settings to get updated values\n        await loadSettings()\n        return true\n      }\n      return false\n    } catch (error) {\n      console.error('Failed to update settings:', error)\n      return false\n    }\n  }\n\n  const getSetting = (key) => {\n    return settings[key]?.value || null\n  }\n\n  const getAppName = () => {\n    return getSetting('app_name') || 'POSQ Restaurant'\n  }\n\n  const getWelcomeMessage = () => {\n    return getSetting('welcome_message') || 'Welcome to our restaurant!'\n  }\n\n  const getCurrency = () => {\n    return getSetting('currency') || 'MAD'\n  }\n\n  const value = {\n    settings,\n    loading,\n    loadSettings,\n    updateSettings,\n    getSetting,\n    getAppName,\n    getWelcomeMessage,\n    getCurrency,\n    applyTheme\n  }\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext)\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider')\n  }\n  return context\n}","size_bytes":5083},"server/src/database/init.js":{"content":"const knex = require('knex');\nconst config = require('../../knexfile');\n\nconst db = knex(config[process.env.NODE_ENV || 'development']);\n\nasync function applyMultiTenantSchema() {\n  try {\n    // Check if multi-tenant columns exist, if not add them\n    const branchesInfo = await db.raw(\"PRAGMA table_info('branches')\");\n    const branchesColumns = branchesInfo.map(col => col.name);\n    \n    if (!branchesColumns.includes('owner_id')) {\n      console.log('📦 Applying multi-tenant schema updates...');\n      \n      // Add columns to branches table\n      await db.schema.table('branches', table => {\n        table.integer('owner_id').unsigned();\n        table.string('phone');\n        table.string('email');\n        table.string('logo_url');\n        table.text('settings');\n        table.boolean('is_active').defaultTo(true);\n      });\n      \n      // Add columns to users table\n      const usersInfo = await db.raw(\"PRAGMA table_info('users')\");\n      const usersColumns = usersInfo.map(col => col.name);\n      \n      if (!usersColumns.includes('branch_id')) {\n        await db.schema.table('users', table => {\n          table.integer('branch_id').unsigned();\n          table.string('email');\n          table.string('phone');\n          table.decimal('salary', 10, 2);\n          table.date('hire_date');\n        });\n      }\n      \n      console.log('✅ Multi-tenant schema applied');\n    }\n    \n    // Check for additional branch fields (website, description)\n    if (!branchesColumns.includes('website')) {\n      await db.schema.table('branches', table => {\n        table.string('website');\n        table.text('description');\n      });\n      console.log('✅ Branch extended fields applied');\n    }\n  } catch (error) {\n    console.log('⚠️ Multi-tenant schema check skipped or already applied');\n  }\n}\n\nasync function applyCategorySchema() {\n  try {\n    // Check if category columns exist, if not add them\n    const categoriesInfo = await db.raw(\"PRAGMA table_info('categories')\");\n    const categoriesColumns = categoriesInfo.map(col => col.name);\n    \n    if (!categoriesColumns.includes('description')) {\n      console.log('📦 Applying category schema updates...');\n      \n      await db.schema.table('categories', table => {\n        table.text('description');\n        table.boolean('is_active').defaultTo(true);\n      });\n      \n      console.log('✅ Category schema applied');\n    }\n  } catch (error) {\n    console.log('⚠️ Category schema check skipped or already applied:', error.message);\n  }\n}\n\nasync function initializeDatabase() {\n  try {\n    // Check if migrations table exists (indicating migrations have run before)\n    const hasMigrationsTable = await db.schema.hasTable('knex_migrations');\n    \n    if (!hasMigrationsTable) {\n      // Run migrations only if they haven't run before\n      await db.migrate.latest();\n      console.log('✅ Database migrations completed');\n    } else {\n      console.log('✅ Database already initialized');\n    }\n    \n    // Apply multi-tenant schema updates\n    await applyMultiTenantSchema();\n    \n    // Apply category schema updates\n    await applyCategorySchema();\n    \n    // Run seeds if in development\n    // if (process.env.NODE_ENV === 'development') {\n    //   const seedCount = await db.seed.run();\n    //   if (seedCount.length > 0) {\n    //     console.log('✅ Database seeded with initial data');\n    //   }\n    // }\n    \n    return db;\n  } catch (error) {\n    console.error('❌ Database initialization failed:', error);\n    throw error;\n  }\n}\n\nmodule.exports = {\n  db,\n  initializeDatabase\n};","size_bytes":3570},"server/tests/orders.test.js":{"content":"const request = require('supertest');\nconst app = require('../index');\nconst { db } = require('../src/database/init');\n\ndescribe('Orders API', () => {\n  let authToken;\n\n  beforeAll(async () => {\n    // Setup test database\n    await db.migrate.latest();\n    await db.seed.run();\n\n    // Get auth token\n    const loginResponse = await request(app)\n      .post('/api/auth/login')\n      .send({\n        username: 'admin',\n        password: 'admin123'\n      });\n    \n    authToken = loginResponse.body.accessToken;\n  });\n\n  afterAll(async () => {\n    await db.destroy();\n  });\n\n  describe('POST /api/orders', () => {\n    it('should create a new order', async () => {\n      const orderData = {\n        branchId: 1,\n        tableId: 1,\n        customerName: 'Test Customer',\n        items: [\n          {\n            menuItemId: 1,\n            quantity: 2,\n            note: 'No spice',\n            modifiers: []\n          }\n        ],\n        paymentMethod: 'CASH'\n      };\n\n      const response = await request(app)\n        .post('/api/orders')\n        .send(orderData);\n\n      expect(response.status).toBe(201);\n      expect(response.body).toHaveProperty('orderId');\n      expect(response.body).toHaveProperty('orderCode');\n      expect(response.body).toHaveProperty('qr');\n      expect(response.body.status).toBe('PENDING');\n    });\n\n    it('should reject order with invalid data', async () => {\n      const response = await request(app)\n        .post('/api/orders')\n        .send({\n          branchId: 1,\n          // Missing required fields\n        });\n\n      expect(response.status).toBe(400);\n    });\n  });\n\n  describe('GET /api/orders', () => {\n    it('should get orders list', async () => {\n      const response = await request(app)\n        .get('/api/orders')\n        .set('Authorization', `Bearer ${authToken}`)\n        .query({ branchId: 1 });\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('orders');\n      expect(Array.isArray(response.body.orders)).toBe(true);\n    });\n\n    it('should filter orders by status', async () => {\n      const response = await request(app)\n        .get('/api/orders')\n        .set('Authorization', `Bearer ${authToken}`)\n        .query({ branchId: 1, status: 'PENDING' });\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('orders');\n    });\n  });\n\n  describe('PATCH /api/orders/:id/status', () => {\n    let orderId;\n\n    beforeAll(async () => {\n      // Create a test order\n      const orderData = {\n        branchId: 1,\n        tableId: 1,\n        customerName: 'Test Customer',\n        items: [\n          {\n            menuItemId: 1,\n            quantity: 1,\n            modifiers: []\n          }\n        ],\n        paymentMethod: 'CASH'\n      };\n\n      const response = await request(app)\n        .post('/api/orders')\n        .send(orderData);\n      \n      orderId = response.body.orderId;\n    });\n\n    it('should update order status', async () => {\n      const response = await request(app)\n        .patch(`/api/orders/${orderId}/status`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({ status: 'CONFIRMED' });\n\n      expect(response.status).toBe(200);\n      expect(response.body.order.status).toBe('CONFIRMED');\n    });\n\n    it('should reject invalid status', async () => {\n      const response = await request(app)\n        .patch(`/api/orders/${orderId}/status`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({ status: 'INVALID_STATUS' });\n\n      expect(response.status).toBe(400);\n    });\n  });\n});","size_bytes":3556},"frontend/src/components/layout/CustomerLayout.jsx":{"content":"import { Outlet, useLocation, useNavigate } from \"react-router-dom\";\nimport { useCart } from \"../../contexts/CartContext\";\nimport { useTheme } from \"../../contexts/ThemeContext\";\nimport { ShoppingCartIcon } from \"@heroicons/react/24/outline\";\nimport CartBottomBar from \"../CartBottomBar\";\nimport { useSearchParams } from \"react-router-dom\";\nfunction CustomerLayout() {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { itemCount, total } = useCart();\n  const { getAppName, getSetting, getWelcomeMessage } = useTheme();\n  const [searchParams] = useSearchParams();\n   const table = searchParams.get(\"table\");\n   const branch = searchParams.get(\"branch\") || \"1\";\n\n  const isCartPage = location.pathname === \"/cart\";\n  const isCheckoutPage = location.pathname === \"/checkout\";\n  const isOrderPage = location.pathname.startsWith(\"/order/\");\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-lg border-b border-gray-200 sticky top-0 z-40\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-20\">\n            <div className=\"flex items-center space-x-3\">\n              {getSetting(\"logo_url\") ? (\n                <img\n                  src={getSetting(\"logo_url\")}\n                  alt=\"Logo\"\n                  className=\"w-12 h-12 rounded-xl object-contain\"\n                  onError={(e) => {\n                    e.target.style.display = \"none\";\n                    e.target.nextSibling.style.display = \"flex\";\n                  }}\n                />\n              ) : null}\n              <div\n                className=\"w-12 h-12 rounded-lg flex items-center justify-center shadow-md\"\n                style={{\n                  background: `linear-gradient(135deg, ${getSetting(\"primary_color\") || \"#3B82F6\"} 0%, ${getSetting(\"secondary_color\") || \"#1E40AF\"} 100%)`,\n                  display: getSetting(\"logo_url\") ? \"none\" : \"flex\",\n                }}\n              >\n                <span className=\"text-white font-bold text-xl\">\n                  {getAppName().charAt(0)}\n                </span>\n              </div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">\n                {getAppName()}\n              </h1>\n            </div>\n\n            {/* Cart Button */}\n            {!isCartPage && !isCheckoutPage && !isOrderPage && (\n              <div className=\"flex items-center\">\n                <button\n                  onClick={() => navigate(`/cart?table=${table}&branch=${branch}`)}\n                  className=\"relative btn-primary group rounded-lg px-4 py-2 flex items-center shadow-lg hover:shadow-xl transition\"\n                >\n                  <ShoppingCartIcon className=\"h-5 w-5 mr-2 group-hover:animate-bounce\" />\n                  Cart\n                  {itemCount > 0 && (\n                    <span className=\"absolute -top-2 -right-2 bg-gradient-to-r from-red-500 to-pink-500 text-white text-xs rounded-full h-6 w-6 flex items-center justify-center font-semibold shadow-lg animate-bounce\">\n                      {itemCount}\n                    </span>\n                  )}\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      </header>\n\n      {/* Welcome Section */}\n      {location.pathname === \"/\" || location.pathname === \"/menu\" ? (\n        <div className=\"bg-white border-b border-gray-200 py-8\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n              {getSetting(\"header_text\") || getWelcomeMessage()}\n            </h2>\n            <p className=\"text-gray-600\">\n              {getSetting(\"order_instructions\") ||\n                \"Scan QR code to order • Pay at cashier\"}\n            </p>\n          </div>\n        </div>\n      ) : null}\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"animate-fadeInUp\">\n          <Outlet />\n        </div>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-white border-t border-gray-200 mt-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"text-center\">\n            <div className=\"flex justify-center items-center space-x-3 mb-6\">\n              {getSetting(\"logo_url\") ? (\n                <img\n                  src={getSetting(\"logo_url\")}\n                  alt=\"Logo\"\n                  className=\"w-10 h-10 rounded-lg object-contain\"\n                  onError={(e) => {\n                    e.target.style.display = \"none\";\n                    e.target.nextSibling.style.display = \"flex\";\n                  }}\n                />\n              ) : null}\n              <div\n                className=\"w-10 h-10 rounded-lg flex items-center justify-center shadow-md\"\n                style={{\n                  background: `linear-gradient(135deg, ${getSetting(\"primary_color\") || \"#3B82F6\"} 0%, ${getSetting(\"secondary_color\") || \"#1E40AF\"} 100%)`,\n                  display: getSetting(\"logo_url\") ? \"none\" : \"flex\",\n                }}\n              >\n                <span className=\"text-white font-bold text-lg\">\n                  {getAppName().charAt(0)}\n                </span>\n              </div>\n              <span className=\"text-xl font-bold text-gray-900\">\n                {getAppName()}\n              </span>\n            </div>\n            <p className=\"text-gray-600 mb-2\">\n              &copy; 2024 {getAppName()}. All rights reserved.\n            </p>\n            <p className=\"text-sm text-gray-500\">\n              {getSetting(\"order_instructions\") ||\n                \"Scan QR code to order • Pay at cashier\"}\n            </p>\n            <p className=\"text-xs text-gray-400 mt-2\">\n              {getSetting(\"footer_text\") || \"Powered by modern technology\"}\n            </p>\n          </div>\n        </div>\n      </footer>\n\n      {/* Mobile Cart Bottom Bar */}\n      <CartBottomBar />\n    </div>\n  );\n}\n\nexport default CustomerLayout;\n","size_bytes":6102},"frontend/src/contexts/CartContext.jsx":{"content":"import { createContext, useContext, useReducer, useEffect } from 'react'\n\nconst CartContext = createContext()\n\nconst initialState = {\n  items: [],\n  total: 0,\n  itemCount: 0,\n  branchId: null,\n  tableNumber: null\n}\n\nfunction cartReducer(state, action) {\n  switch (action.type) {\n    case 'ADD_ITEM':\n      const existingItem = state.items.find(\n        item => item.menuItemId === action.payload.menuItemId && \n        JSON.stringify(item.modifiers) === JSON.stringify(action.payload.modifiers)\n      )\n\n      if (existingItem) {\n        return {\n          ...state,\n          items: state.items.map(item =>\n            item.id === existingItem.id\n              ? { ...item, quantity: item.quantity + action.payload.quantity }\n              : item\n          ),\n          total: state.total + action.payload.total,\n          itemCount: state.itemCount + action.payload.quantity\n        }\n      } else {\n        return {\n          ...state,\n          items: [...state.items, { ...action.payload, id: Date.now() }],\n          total: state.total + action.payload.total,\n          itemCount: state.itemCount + action.payload.quantity\n        }\n      }\n\n    case 'REMOVE_ITEM':\n      const itemToRemove = state.items.find(item => item.id === action.payload)\n      if (!itemToRemove) return state\n\n      return {\n        ...state,\n        items: state.items.filter(item => item.id !== action.payload),\n        total: state.total - itemToRemove.total,\n        itemCount: state.itemCount - itemToRemove.quantity\n      }\n\n    case 'UPDATE_QUANTITY':\n      const itemToUpdate = state.items.find(item => item.id === action.payload.id)\n      if (!itemToUpdate) return state\n\n      const quantityDiff = action.payload.quantity - itemToUpdate.quantity\n      const newTotal = state.total + (quantityDiff * itemToUpdate.unitPrice)\n\n      return {\n        ...state,\n        items: state.items.map(item =>\n          item.id === action.payload.id\n            ? { ...item, quantity: action.payload.quantity }\n            : item\n        ),\n        total: newTotal,\n        itemCount: state.itemCount + quantityDiff\n      }\n\n    case 'CLEAR_CART':\n      return initialState\n\n    case 'SET_CART':\n      return action.payload\n    \n    case 'SET_BRANCH_INFO':\n      console.log('CartContext: SET_BRANCH_INFO', action.payload);\n      return {\n        ...state,\n        branchId: action.payload.branchId,\n        tableNumber: action.payload.tableNumber\n      }\n\n    default:\n      return state\n  }\n}\n\nexport function CartProvider({ children }) {\n  const [state, dispatch] = useReducer(cartReducer, initialState)\n\n  // Load cart from localStorage on mount\n  useEffect(() => {\n    const savedCart = localStorage.getItem('posq_cart')\n    if (savedCart) {\n      try {\n        const cartData = JSON.parse(savedCart)\n        dispatch({ type: 'SET_CART', payload: cartData })\n      } catch (error) {\n        console.error('Failed to load cart from localStorage:', error)\n        localStorage.removeItem('posq_cart')\n      }\n    }\n  }, [])\n\n  // Save cart to localStorage whenever it changes\n  useEffect(() => {\n    console.log('CartContext: Saving to localStorage', state);\n    localStorage.setItem('posq_cart', JSON.stringify(state))\n  }, [state])\n\n  const addItem = (menuItem, quantity = 1, modifiers = [], note = '', branchId = null, tableNumber = null) => {\n    const modifierTotal = modifiers.reduce((sum, modifier) => sum + modifier.extra_price, 0)\n    const unitPrice = menuItem.price + modifierTotal\n    const total = unitPrice * quantity\n    dispatch({\n      type: 'ADD_ITEM',\n      payload: {\n        menuItemId: menuItem.id,\n        name: menuItem.name,\n        image: menuItem.image,\n        price: menuItem.price,\n        quantity,\n        unitPrice,\n        total,\n        modifiers,\n        note,\n        branchId,\n        tableNumber\n      }\n    })\n  }\n  \n  const setBranchInfo = (branchId, tableNumber) => {\n    dispatch({ \n      type: 'SET_BRANCH_INFO', \n      payload: { branchId, tableNumber } \n    })\n  }\n\n  const removeItem = (itemId) => {\n    dispatch({ type: 'REMOVE_ITEM', payload: itemId })\n  }\n\n  const updateQuantity = (itemId, quantity) => {\n    if (quantity <= 0) {\n      removeItem(itemId)\n    } else {\n      dispatch({ type: 'UPDATE_QUANTITY', payload: { id: itemId, quantity } })\n    }\n  }\n\n  const clearCart = () => {\n    dispatch({ type: 'CLEAR_CART' })\n  }\n\n  const setCart = (cartData) => {\n    dispatch({ type: 'SET_CART', payload: cartData })\n  }\n\n  const getCartTotal = () => {\n    return state.items.reduce((total, item) => total + item.total, 0)\n  }\n\n  const getItemCount = () => {\n    return state.items.reduce((count, item) => count + item.quantity, 0)\n  }\n\n  const value = {\n    ...state,\n    addItem,\n    removeItem,\n    updateQuantity,\n    clearCart,\n    setCart,\n    setBranchInfo,\n    getCartTotal,\n    getItemCount\n  }\n\n  return (\n    <CartContext.Provider value={value}>\n      {children}\n    </CartContext.Provider>\n  )\n}\n\nexport function useCart() {\n  const context = useContext(CartContext)\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider')\n  }\n  return context\n}","size_bytes":5115},"scripts/generate_qr_sheet.js":{"content":"","size_bytes":0},"frontend/src/pages/admin/InventoryPage.jsx":{"content":"import { useState, useEffect } from 'react'\nimport { inventoryAPI } from '../../services/api'\nimport { \n  PlusIcon, \n  PencilIcon, \n  TrashIcon,\n  ExclamationTriangleIcon,\n  \n  \n} from '@heroicons/react/24/outline'\nimport StockItemForm from '../../components/StockItemForm'\nimport RecipesManagementTab from './RecipesManagementTab'\nimport InventoryHistoryTab from './InventoryHistoryTab'\nimport toast from 'react-hot-toast'\n\nfunction InventoryPage() {\n  const [activeTab, setActiveTab] = useState('stock')\n  const [stockItems, setStockItems] = useState([])\n  const [recipes, setRecipes] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [showStockForm, setShowStockForm] = useState(false)\n  const [editingItem, setEditingItem] = useState(null)\n  const [lowStockItems, setLowStockItems] = useState([])\n\n  useEffect(() => {\n    loadData()\n  }, [])\n\n  const loadData = async () => {\n    try {\n      setLoading(true)\n      const [stockRes, recipesRes, lowStockRes] = await Promise.all([\n        inventoryAPI.getStockItems(),\n        inventoryAPI.getRecipes(),\n        inventoryAPI.getLowStockItems()\n      ])\n      \n      if (stockRes.data.success) {\n        setStockItems(stockRes.data.items)\n      }\n      if (recipesRes.data.success) {\n        setRecipes(recipesRes.data.recipes)\n      }\n      if (lowStockRes.data.success) {\n        setLowStockItems(lowStockRes.data.items)\n      }\n    } catch (error) {\n      toast.error('Failed to load inventory data')\n      console.error('Inventory load error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleAddStockItem = () => {\n    setEditingItem(null)\n    setShowStockForm(true)\n  }\n\n  const handleEditStockItem = (item) => {\n    setEditingItem(item)\n    setShowStockForm(true)\n  }\n\n  const handleSaveStockItem = (savedItem) => {\n    if (editingItem) {\n      // Update existing item\n      setStockItems(prev => prev.map(item => \n        item.id === savedItem.id ? savedItem : item\n      ))\n    } else {\n      // Add new item\n      setStockItems(prev => [savedItem, ...prev])\n    }\n    setShowStockForm(false)\n    setEditingItem(null)\n  }\n\n  const handleCancelStockForm = () => {\n    setShowStockForm(false)\n    setEditingItem(null)\n  }\n\n  const handleDeleteStockItem = async (itemId) => {\n    if (!window.confirm('Are you sure you want to delete this stock item? This action cannot be undone.')) {\n      return\n    }\n\n    try {\n      await inventoryAPI.deleteStockItem(itemId)\n      setStockItems(prev => prev.filter(item => item.id !== itemId))\n      toast.success('Stock item deleted successfully')\n    } catch (error) {\n      console.error('Stock item deletion error:', error)\n      toast.error(error.response?.data?.error || 'Failed to delete stock item')\n    }\n  }\n\n  const handleStockMovement = async (itemId, type, quantity, reason) => {\n    try {\n      const response = await inventoryAPI.recordStockMovement(itemId, {\n        type,\n        quantity: parseFloat(quantity),\n        reason: reason || 'Manual adjustment'\n      })\n      \n      if (response.data.success) {\n        // Reload data to get updated stock levels\n        await loadData()\n        toast.success('Stock movement recorded successfully')\n      }\n    } catch (error) {\n      console.error('Stock movement error:', error)\n      toast.error('Failed to record stock movement')\n    }\n  }\n\n  const getStockStatus = (item) => {\n    if (item.current_stock <= item.min_stock) {\n      return { status: 'low', color: 'text-red-600', bgColor: 'bg-red-50' }\n    } else if (item.current_stock >= item.max_stock) {\n      return { status: 'high', color: 'text-green-600', bgColor: 'bg-green-50' }\n    } else {\n      return { status: 'normal', color: 'text-gray-600', bgColor: 'bg-gray-50' }\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"text-center\">\n          <div className=\"loading-spinner mb-4\"></div>\n          <p className=\"text-gray-600\">Loading inventory...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold gradient-text\">Inventory Management</h1>\n          <p className=\"text-gray-600 mt-2\">Manage stock items, recipes, and inventory levels</p>\n        </div>\n        <button\n          onClick={handleAddStockItem}\n          className=\"btn-primary\"\n        >\n          <PlusIcon className=\"h-5 w-5 mr-2\" />\n          Add Stock Item\n        </button>\n      </div>\n\n      {/* Low Stock Alert */}\n      {lowStockItems.length > 0 && (\n        <div className=\"card border-l-4 border-l-red-500 bg-red-50\">\n          <div className=\"card-body\">\n            <div className=\"flex items-center\">\n              <ExclamationTriangleIcon className=\"h-6 w-6 text-red-600 mr-3\" />\n              <div>\n                <h3 className=\"text-lg font-semibold text-red-800\">Low Stock Alert</h3>\n                <p className=\"text-red-700\">\n                  {lowStockItems.length} item(s) are running low on stock\n                </p>\n              </div>\n            </div>\n            <div className=\"mt-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n              {lowStockItems.slice(0, 6).map((item) => (\n                <div key={item.id} className=\"bg-white rounded-lg p-3 border border-red-200\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium text-gray-900\">{item.name}</span>\n                    <span className=\"text-sm text-red-600 font-semibold\">\n                      {item.current_stock} {item.unit}\n                    </span>\n                  </div>\n                  <div className=\"text-xs text-gray-500\">\n                    Min: {item.min_stock} {item.unit}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Tabs */}\n      <div className=\"border-b border-gray-200\">\n        <nav className=\"-mb-px flex space-x-8\">\n          <button\n            onClick={() => setActiveTab('stock')}\n            className={`py-2 px-1 border-b-2 font-medium text-sm ${\n              activeTab === 'stock'\n                ? 'border-blue-500 text-blue-600'\n                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n            }`}\n          >\n            Stock Items ({stockItems.length})\n          </button>\n          <button\n            onClick={() => setActiveTab('recipes')}\n            className={`py-2 px-1 border-b-2 font-medium text-sm ${\n              activeTab === 'recipes'\n                ? 'border-blue-500 text-blue-600'\n                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n            }`}\n          >\n            Recipes\n          </button>\n          <button\n            onClick={() => setActiveTab('history')}\n            className={`py-2 px-1 border-b-2 font-medium text-sm ${\n              activeTab === 'history'\n                ? 'border-blue-500 text-blue-600'\n                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n            }`}\n          >\n            History\n          </button>\n        </nav>\n      </div>\n\n      {/* Stock Items Tab */}\n      {activeTab === 'stock' && (\n        <div className=\"card\">\n          <div className=\"card-header\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">Stock Items</h2>\n              <button \n                onClick={handleAddStockItem}\n                className=\"btn-primary btn-sm\"\n              >\n                <PlusIcon className=\"h-4 w-4 mr-1\" />\n                Add Item\n              </button>\n            </div>\n          </div>\n          <div className=\"card-body\">\n            {stockItems.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-gray-500\">No stock items found</p>\n                <button \n                  onClick={handleAddStockItem}\n                  className=\"btn-primary mt-4\"\n                >\n                  Add First Stock Item\n                </button>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-gray-200\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Item\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Current Stock\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Min/Max\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Cost Price\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Status\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Actions\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\n                    {stockItems.map((item) => {\n                      const stockStatus = getStockStatus(item)\n                      return (\n                        <tr key={item.id}>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div>\n                              <div className=\"text-sm font-medium text-gray-900\">{item.name}</div>\n                              <div className=\"text-sm text-gray-500\">{item.sku || 'No SKU'}</div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex items-center\">\n                              <span className={`text-sm font-semibold ${stockStatus.color}`}>\n                                {item.current_stock} {item.unit}\n                              </span>\n                              {stockStatus.status === 'low' && (\n                                <PlusIcon className=\"h-4 w-4 text-red-500 ml-1\" />\n                              )}\n                              {stockStatus.status === 'high' && (\n                                <PlusIcon className=\"h-4 w-4 text-green-500 ml-1\" />\n                              )}\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                            {item.min_stock} / {item.max_stock} {item.unit}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                            {item.cost_price?.toFixed(2) || '0.00'} MAD\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <span className={`badge ${stockStatus.bgColor} ${stockStatus.color}`}>\n                              {stockStatus.status === 'low' ? 'Low Stock' : \n                               stockStatus.status === 'high' ? 'High Stock' : 'Normal'}\n                            </span>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2\">\n                            <button \n                              onClick={() => handleEditStockItem(item)}\n                              className=\"text-blue-600 hover:text-blue-900\"\n                            >\n                              <PencilIcon className=\"h-4 w-4\" />\n                            </button>\n                            <button \n                              onClick={() => handleDeleteStockItem(item.id)}\n                              className=\"text-red-600 hover:text-red-900\"\n                            >\n                              <TrashIcon className=\"h-4 w-4\" />\n                            </button>\n                          </td>\n                        </tr>\n                      )\n                    })}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Recipes Tab */}\n      {activeTab === 'recipes' && <RecipesManagementTab />}\n\n      {/* History Tab */}\n      {activeTab === 'history' && <InventoryHistoryTab />}\n\n      {/* Stock Item Form Modal */}\n      {showStockForm && (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"p-6\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h2 className=\"text-xl font-semibold text-gray-900\">\n                  {editingItem ? 'Edit Stock Item' : 'Add New Stock Item'}\n                </h2>\n                <button\n                  onClick={handleCancelStockForm}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  <span className=\"sr-only\">Close</span>\n                  <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                  </svg>\n                </button>\n              </div>\n\n              <StockItemForm\n                item={editingItem}\n                onSave={handleSaveStockItem}\n                onCancel={handleCancelStockForm}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default InventoryPage","size_bytes":14293},"server/src/routes/modules/menu.ts":{"content":"import { Router } from 'express';\nimport db from '../../utils/db';\nimport { authenticate, authorize } from '../../middlewares/auth';\n\nconst router = Router();\n\nrouter.get('/', async (req, res) => {\n  const branchId = Number(req.query.branchId || req.query.branch_id);\n  try {\n    const categories = await db('categories').where(function() {\n      if (branchId) this.where('branch_id', branchId);\n    }).orderBy('position', 'asc');\n\n    const items = await db('menu_items').where(function() {\n      if (branchId) this.where('branch_id', branchId);\n    }).andWhere('is_available', 1);\n\n    res.json({ categories, items });\n  } catch (e) {\n    res.status(500).json({ error: 'Failed to load menu' });\n  }\n});\n\nrouter.post('/', authenticate, authorize(['admin', 'manager']), async (req, res) => {\n  try {\n    const [id] = await db('menu_items').insert(req.body);\n    const item = await db('menu_items').where({ id }).first();\n    res.status(201).json(item);\n  } catch (e) {\n    res.status(400).json({ error: 'Failed to create item' });\n  }\n});\n\nrouter.put('/:id', authenticate, authorize(['admin', 'manager']), async (req, res) => {\n  const id = Number(req.params.id);\n  try {\n    await db('menu_items').where({ id }).update({ ...req.body, updated_at: db.fn.now() });\n    const item = await db('menu_items').where({ id }).first();\n    res.json(item);\n  } catch (e) {\n    res.status(400).json({ error: 'Failed to update item' });\n  }\n});\n\nexport default router;\n","size_bytes":1456},"server/src/routes/app-settings.js":{"content":"const express = require('express');\nconst { db } = require('../database/init');\nconst { authenticateToken, authorize } = require('../middleware/auth');\nconst { logger } = require('../middleware/errorHandler');\n\nconst router = express.Router();\n\n// Get all settings (public settings only for non-authenticated users)\nrouter.get('/', async (req, res) => {\n  try {\n    const isAuthenticated = req.headers.authorization;\n    \n    let query = db('app_settings');\n    \n    // If not authenticated, only return public settings\n    if (!isAuthenticated) {\n      query = query.where({ is_public: true });\n    }\n    \n    const settings = await query.select('key', 'value', 'type', 'category', 'description', 'is_public');\n    \n    // Convert to object format\n    const settingsObj = {};\n    settings.forEach(setting => {\n      let value = setting.value;\n      \n      // Parse value based on type\n      switch (setting.type) {\n        case 'number':\n          value = parseFloat(value);\n          break;\n        case 'boolean':\n          value = value === 'true';\n          break;\n        case 'json':\n          try {\n            value = JSON.parse(value);\n          } catch (e) {\n            value = value;\n          }\n          break;\n        default:\n          value = value;\n      }\n      \n      settingsObj[setting.key] = {\n        value,\n        type: setting.type,\n        category: setting.category,\n        description: setting.description,\n        isPublic: setting.is_public\n      };\n    });\n    \n    res.json({ success: true, settings: settingsObj });\n  } catch (error) {\n    logger.error('Settings fetch error:', error);\n    res.status(500).json({ error: 'Failed to fetch settings' });\n  }\n});\n\n// Get settings by category\nrouter.get('/category/:category', async (req, res) => {\n  try {\n    const { category } = req.params;\n    const isAuthenticated = req.headers.authorization;\n    \n    let query = db('app_settings').where({ category });\n    \n    if (!isAuthenticated) {\n      query = query.where({ is_public: true });\n    }\n    \n    const settings = await query.select('key', 'value', 'type', 'category', 'description', 'is_public');\n    \n    const settingsObj = {};\n    settings.forEach(setting => {\n      let value = setting.value;\n      \n      switch (setting.type) {\n        case 'number':\n          value = parseFloat(value);\n          break;\n        case 'boolean':\n          value = value === 'true';\n          break;\n        case 'json':\n          try {\n            value = JSON.parse(value);\n          } catch (e) {\n            value = value;\n          }\n          break;\n        default:\n          value = value;\n      }\n      \n      settingsObj[setting.key] = {\n        value,\n        type: setting.type,\n        category: setting.category,\n        description: setting.description,\n        isPublic: setting.is_public\n      };\n    });\n    \n    res.json({ success: true, settings: settingsObj });\n  } catch (error) {\n    logger.error('Settings category fetch error:', error);\n    res.status(500).json({ error: 'Failed to fetch settings category' });\n  }\n});\n\n// Update single setting (admin only)\nrouter.put('/:key', authenticateToken, authorize('admin'), async (req, res) => {\n  try {\n    const { key } = req.params;\n    const { value } = req.body;\n    \n    // Get current setting to determine type\n    const currentSetting = await db('app_settings').where({ key }).first();\n    \n    if (!currentSetting) {\n      return res.status(404).json({ error: 'Setting not found' });\n    }\n    \n    // Convert value based on type\n    let processedValue = value;\n    switch (currentSetting.type) {\n      case 'number':\n        processedValue = parseFloat(value).toString();\n        break;\n      case 'boolean':\n        processedValue = Boolean(value).toString();\n        break;\n      case 'json':\n        processedValue = JSON.stringify(value);\n        break;\n      default:\n        processedValue = String(value);\n    }\n    \n    await db('app_settings')\n      .where({ key })\n      .update({ \n        value: processedValue,\n        updated_at: db.raw('CURRENT_TIMESTAMP')\n      });\n    \n    // Log setting update\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'SETTING_UPDATE',\n      meta: JSON.stringify({ \n        key, \n        oldValue: currentSetting.value, \n        newValue: processedValue,\n        userId: req.user.id\n      })\n    });\n    \n    logger.info(`Setting updated: ${key} by ${req.user.username}`);\n    \n    res.json({ success: true, message: 'Setting updated successfully' });\n  } catch (error) {\n    logger.error('Setting update error:', error);\n    res.status(500).json({ error: 'Failed to update setting' });\n  }\n});\n\n// Update multiple settings (admin only)\nrouter.put('/', authenticateToken, authorize('admin'), async (req, res) => {\n  try {\n    const { settings } = req.body;\n    \n    if (!settings || typeof settings !== 'object') {\n      return res.status(400).json({ error: 'Invalid settings format' });\n    }\n    \n    const updates = [];\n    \n    for (const [key, value] of Object.entries(settings)) {\n      // Get current setting to determine type\n      const currentSetting = await db('app_settings').where({ key }).first();\n      \n      if (!currentSetting) {\n        continue; // Skip unknown settings\n      }\n      \n      // Convert value based on type\n      let processedValue = value;\n      switch (currentSetting.type) {\n        case 'number':\n          processedValue = parseFloat(value).toString();\n          break;\n        case 'boolean':\n          processedValue = Boolean(value).toString();\n          break;\n        case 'json':\n          processedValue = JSON.stringify(value);\n          break;\n        default:\n          processedValue = String(value);\n      }\n      \n      updates.push({\n        key,\n        value: processedValue,\n        oldValue: currentSetting.value\n      });\n    }\n    \n    // Update all settings\n    for (const update of updates) {\n      await db('app_settings')\n        .where({ key: update.key })\n        .update({ \n          value: update.value,\n          updated_at: db.raw('CURRENT_TIMESTAMP')\n        });\n      \n      // Log setting update\n      await db('audit_logs').insert({\n        user_id: req.user.id,\n        action: 'SETTING_UPDATE',\n        meta: JSON.stringify({ \n          key: update.key, \n          oldValue: update.oldValue, \n          newValue: update.value,\n          userId: req.user.id\n        })\n      });\n    }\n    \n    logger.info(`Multiple settings updated by ${req.user.username}`);\n    \n    res.json({ success: true, message: 'Settings updated successfully', updatedCount: updates.length });\n  } catch (error) {\n    logger.error('Settings update error:', error);\n    res.status(500).json({ error: 'Failed to update settings' });\n  }\n});\n\n// Reset settings to default (admin only)\nrouter.post('/reset', authenticateToken, authorize('admin'), async (req, res) => {\n  try {\n    const { category } = req.body;\n    \n    // Delete existing settings\n    if (category) {\n      await db('app_settings').where({ category }).del();\n    } else {\n      await db('app_settings').del();\n    }\n    \n    // Re-run seeds for the category or all\n    if (category) {\n      // This would require importing the seed data and filtering by category\n      // For now, we'll just return success\n      logger.info(`Settings reset for category: ${category} by ${req.user.username}`);\n    } else {\n      logger.info(`All settings reset by ${req.user.username}`);\n    }\n    \n    res.json({ success: true, message: 'Settings reset successfully' });\n  } catch (error) {\n    logger.error('Settings reset error:', error);\n    res.status(500).json({ error: 'Failed to reset settings' });\n  }\n});\n\nmodule.exports = router;","size_bytes":7720},"server/src/migrations/20250103000001_initial_schema.js":{"content":"exports.up = function(knex) {\n  return knex.schema\n    .createTable('users', table => {\n      table.increments('id').primary();\n      table.string('username').unique().notNullable();\n      table.string('password_hash').notNullable();\n      table.string('full_name');\n      table.string('role').notNullable();\n      table.string('pin');\n      table.boolean('is_active').defaultTo(true);\n      table.timestamps(true, true);\n    })\n    \n    .createTable('branches', table => {\n      table.increments('id').primary();\n      table.string('name').notNullable();\n      table.string('code').unique();\n      table.text('address');\n      table.timestamps(true, true);\n    })\n    \n    .createTable('tables', table => {\n      table.increments('id').primary();\n      table.integer('branch_id').unsigned();\n      table.string('table_number').notNullable();\n      table.string('qr_code');\n      table.text('description');\n      table.timestamps(true, true);\n      table.foreign('branch_id').references('id').inTable('branches');\n    })\n    \n    .createTable('categories', table => {\n      table.increments('id').primary();\n      table.integer('branch_id').unsigned();\n      table.string('name').notNullable();\n      table.integer('position').defaultTo(0);\n      table.timestamps(true, true);\n      table.foreign('branch_id').references('id').inTable('branches');\n    })\n    \n    .createTable('menu_items', table => {\n      table.increments('id').primary();\n      table.integer('branch_id').unsigned();\n      table.integer('category_id').unsigned();\n      table.string('sku');\n      table.string('name').notNullable();\n      table.text('description');\n      table.decimal('price', 10, 2).notNullable();\n      table.string('image');\n      table.boolean('is_available').defaultTo(true);\n      table.timestamps(true, true);\n      table.foreign('branch_id').references('id').inTable('branches');\n      table.foreign('category_id').references('id').inTable('categories');\n    })\n    \n    .createTable('modifiers', table => {\n      table.increments('id').primary();\n      table.integer('menu_item_id').unsigned();\n      table.string('name');\n      table.decimal('extra_price', 10, 2).defaultTo(0);\n      table.foreign('menu_item_id').references('id').inTable('menu_items');\n    })\n    \n    .createTable('orders', table => {\n      table.increments('id').primary();\n      table.integer('branch_id').unsigned();\n      table.string('order_code').unique();\n      table.integer('table_id').unsigned();\n      table.string('customer_name');\n      table.decimal('total', 10, 2);\n      table.decimal('tax', 10, 2).defaultTo(0);\n      table.decimal('service_charge', 10, 2).defaultTo(0);\n      table.string('status').defaultTo('PENDING');\n      table.string('payment_status').defaultTo('UNPAID');\n      table.timestamps(true, true);\n      table.foreign('branch_id').references('id').inTable('branches');\n      table.foreign('table_id').references('id').inTable('tables');\n    })\n    \n    .createTable('order_items', table => {\n      table.increments('id').primary();\n      table.integer('order_id').unsigned();\n      table.integer('menu_item_id').unsigned();\n      table.integer('quantity').defaultTo(1);\n      table.decimal('unit_price', 10, 2);\n      table.text('note');\n      table.timestamps(true, true);\n      table.foreign('order_id').references('id').inTable('orders');\n      table.foreign('menu_item_id').references('id').inTable('menu_items');\n    })\n    \n    .createTable('order_item_modifiers', table => {\n      table.increments('id').primary();\n      table.integer('order_item_id').unsigned();\n      table.integer('modifier_id').unsigned();\n      table.decimal('extra_price', 10, 2).defaultTo(0);\n      table.foreign('order_item_id').references('id').inTable('order_items');\n      table.foreign('modifier_id').references('id').inTable('modifiers');\n    })\n    \n    .createTable('payments', table => {\n      table.increments('id').primary();\n      table.integer('order_id').unsigned();\n      table.string('payment_type');\n      table.decimal('amount', 10, 2);\n      table.string('transaction_ref');\n      table.timestamp('paid_at').defaultTo(knex.fn.now());\n      table.foreign('order_id').references('id').inTable('orders');\n    })\n    \n    .createTable('stock_items', table => {\n      table.increments('id').primary();\n      table.integer('branch_id').unsigned();\n      table.string('name');\n      table.string('sku');\n      table.decimal('quantity', 10, 2).defaultTo(0);\n      table.string('unit');\n      table.decimal('min_threshold', 10, 2).defaultTo(0);\n      table.timestamps(true, true);\n      table.foreign('branch_id').references('id').inTable('branches');\n    })\n    \n    .createTable('recipes', table => {\n      table.increments('id').primary();\n      table.integer('menu_item_id').unsigned();\n      table.integer('stock_item_id').unsigned();\n      table.decimal('qty_per_serving', 10, 2);\n      table.foreign('menu_item_id').references('id').inTable('menu_items');\n      table.foreign('stock_item_id').references('id').inTable('stock_items');\n    })\n    \n    .createTable('stock_movements', table => {\n      table.increments('id').primary();\n      table.integer('stock_item_id').unsigned();\n      table.decimal('change', 10, 2);\n      table.string('reason');\n      table.timestamps(true, true);\n      table.foreign('stock_item_id').references('id').inTable('stock_items');\n    })\n    \n    .createTable('settings', table => {\n      table.increments('id').primary();\n      table.string('key').unique();\n      table.text('value');\n      table.timestamps(true, true);\n    })\n    \n    .createTable('audit_logs', table => {\n      table.increments('id').primary();\n      table.integer('user_id').unsigned();\n      table.string('action');\n      table.text('meta');\n      table.timestamps(true, true);\n      table.foreign('user_id').references('id').inTable('users');\n    })\n    \n    .createTable('sync_logs', table => {\n      table.increments('id').primary();\n      table.string('table_name');\n      table.integer('record_id');\n      table.string('operation');\n      table.text('payload');\n      table.boolean('synced').defaultTo(false);\n      table.timestamps(true, true);\n    });\n};\n\nexports.down = function(knex) {\n  return knex.schema\n    .dropTableIfExists('sync_logs')\n    .dropTableIfExists('audit_logs')\n    .dropTableIfExists('settings')\n    .dropTableIfExists('stock_movements')\n    .dropTableIfExists('recipes')\n    .dropTableIfExists('stock_items')\n    .dropTableIfExists('payments')\n    .dropTableIfExists('order_item_modifiers')\n    .dropTableIfExists('order_items')\n    .dropTableIfExists('orders')\n    .dropTableIfExists('modifiers')\n    .dropTableIfExists('menu_items')\n    .dropTableIfExists('categories')\n    .dropTableIfExists('tables')\n    .dropTableIfExists('branches')\n    .dropTableIfExists('users');\n};","size_bytes":6810},"frontend/src/pages/customer/OrderStatusPage.jsx":{"content":"import { useState, useEffect } from 'react'\nimport { useParams, useNavigate, useSearchParams } from 'react-router-dom'\nimport api from '../../services/api'\nimport { \n  CheckCircleIcon, \n  ClockIcon,\n  FireIcon,\n  TruckIcon,\n  HomeIcon,\n  ArrowLeftIcon\n} from '@heroicons/react/24/outline'\nimport toast from 'react-hot-toast'\nimport io from 'socket.io-client'\n\nfunction OrderStatusPage() {\n  const { orderId } = useParams()\n  const navigate = useNavigate()\n  const [searchParams] = useSearchParams()\n  const orderPin = searchParams.get('pin')\n  const [order, setOrder] = useState(null)\n  const [loading, setLoading] = useState(true)\n  const [socket, setSocket] = useState(null)\n\n  useEffect(() => {\n    if (orderId) {\n      loadOrder()\n      setupSocketConnection()\n    }\n\n    return () => {\n      if (socket) socket.disconnect()\n    }\n  }, [orderId])\n\n  const setupSocketConnection = () => {\n    const newSocket = io(import.meta.env.VITE_API_URL || 'http://localhost:3001')\n    \n    newSocket.on('connect', () => {\n      console.log('Connected to order status updates')\n    })\n\n    newSocket.on('order.updated', (updatedOrder) => {\n      if (updatedOrder.id === parseInt(orderId)) {\n        setOrder(updatedOrder)\n        toast.success(`Order status updated: ${updatedOrder.status}`)\n      }\n    })\n\n    newSocket.on('order.paid', (paidOrder) => {\n      if (paidOrder.id === parseInt(orderId)) {\n        setOrder(paidOrder)\n        toast.success('Payment confirmed! Your order is being prepared.')\n      }\n    })\n\n    setSocket(newSocket)\n  }\n\n  const loadOrder = async () => {\n    try {\n      setLoading(true)\n      const url = orderPin \n        ? `/api/orders/${orderId}?pin=${orderPin}`\n        : `/api/orders/${orderId}`\n      const response = await api.get(url)\n      setOrder(response.data.order)\n    } catch (error) {\n      toast.error('Failed to load order details')\n      console.error('Order load error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const getStatusColor = (status) => {\n    const colors = {\n      'PENDING': 'text-yellow-600 bg-yellow-50 border-yellow-200',\n      'CONFIRMED': 'text-blue-600 bg-blue-50 border-blue-200',\n      'PREPARING': 'text-orange-600 bg-orange-50 border-orange-200',\n      'READY': 'text-green-600 bg-green-50 border-green-200',\n      'SERVED': 'text-purple-600 bg-purple-50 border-purple-200',\n      'COMPLETED': 'text-green-600 bg-green-50 border-green-200',\n      'CANCELLED': 'text-red-600 bg-red-50 border-red-200'\n    }\n    return colors[status] || 'text-gray-600 bg-gray-50 border-gray-200'\n  }\n\n  const getStatusIcon = (status) => {\n    const icons = {\n      'PENDING': ClockIcon,\n      'CONFIRMED': CheckCircleIcon,\n      'PREPARING': FireIcon,\n      'READY': TruckIcon,\n      'SERVED': HomeIcon,\n      'COMPLETED': CheckCircleIcon,\n      'CANCELLED': ClockIcon\n    }\n    return icons[status] || ClockIcon\n  }\n\n  const getStatusSteps = () => {\n    const allSteps = [\n      { key: 'PENDING', label: 'Order Placed', icon: ClockIcon },\n      { key: 'PREPARING', label: 'Preparing', icon: FireIcon },\n      { key: 'READY', label: 'Ready', icon: CheckCircleIcon },\n      { key: 'SERVED', label: 'Served', icon: HomeIcon }\n    ]\n\n    const statusOrder = ['PENDING', 'CONFIRMED', 'PREPARING', 'READY', 'SERVED', 'COMPLETED']\n    const currentIndex = statusOrder.indexOf(order?.status || 'PENDING')\n\n    return allSteps.map((step, index) => ({\n      ...step,\n      completed: index <= currentIndex - 1 || order?.status === 'COMPLETED',\n      active: step.key === order?.status || (order?.status === 'COMPLETED' && index === allSteps.length - 1)\n    }))\n  }\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"inline-block h-16 w-16 animate-spin rounded-full border-4 border-solid border-blue-600 border-r-transparent mb-4\"></div>\n          <p className=\"text-gray-600 font-medium\">Loading order details...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (!order) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-50 flex items-center justify-center p-4\">\n        <div className=\"text-center max-w-md\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Order Not Found</h2>\n          <p className=\"text-gray-600 mb-8\">We couldn't find the order you're looking for.</p>\n          <button\n            onClick={() => navigate('/menu')}\n            className=\"px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-bold rounded-xl shadow-lg hover:shadow-xl transition-all active:scale-95\"\n          >\n            Back to Menu\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  const StatusIcon = getStatusIcon(order.status)\n  const statusSteps = getStatusSteps()\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-50 py-8\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        \n        <button\n          onClick={() => navigate('/menu')}\n          className=\"mb-6 flex items-center gap-2 text-gray-600 hover:text-gray-900 font-medium transition-colors\"\n        >\n          <ArrowLeftIcon className=\"h-5 w-5\" />\n          <span>Back to Menu</span>\n        </button>\n\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-20 h-20 bg-gradient-to-br from-blue-600 via-purple-600 to-pink-600 rounded-3xl mb-4 shadow-xl\">\n            <StatusIcon className=\"h-10 w-10 text-white\" />\n          </div>\n          <h1 className=\"text-4xl font-black bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent mb-2\">\n            Order Status\n          </h1>\n          <p className=\"text-gray-600 font-medium\">Order #{order.order_code}</p>\n        </div>\n\n        <div className=\"space-y-6\">\n          \n          <div className=\"bg-white rounded-2xl shadow-lg border border-gray-100 overflow-hidden\">\n            <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 px-6 py-4\">\n              <h2 className=\"text-xl font-bold text-white\">Current Status</h2>\n            </div>\n            <div className=\"p-6\">\n              <div className={`inline-flex items-center gap-3 px-6 py-3 rounded-xl border-2 ${getStatusColor(order.status)}`}>\n                <StatusIcon className=\"h-6 w-6\" />\n                <span className=\"font-bold text-lg\">{order.status}</span>\n              </div>\n\n              {order.payment_status === 'UNPAID' && (\n                <div className=\"mt-6 p-4 bg-yellow-50 border-2 border-yellow-200 rounded-xl\">\n                  <p className=\"text-yellow-800 font-semibold flex items-center gap-2\">\n                    <ClockIcon className=\"h-5 w-5\" />\n                    Waiting for payment confirmation from cashier\n                  </p>\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-2xl shadow-lg border border-gray-100 overflow-hidden\">\n            <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 px-6 py-4\">\n              <h2 className=\"text-xl font-bold text-white\">Order Progress</h2>\n            </div>\n            <div className=\"p-8\">\n              <div className=\"relative\">\n                <div className=\"absolute left-8 top-0 bottom-0 w-1 bg-gray-200\"></div>\n                \n                <div className=\"space-y-8\">\n                  {statusSteps.map((step, index) => {\n                    const StepIcon = step.icon\n                    return (\n                      <div key={step.key} className=\"relative flex items-center gap-4\">\n                        <div className={`relative z-10 flex items-center justify-center w-16 h-16 rounded-full border-4 transition-all ${\n                          step.active \n                            ? 'bg-gradient-to-br from-blue-600 to-purple-600 border-blue-600 shadow-lg scale-110' \n                            : step.completed\n                            ? 'bg-green-500 border-green-500'\n                            : 'bg-white border-gray-300'\n                        }`}>\n                          <StepIcon className={`h-8 w-8 ${\n                            step.active || step.completed ? 'text-white' : 'text-gray-400'\n                          }`} />\n                        </div>\n                        <div>\n                          <h3 className={`font-bold text-lg ${\n                            step.active || step.completed ? 'text-gray-900' : 'text-gray-400'\n                          }`}>\n                            {step.label}\n                          </h3>\n                          {step.active && (\n                            <p className=\"text-sm text-blue-600 font-semibold\">In Progress...</p>\n                          )}\n                          {step.completed && !step.active && (\n                            <p className=\"text-sm text-green-600 font-semibold\">✓ Completed</p>\n                          )}\n                        </div>\n                      </div>\n                    )\n                  })}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-2xl shadow-lg border border-gray-100 overflow-hidden\">\n            <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 px-6 py-4\">\n              <h2 className=\"text-xl font-bold text-white\">Order Details</h2>\n            </div>\n            <div className=\"p-6\">\n              <div className=\"grid grid-cols-2 gap-4 mb-6\">\n                <div>\n                  <p className=\"text-sm text-gray-600 mb-1\">Table Number</p>\n                  <p className=\"font-bold text-gray-900\">#{order.table_number}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600 mb-1\">Payment Status</p>\n                  <p className={`font-bold ${order.payment_status === 'PAID' ? 'text-green-600' : 'text-yellow-600'}`}>\n                    {order.payment_status}\n                  </p>\n                </div>\n              </div>\n\n              <h3 className=\"font-bold text-gray-900 mb-3\">Items Ordered</h3>\n              <div className=\"space-y-3\">\n                {order.items?.map((item, idx) => (\n                  <div key={idx} className=\"flex justify-between items-center p-3 bg-gray-50 rounded-xl\">\n                    <div>\n                      <p className=\"font-semibold text-gray-900\">{item.item_name}</p>\n                      <p className=\"text-sm text-gray-600\">Qty: {item.quantity}</p>\n                    </div>\n                    <p className=\"font-bold text-gray-900\">\n                      {(item.quantity * item.unit_price).toFixed(2)} MAD\n                    </p>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"mt-6 pt-4 border-t-2 border-gray-200\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-xl font-bold text-gray-900\">Total:</span>\n                  <span className=\"text-3xl font-black bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                    {order.total.toFixed(2)} MAD\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {order.status === 'READY' && (\n            <div className=\"bg-gradient-to-br from-green-50 to-emerald-50 border-2 border-green-200 rounded-2xl p-6 text-center\">\n              <CheckCircleIcon className=\"h-16 w-16 text-green-600 mx-auto mb-4\" />\n              <h3 className=\"text-2xl font-bold text-green-900 mb-2\">Your Order is Ready!</h3>\n              <p className=\"text-green-700 font-medium\">Please collect your order from the counter</p>\n            </div>\n          )}\n\n          <button\n            onClick={() => navigate('/menu')}\n            className=\"w-full py-4 px-6 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-bold rounded-xl shadow-lg hover:shadow-xl transition-all active:scale-95\"\n          >\n            Order More Items\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default OrderStatusPage\n","size_bytes":12347},"frontend/src/pages/admin/KitchenDisplayPage.jsx":{"content":"import React, { useState, useEffect, useRef } from 'react'\nimport { ordersAPI } from '../../services/api'\nimport { useSocket } from '../../contexts/SocketContext'\nimport { \n  ClockIcon, \n  CheckIcon, \n  ExclamationTriangleIcon,\n  PrinterIcon,\n  EyeIcon,\n  FireIcon\n} from '@heroicons/react/24/outline'\nimport toast from 'react-hot-toast'\nimport { useReactToPrint } from 'react-to-print'\n\n// Kitchen Order Print Component\nconst KitchenOrderPrint = React.forwardRef(({ order, urgency, currentTime }, ref) => {\n  const getUrgencyColor = (urgency) => {\n    switch (urgency) {\n      case 'very-late': return 'bg-red-500 text-white'\n      case 'late': return 'bg-orange-500 text-white'\n      case 'new': return 'bg-green-500 text-white'\n      default: return 'bg-blue-500 text-white'\n    }\n  }\n\n  const getUrgencyText = (urgency) => {\n    switch (urgency) {\n      case 'very-late': return 'VERY LATE - URGENT'\n      case 'late': return 'LATE - PRIORITY'\n      case 'new': return 'NEW ORDER'\n      default: return 'NORMAL'\n    }\n  }\n\n  const calculateWaitTime = (createdAt) => {\n    const created = new Date(createdAt)\n    const diffMs = currentTime - created\n    const diffMins = Math.floor(diffMs / 60000)\n    return diffMins\n  }\n\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'MAD',\n      minimumFractionDigits: 2\n    }).format(amount)\n  }\n\n  return (\n    <div ref={ref} className=\"p-4 bg-white\" style={{ \n      fontFamily: 'Arial, sans-serif',\n      fontSize: '12px',\n      width: '80mm'\n    }}>\n      {/* Header */}\n      <div className=\"text-center border-b-2 border-gray-800 pb-2 mb-3\">\n        <h1 className=\"text-lg font-bold uppercase\">KITCHEN ORDER</h1>\n        <div className={`inline-block px-2 py-1 rounded text-xs font-bold mt-1 ${getUrgencyColor(urgency)}`}>\n          {getUrgencyText(urgency)}\n        </div>\n      </div>\n\n      {/* Order Info */}\n      <div className=\"grid grid-cols-2 gap-2 mb-3 text-xs\">\n        <div>\n          <p><strong>Order:</strong> #{order.order_code}</p>\n          <p><strong>Table:</strong> {order.table_number || 'TAKEAWAY'}</p>\n          <p><strong>Customer:</strong> {order.customer_name || 'WALK-IN'}</p>\n        </div>\n        <div className=\"text-right\">\n          <p><strong>Time:</strong> {new Date(order.created_at).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</p>\n          <p><strong>Wait:</strong> {calculateWaitTime(order.created_at)}min</p>\n          <p><strong>Status:</strong> {order.status}</p>\n        </div>\n      </div>\n\n      {/* Items */}\n      <table className=\"w-full border-collapse border border-gray-300 mb-3 text-xs\">\n        <thead>\n          <tr className=\"bg-gray-800 text-white\">\n            <th className=\"border border-gray-300 p-1 text-left\">Qty</th>\n            <th className=\"border border-gray-300 p-1 text-left\">Item</th>\n            <th className=\"border border-gray-300 p-1 text-left\">Price</th>\n          </tr>\n        </thead>\n        <tbody>\n          {order.items?.map((item, index) => {\n            const itemTotal = (item.unit_price * item.quantity) + \n              (item.modifiers?.reduce((sum, mod) => sum + mod.extra_price, 0) * item.quantity || 0)\n            \n            return (\n              <tr key={index}>\n                <td className=\"border border-gray-300 p-1 text-center font-bold\">\n                  {item.quantity}x\n                </td>\n                <td className=\"border border-gray-300 p-1\">\n                  <div className=\"font-semibold\">{item.menu_item_name || item.item_name}</div>\n                  {item.modifiers && item.modifiers.length > 0 && (\n                    <div className=\"text-xs text-gray-600\">\n                      + {item.modifiers.map(mod => mod.name).join(', ')}\n                    </div>\n                  )}\n                  {item.note && (\n                    <div className=\"text-xs text-blue-600 font-medium\">\n                      Note: {item.note}\n                    </div>\n                  )}\n                </td>\n                <td className=\"border border-gray-300 p-1 text-right\">\n                  {formatCurrency(itemTotal)}\n                </td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n\n      {/* Totals */}\n      <div className=\"border-t border-gray-800 pt-2 mb-3\">\n        <div className=\"flex justify-between text-sm font-bold\">\n          <span>SUBTOTAL:</span>\n          <span>{formatCurrency(order.total - (order.tax || 0) - (order.service_charge || 0))}</span>\n        </div>\n        {order.tax > 0 && (\n          <div className=\"flex justify-between text-xs\">\n            <span>Tax:</span>\n            <span>{formatCurrency(order.tax)}</span>\n          </div>\n        )}\n        {order.service_charge > 0 && (\n          <div className=\"flex justify-between text-xs\">\n            <span>Service:</span>\n            <span>{formatCurrency(order.service_charge)}</span>\n          </div>\n        )}\n        <div className=\"flex justify-between text-sm font-bold border-t border-gray-300 mt-1 pt-1\">\n          <span>TOTAL:</span>\n          <span>{formatCurrency(order.total)}</span>\n        </div>\n      </div>\n\n      {/* Special Instructions */}\n      {order.items?.some(item => item.note) && (\n        <div className=\"mb-3 p-2 bg-yellow-50 border border-yellow-200 rounded text-xs\">\n          <h3 className=\"font-bold mb-1\">SPECIAL INSTRUCTIONS:</h3>\n          {order.items?.filter(item => item.note).map((item, index) => (\n            <p key={index} className=\"mb-1\">\n              <strong>{item.menu_item_name}:</strong> {item.note}\n            </p>\n          ))}\n        </div>\n      )}\n\n      {/* Footer */}\n      <div className=\"text-center border-t border-gray-800 pt-2 text-xs\">\n        <p>Printed: {new Date(currentTime).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</p>\n        <p className=\"text-gray-600\">Kitchen Display System</p>\n      </div>\n    </div>\n  )\n})\n\nfunction KitchenDisplayPage() {\n  const [orders, setOrders] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [filter, setFilter] = useState('all')\n  const [currentTime, setCurrentTime] = useState(new Date())\n  const { socket } = useSocket()\n  const [printOrder, setPrintOrder] = useState(null)\n  const printRef = useRef()\n\n  // Update current time every second\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date())\n    }, 1000)\n\n    return () => clearInterval(timer)\n  }, [])\n\n  const handlePrint = useReactToPrint({\n    content: () => printRef.current,\n    documentTitle: `Kitchen-Order-${printOrder?.order_code}`,\n    onAfterPrint: () => setPrintOrder(null),\n    pageStyle: `\n      @media print {\n        @page { size: 80mm; margin: 0; }\n        body { margin: 0; }\n        * { -webkit-print-color-adjust: exact; }\n      }\n    `,\n  })\n\n  useEffect(() => {\n    if (printOrder) {\n      setTimeout(() => {\n        handlePrint()\n      }, 100)\n    }\n  }, [printOrder, handlePrint])\n\n  useEffect(() => {\n    loadOrders()\n  }, [])\n\n  useEffect(() => {\n    if (socket) {\n      // Join kitchen room for real-time updates\n      socket.emit('join-kitchen')\n\n      // Listen for order updates\n      socket.on('order.created', handleOrderCreated)\n      socket.on('order.updated', handleOrderUpdated)\n      socket.on('order.confirmed', handleOrderConfirmed)\n      socket.on('order.status.updated', handleOrderStatusUpdated)\n\n      return () => {\n        socket.emit('leave-kitchen')\n        socket.off('order.created')\n        socket.off('order.updated')\n        socket.off('order.confirmed')\n        socket.off('order.status.updated')\n      }\n    }\n  }, [socket])\n\n  const loadOrders = async () => {\n    try {\n      setLoading(true)\n      const response = await ordersAPI.getOrders({ \n        branchId: 1,\n        status: ['CONFIRMED', 'PREPARING', 'READY']\n      })\n      if (response.data.success) {\n        setOrders(response.data.orders)\n      }\n    } catch (error) {\n      toast.error('Failed to load orders')\n      console.error('Orders load error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleOrderCreated = (order) => {\n    setOrders(prev => [order, ...prev])\n  }\n\n  const handleOrderUpdated = (updatedOrder) => {\n    setOrders(prev => prev.map(order => \n      order.id === updatedOrder.id ? { ...updatedOrder, updated_at: new Date().toISOString() } : order\n    ))\n  }\n\n  const handleOrderConfirmed = (order) => {\n    setOrders(prev => [order, ...prev])\n  }\n\n  const handleOrderStatusUpdated = ({ orderId, status }) => {\n    setOrders(prev => prev.map(order => \n      order.id === orderId ? { ...order, status, updated_at: new Date().toISOString() } : order\n    ))\n  }\n\n  const updateOrderStatus = async (orderId, status) => {\n    try {\n      const response = await ordersAPI.updateOrderStatus(orderId, status)\n      if (response.data.success) {\n        toast.success(`Order status updated to ${status}`)\n        // Socket will handle the real-time update\n      }\n    } catch (error) {\n      console.error('Status update error:', error)\n      toast.error('Failed to update order status')\n    }\n  }\n\n  const acknowledgeOrder = async (orderId) => {\n    try {\n      await ordersAPI.updateOrderStatus(orderId, 'PREPARING')\n      toast.success('Order acknowledged')\n    } catch (error) {\n      console.error('Acknowledge error:', error)\n      toast.error('Failed to acknowledge order')\n    }\n  }\n\n  const markOrderReady = async (orderId) => {\n    try {\n      await ordersAPI.updateOrderStatus(orderId, 'READY')\n      toast.success('Order marked as ready')\n    } catch (error) {\n      console.error('Mark ready error:', error)\n      toast.error('Failed to mark order as ready')\n    }\n  }\n\n  const getOrderUrgency = (order) => {\n    const created = new Date(order.created_at)\n    const diffMs = currentTime - created\n    const diffMins = Math.floor(diffMs / 60000)\n\n    if (diffMins > 30) return 'very-late'\n    if (diffMins > 15) return 'late'\n    if (diffMins <= 5) return 'new'\n    return 'normal'\n  }\n\n  const getUrgencyColor = (urgency) => {\n    switch (urgency) {\n      case 'very-late':\n        return 'border-l-red-500 bg-red-50 hover:bg-red-100'\n      case 'late':\n        return 'border-l-orange-500 bg-orange-50 hover:bg-orange-100'\n      case 'new':\n        return 'border-l-green-500 bg-green-50 hover:bg-green-100'\n      default:\n        return 'border-l-blue-500 bg-blue-50 hover:bg-blue-100'\n    }\n  }\n\n  const getUrgencyBadge = (urgency) => {\n    switch (urgency) {\n      case 'very-late':\n        return 'bg-red-100 text-red-800 border-red-200'\n      case 'late':\n        return 'bg-orange-100 text-orange-800 border-orange-200'\n      case 'new':\n        return 'bg-green-100 text-green-800 border-green-200'\n      default:\n        return 'bg-blue-100 text-blue-800 border-blue-200'\n    }\n  }\n\n  const getUrgencyIcon = (urgency) => {\n    switch (urgency) {\n      case 'very-late':\n        return <FireIcon className=\"h-4 w-4 text-red-600\" />\n      case 'late':\n        return <ExclamationTriangleIcon className=\"h-4 w-4 text-orange-600\" />\n      case 'new':\n        return <ClockIcon className=\"h-4 w-4 text-green-600\" />\n      default:\n        return <ClockIcon className=\"h-4 w-4 text-blue-600\" />\n    }\n  }\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'CONFIRMED':\n        return 'bg-blue-100 text-blue-800 border-blue-200'\n      case 'PREPARING':\n        return 'bg-orange-100 text-orange-800 border-orange-200'\n      case 'READY':\n        return 'bg-green-100 text-green-800 border-green-200'\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200'\n    }\n  }\n\n  const getTimeElapsed = (createdAt) => {\n    const created = new Date(createdAt)\n    const diffMs = currentTime - created\n    const diffMins = Math.floor(diffMs / 60000)\n    \n    if (diffMins < 1) return 'Just now'\n    if (diffMins < 60) return `${diffMins}m ago`\n    \n    const diffHours = Math.floor(diffMins / 60)\n    return `${diffHours}h ${diffMins % 60}m ago`\n  }\n\n  const filteredOrders = orders.filter(order => {\n    if (filter === 'all') return true\n    return order.status === filter\n  })\n\n  // Sort orders by urgency and time\n  const sortedOrders = [...filteredOrders].sort((a, b) => {\n    const urgencyA = getOrderUrgency(a)\n    const urgencyB = getOrderUrgency(b)\n    \n    const urgencyOrder = { 'very-late': 0, 'late': 1, 'new': 2, 'normal': 3 }\n    \n    if (urgencyOrder[urgencyA] !== urgencyOrder[urgencyB]) {\n      return urgencyOrder[urgencyA] - urgencyOrder[urgencyB]\n    }\n    \n    return new Date(a.created_at) - new Date(b.created_at)\n  })\n\n  // Statistics\n  const stats = {\n    total: orders.length,\n    confirmed: orders.filter(o => o.status === 'CONFIRMED').length,\n    preparing: orders.filter(o => o.status === 'PREPARING').length,\n    ready: orders.filter(o => o.status === 'READY').length,\n    veryLate: orders.filter(o => getOrderUrgency(o) === 'very-late').length,\n    late: orders.filter(o => getOrderUrgency(o) === 'late').length,\n    new: orders.filter(o => getOrderUrgency(o) === 'new').length,\n    normal: orders.filter(o => getOrderUrgency(o) === 'normal').length,\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"text-center\">\n          <div className=\"loading-spinner mb-4\"></div>\n          <p className=\"text-gray-600\">Loading kitchen orders...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Print Component (hidden) */}\n      {printOrder && (\n        <div className=\"hidden\">\n          <KitchenOrderPrint \n            ref={printRef} \n            order={printOrder} \n            urgency={getOrderUrgency(printOrder)} \n            currentTime={currentTime}\n          />\n        </div>\n      )}\n\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold gradient-text\">Kitchen Display</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Real-time order management • {currentTime.toLocaleTimeString()}\n          </p>\n        </div>\n        \n        {/* Status Filter */}\n        <div className=\"flex space-x-2\">\n          <button\n            onClick={() => setFilter('all')}\n            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\n              filter === 'all'\n                ? 'bg-blue-600 text-white'\n                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n            }`}\n          >\n            All ({orders.length})\n          </button>\n          <button\n            onClick={() => setFilter('CONFIRMED')}\n            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\n              filter === 'CONFIRMED'\n                ? 'bg-blue-600 text-white'\n                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n            }`}\n          >\n            Confirmed ({stats.confirmed})\n          </button>\n          <button\n            onClick={() => setFilter('PREPARING')}\n            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\n              filter === 'PREPARING'\n                ? 'bg-orange-600 text-white'\n                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n            }`}\n          >\n            Preparing ({stats.preparing})\n          </button>\n          <button\n            onClick={() => setFilter('READY')}\n            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\n              filter === 'READY'\n                ? 'bg-green-600 text-white'\n                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n            }`}\n          >\n            Ready ({stats.ready})\n          </button>\n        </div>\n      </div>\n\n      {/* Urgency Stats */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <div className=\"card text-center bg-green-50 border-green-200\">\n          <div className=\"card-body\">\n            <div className=\"text-2xl font-bold text-green-600\">{stats.new}</div>\n            <div className=\"text-sm text-green-700\">New (0-5min)</div>\n          </div>\n        </div>\n        \n        <div className=\"card text-center bg-blue-50 border-blue-200\">\n          <div className=\"card-body\">\n            <div className=\"text-2xl font-bold text-blue-600\">{stats.normal}</div>\n            <div className=\"text-sm text-blue-700\">Normal (6-15min)</div>\n          </div>\n        </div>\n        \n        <div className=\"card text-center bg-orange-50 border-orange-200\">\n          <div className=\"card-body\">\n            <div className=\"text-2xl font-bold text-orange-600\">{stats.late}</div>\n            <div className=\"text-sm text-orange-700\">Late (16-30min)</div>\n          </div>\n        </div>\n        \n        <div className=\"card text-center bg-red-50 border-red-200\">\n          <div className=\"card-body\">\n            <div className=\"text-2xl font-bold text-red-600\">{stats.veryLate}</div>\n            <div className=\"text-sm text-red-700\">Very Late (30+ min)</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Orders Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n        {sortedOrders.map((order) => {\n          const urgency = getOrderUrgency(order)\n          return (\n            <div\n              key={order.id}\n              className={`card border-l-4 ${getUrgencyColor(urgency)} hover:shadow-lg transition-all duration-200 transform hover:scale-[1.02]`}\n            >\n              <div className=\"card-body\">\n                {/* Order Header */}\n                <div className=\"flex justify-between items-start mb-4\">\n                  <div>\n                    <div className=\"flex items-center space-x-2 mb-1\">\n                      {getUrgencyIcon(urgency)}\n                      <h3 className=\"text-lg font-semibold text-gray-900\">\n                        Order #{order.order_code}\n                      </h3>\n                    </div>\n                    <p className=\"text-sm text-gray-600\">Table {order.table_number || 'Takeaway'}</p>\n                    <p className=\"text-xs text-gray-500\">{order.customer_name || 'Walk-in Customer'}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <span className={`badge ${getStatusColor(order.status)}`}>\n                      {order.status}\n                    </span>\n                    <span className={`badge ${getUrgencyBadge(urgency)} text-xs mt-1`}>\n                      {urgency === 'very-late' ? 'URGENT' : \n                       urgency === 'late' ? 'PRIORITY' : \n                       urgency === 'new' ? 'NEW' : 'NORMAL'}\n                    </span>\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      {getTimeElapsed(order.created_at)}\n                    </p>\n                  </div>\n                </div>\n\n                {/* Order Items */}\n                <div className=\"space-y-3 mb-4\">\n                  <h4 className=\"text-sm font-semibold text-gray-900 border-b border-gray-200 pb-1\">\n                    Items to Prepare:\n                  </h4>\n                  {order.items?.map((item, index) => (\n                    <div key={index} className=\"flex items-start space-x-3 p-3 bg-white rounded-lg border border-gray-200\">\n                      {/* Item Image */}\n                      <div className=\"flex-shrink-0\">\n                        <img\n                          src={item.menu_item?.image || 'https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=80&h=80&fit=crop'}\n                          alt={item.item_name || 'Food item'}\n                          className=\"w-16 h-16 rounded-lg object-cover border border-gray-300\"\n                          onError={(e) => {\n                            e.target.src = 'https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=80&h=80&fit=crop'\n                          }}\n                        />\n                      </div>\n                      \n                      {/* Item Details */}\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center space-x-2 mb-1\">\n                          <span className=\"text-lg font-bold text-blue-600\">\n                            {item.quantity}x\n                          </span>\n                          <span className=\"text-sm font-semibold text-gray-900\">\n                            {item.item_name || 'Unknown Item'}\n                          </span>\n                        </div>\n                        \n                        {item.modifiers && item.modifiers.length > 0 && (\n                          <div className=\"text-xs text-gray-600 mb-1\">\n                            <span className=\"text-blue-600\">Modifiers:</span> {item.modifiers.map(mod => mod.name).join(', ')}\n                          </div>\n                        )}\n                        \n                        {item.note && (\n                          <div className=\"text-xs text-blue-700 font-medium bg-blue-50 px-2 py-1 rounded border border-blue-200\">\n                            📝 Note: {item.note}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                {/* Order Actions */}\n                <div className=\"flex space-x-2\">\n                  {order.status === 'CONFIRMED' && (\n                    <button\n                      onClick={() => acknowledgeOrder(order.id)}\n                      className=\"flex-1 btn-primary btn-sm\"\n                    >\n                      <CheckIcon className=\"h-4 w-4 mr-1\" />\n                      Start Cooking\n                    </button>\n                  )}\n                  \n                  {order.status === 'PREPARING' && (\n                    <button\n                      onClick={() => markOrderReady(order.id)}\n                      className=\"flex-1 btn-success btn-sm\"\n                    >\n                      <CheckIcon className=\"h-4 w-4 mr-1\" />\n                      Mark Ready\n                    </button>\n                  )}\n                  \n                  {order.status === 'READY' && (\n                    <div className=\"flex-1 text-center\">\n                      <span className=\"text-sm font-medium text-green-600\">\n                        Ready for Service\n                      </span>\n                    </div>\n                  )}\n                  \n                  <button\n                    onClick={() => setPrintOrder(order)}\n                    className=\"btn-outline btn-sm\"\n                    title=\"Print Kitchen Ticket\"\n                  >\n                    <PrinterIcon className=\"h-4 w-4\" />\n                  </button>\n                </div>\n\n                {/* Order Total */}\n                <div className=\"mt-4 pt-4 border-t border-gray-200\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Total:</span>\n                    <span className=\"text-lg font-bold text-blue-600\">\n                      {order.total?.toFixed(2)} MAD\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )\n        })}\n      </div>\n\n      {/* Empty State */}\n      {filteredOrders.length === 0 && (\n        <div className=\"text-center py-12\">\n          <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <ClockIcon className=\"h-8 w-8 text-gray-400\" />\n          </div>\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No orders found</h3>\n          <p className=\"text-gray-600\">\n            {filter === 'all' \n              ? 'No orders in the kitchen at the moment'\n              : `No ${filter.toLowerCase()} orders at the moment`\n            }\n          </p>\n        </div>\n      )}\n\n      {/* Kitchen Status Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"card text-center\">\n          <div className=\"card-body\">\n            <div className=\"text-2xl font-bold text-blue-600\">{stats.confirmed}</div>\n            <div className=\"text-sm text-gray-600\">Confirmed</div>\n          </div>\n        </div>\n        \n        <div className=\"card text-center\">\n          <div className=\"card-body\">\n            <div className=\"text-2xl font-bold text-orange-600\">{stats.preparing}</div>\n            <div className=\"text-sm text-gray-600\">Preparing</div>\n          </div>\n        </div>\n        \n        <div className=\"card text-center\">\n          <div className=\"card-body\">\n            <div className=\"text-2xl font-bold text-green-600\">{stats.ready}</div>\n            <div className=\"text-sm text-gray-600\">Ready</div>\n          </div>\n        </div>\n        \n        <div className=\"card text-center\">\n          <div className=\"card-body\">\n            <div className=\"text-2xl font-bold text-gray-600\">{stats.total}</div>\n            <div className=\"text-sm text-gray-600\">Total Active</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default KitchenDisplayPage","size_bytes":25254},"frontend/vite.config.js":{"content":"import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport { VitePWA } from 'vite-plugin-pwa'\nimport path from 'path'\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    VitePWA({\n      registerType: 'autoUpdate',\n      includeAssets: ['favicon.ico', 'apple-touch-icon.png', 'masked-icon.svg'],\n      manifestFilename: 'manifest.json',\n      manifest: {\n        name: 'POSQ Restaurant POS',\n        short_name: 'POSQ',\n        description: 'Restaurant POS and QR Ordering System',\n        theme_color: '#1f2937',\n        background_color: '#ffffff',\n        display: 'standalone',\n        orientation: 'portrait',\n        scope: '/',\n        start_url: '/',\n        icons: [\n          {\n            src: 'pwa-192x192.png',\n            sizes: '192x192',\n            type: 'image/png'\n          },\n          {\n            src: 'pwa-512x512.png',\n            sizes: '512x512',\n            type: 'image/png'\n          },\n          {\n            src: 'pwa-512x512.png',\n            sizes: '512x512',\n            type: 'image/png',\n            purpose: 'any maskable'\n          }\n        ]\n      },\n      workbox: {\n        globDirectory: path.resolve(__dirname, 'dist'),\n        globPatterns: ['**/*.{js,css,html,ico,png,svg}'],\n        runtimeCaching: [\n          {\n            urlPattern: /^https:\\/\\/api\\./,\n            handler: 'NetworkFirst',\n            options: {\n              cacheName: 'api-cache',\n              networkTimeoutSeconds: 10,\n              cacheableResponse: {\n                statuses: [0, 200]\n              }\n            }\n          }\n        ]\n      }\n    })\n  ],\n\n  server: {\n    port: 5000,\n    host: '0.0.0.0',\n    strictPort: true,\n    allowedHosts: true,\n    hmr: {\n      clientPort: 443,\n      protocol: 'wss'\n    },\n    proxy: {\n      '/api': {\n        target: 'http://localhost:3001',\n        changeOrigin: true,\n        secure: false\n      }\n    }\n  },\n\n  build: {\n    outDir: 'dist',\n    sourcemap: true\n  }\n})","size_bytes":1977},"server/src/routes/upload.js":{"content":"const express = require('express');\nconst multer = require('multer');\nconst path = require('path');\nconst fs = require('fs');\nconst { authenticateToken, authorize } = require('../middleware/auth');\nconst { logger } = require('../middleware/errorHandler');\n\nconst router = express.Router();\n\n// API endpoint to serve/render images\nrouter.get('/image/:filename', async (req, res) => {\n  try {\n    const filename = req.params.filename;\n    const uploadsDir = path.join(__dirname, '../../uploads');\n    const filePath = path.join(uploadsDir, filename);\n\n    // Security check: ensure the file path is within uploads directory\n    const resolvedPath = path.resolve(filePath);\n    const resolvedUploadsDir = path.resolve(uploadsDir);\n    \n    if (!resolvedPath.startsWith(resolvedUploadsDir)) {\n      return res.status(403).json({ error: 'Access denied' });\n    }\n\n    // Check if file exists\n    if (!fs.existsSync(filePath)) {\n      return res.status(404).json({ error: 'Image not found' });\n    }\n\n    // Get file extension and set content type\n    const ext = path.extname(filename).toLowerCase();\n    const contentTypes = {\n      '.jpg': 'image/jpeg',\n      '.jpeg': 'image/jpeg',\n      '.png': 'image/png',\n      '.gif': 'image/gif',\n      '.webp': 'image/webp'\n    };\n\n    const contentType = contentTypes[ext] || 'application/octet-stream';\n    \n    // Set headers\n    res.setHeader('Content-Type', contentType);\n    res.setHeader('Cache-Control', 'public, max-age=31536000'); // Cache for 1 year\n    \n    // Send file\n    res.sendFile(filePath);\n  } catch (error) {\n    logger.error('Image serving error:', error);\n    res.status(500).json({ error: 'Failed to serve image' });\n  }\n});\n\n// Ensure uploads directory exists\nconst uploadsDir = path.join(__dirname, '../../uploads');\nif (!fs.existsSync(uploadsDir)) {\n  fs.mkdirSync(uploadsDir, { recursive: true });\n}\n\n// Configure multer for file uploads\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, uploadsDir);\n  },\n  filename: (req, file, cb) => {\n    // Generate unique filename with timestamp\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    const ext = path.extname(file.originalname);\n    cb(null, `menu-item-${uniqueSuffix}${ext}`);\n  }\n});\n\n// File filter to only allow images\nconst fileFilter = (req, file, cb) => {\n  const allowedTypes = /jpeg|jpg|png|gif|webp/;\n  const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\n  const mimetype = allowedTypes.test(file.mimetype);\n\n  if (mimetype && extname) {\n    return cb(null, true);\n  } else {\n    cb(new Error('Only image files are allowed!'));\n  }\n};\n\nconst upload = multer({\n  storage: storage,\n  limits: {\n    fileSize: parseInt(process.env.MAX_FILE_SIZE) || 5 * 1024 * 1024, // 5MB default\n  },\n  fileFilter: fileFilter\n});\n\n// Upload single image\nrouter.post('/image', authenticateToken, authorize('admin', 'manager'), upload.single('image'), async (req, res) => {\n  try {\n    if (!req.file) {\n      return res.status(400).json({ error: 'No image file provided' });\n    }\n\n    // Get full URL with domain using API endpoint\n    const protocol = req.protocol;\n    const host = req.get('host');\n    const imageUrl = `${protocol}://${host}/api/upload/image/${req.file.filename}`;\n    \n    // Log upload\n    await logger.info(`Image uploaded: ${req.file.filename} by user ${req.user.username}`);\n\n    res.json({\n      success: true,\n      imageUrl: imageUrl,\n      filename: req.file.filename,\n      originalName: req.file.originalname,\n      size: req.file.size\n    });\n  } catch (error) {\n    logger.error('Image upload error:', error);\n    res.status(500).json({ error: 'Failed to upload image' });\n  }\n});\n\n// Upload multiple images\nrouter.post('/images', authenticateToken, authorize('admin', 'manager'), upload.array('images', 10), async (req, res) => {\n  try {\n    if (!req.files || req.files.length === 0) {\n      return res.status(400).json({ error: 'No image files provided' });\n    }\n\n    // Get full URL with domain using API endpoint\n    const protocol = req.protocol;\n    const host = req.get('host');\n    \n    const uploadedImages = req.files.map(file => ({\n      imageUrl: `${protocol}://${host}/api/upload/image/${file.filename}`,\n      filename: file.filename,\n      originalName: file.originalname,\n      size: file.size\n    }));\n\n    // Log upload\n    await logger.info(`${req.files.length} images uploaded by user ${req.user.username}`);\n\n    res.json({\n      success: true,\n      images: uploadedImages\n    });\n  } catch (error) {\n    logger.error('Images upload error:', error);\n    res.status(500).json({ error: 'Failed to upload images' });\n  }\n});\n\n// Delete image\nrouter.delete('/image/:filename', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { filename } = req.params;\n    const filePath = path.join(uploadsDir, filename);\n\n    // Check if file exists\n    if (!fs.existsSync(filePath)) {\n      return res.status(404).json({ error: 'Image not found' });\n    }\n\n    // Delete file\n    fs.unlinkSync(filePath);\n\n    // Log deletion\n    await logger.info(`Image deleted: ${filename} by user ${req.user.username}`);\n\n    res.json({\n      success: true,\n      message: 'Image deleted successfully'\n    });\n  } catch (error) {\n    logger.error('Image deletion error:', error);\n    res.status(500).json({ error: 'Failed to delete image' });\n  }\n});\n\n// Get uploaded images list\nrouter.get('/images', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const files = fs.readdirSync(uploadsDir);\n    \n    // Get full URL with domain using API endpoint\n    const protocol = req.protocol;\n    const host = req.get('host');\n    \n    const images = files\n      .filter(file => {\n        const ext = path.extname(file).toLowerCase();\n        return ['.jpg', '.jpeg', '.png', '.gif', '.webp'].includes(ext);\n      })\n      .map(file => ({\n        filename: file,\n        imageUrl: `${protocol}://${host}/api/upload/image/${file}`,\n        uploadDate: fs.statSync(path.join(uploadsDir, file)).mtime\n      }))\n      .sort((a, b) => b.uploadDate - a.uploadDate);\n\n    res.json({\n      success: true,\n      images: images\n    });\n  } catch (error) {\n    logger.error('Images list error:', error);\n    res.status(500).json({ error: 'Failed to get images list' });\n  }\n});\n\n// Error handling middleware for multer\nrouter.use((error, req, res, next) => {\n  if (error instanceof multer.MulterError) {\n    if (error.code === 'LIMIT_FILE_SIZE') {\n      return res.status(400).json({ error: 'File too large. Maximum size is 5MB.' });\n    }\n    if (error.code === 'LIMIT_FILE_COUNT') {\n      return res.status(400).json({ error: 'Too many files. Maximum is 10 files.' });\n    }\n  }\n  \n  if (error.message === 'Only image files are allowed!') {\n    return res.status(400).json({ error: 'Only image files are allowed!' });\n  }\n\n  logger.error('Upload middleware error:', error);\n  res.status(500).json({ error: 'Upload failed' });\n});\n\nmodule.exports = router;","size_bytes":7045},"scripts/restore.sh":{"content":"#!/bin/bash\n\n# POSQ Database Restore Script\n# This script restores database from backups\n\nset -e\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\nprint_status() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\n# Configuration\nBACKUP_DIR=\"./backups\"\nDB_TYPE=${DB_TYPE:-sqlite}\nDB_PATH=${DB_PATH:-./data/posq.db}\n\n# Function to list available backups\nlist_backups() {\n    print_status \"Available backups:\"\n    \n    if [ -d \"$BACKUP_DIR\" ] && [ \"$(ls -A \"$BACKUP_DIR\")\" ]; then\n        echo \"\"\n        echo \"SQLite backups:\"\n        ls -lah \"$BACKUP_DIR\"/*sqlite*.gz 2>/dev/null || echo \"  No SQLite backups found\"\n        \n        echo \"\"\n        echo \"MySQL backups:\"\n        ls -lah \"$BACKUP_DIR\"/*mysql*.gz 2>/dev/null || echo \"  No MySQL backups found\"\n        \n        echo \"\"\n        echo \"PostgreSQL backups:\"\n        ls -lah \"$BACKUP_DIR\"/*postgresql*.gz 2>/dev/null || echo \"  No PostgreSQL backups found\"\n    else\n        echo \"No backups found in $BACKUP_DIR\"\n    fi\n}\n\n# Function to restore SQLite database\nrestore_sqlite() {\n    local backup_file=\"$1\"\n    \n    if [ -z \"$backup_file\" ]; then\n        print_error \"Backup file not specified\"\n        echo \"Usage: $0 sqlite <backup_file>\"\n        exit 1\n    fi\n    \n    if [ ! -f \"$backup_file\" ]; then\n        print_error \"Backup file not found: $backup_file\"\n        exit 1\n    fi\n    \n    print_warning \"This will replace the current database!\"\n    read -p \"Are you sure you want to continue? (y/N): \" -n 1 -r\n    echo\n    \n    if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n        print_status \"Restore cancelled\"\n        exit 0\n    fi\n    \n    print_status \"Restoring SQLite database from $backup_file...\"\n    \n    # Create backup of current database\n    if [ -f \"$DB_PATH\" ]; then\n        cp \"$DB_PATH\" \"${DB_PATH}.backup.$(date +%Y%m%d_%H%M%S)\"\n        print_status \"Current database backed up\"\n    fi\n    \n    # Restore from backup\n    if [[ \"$backup_file\" == *.gz ]]; then\n        gunzip -c \"$backup_file\" > \"$DB_PATH\"\n    else\n        cp \"$backup_file\" \"$DB_PATH\"\n    fi\n    \n    print_success \"SQLite database restored successfully\"\n}\n\n# Function to restore MySQL database\nrestore_mysql() {\n    local backup_file=\"$1\"\n    \n    if [ -z \"$backup_file\" ]; then\n        print_error \"Backup file not specified\"\n        echo \"Usage: $0 mysql <backup_file>\"\n        exit 1\n    fi\n    \n    if [ ! -f \"$backup_file\" ]; then\n        print_error \"Backup file not found: $backup_file\"\n        exit 1\n    fi\n    \n    print_warning \"This will replace the current database!\"\n    read -p \"Are you sure you want to continue? (y/N): \" -n 1 -r\n    echo\n    \n    if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n        print_status \"Restore cancelled\"\n        exit 0\n    fi\n    \n    print_status \"Restoring MySQL database from $backup_file...\"\n    \n    # Restore from backup\n    if [[ \"$backup_file\" == *.gz ]]; then\n        gunzip -c \"$backup_file\" | mysql \\\n            --host=\"$DB_HOST\" \\\n            --port=\"$DB_PORT\" \\\n            --user=\"$DB_USER\" \\\n            --password=\"$DB_PASSWORD\" \\\n            \"$DB_NAME\"\n    else\n        mysql \\\n            --host=\"$DB_HOST\" \\\n            --port=\"$DB_PORT\" \\\n            --user=\"$DB_USER\" \\\n            --password=\"$DB_PASSWORD\" \\\n            \"$DB_NAME\" < \"$backup_file\"\n    fi\n    \n    print_success \"MySQL database restored successfully\"\n}\n\n# Function to restore PostgreSQL database\nrestore_postgresql() {\n    local backup_file=\"$1\"\n    \n    if [ -z \"$backup_file\" ]; then\n        print_error \"Backup file not specified\"\n        echo \"Usage: $0 postgresql <backup_file>\"\n        exit 1\n    fi\n    \n    if [ ! -f \"$backup_file\" ]; then\n        print_error \"Backup file not found: $backup_file\"\n        exit 1\n    fi\n    \n    print_warning \"This will replace the current database!\"\n    read -p \"Are you sure you want to continue? (y/N): \" -n 1 -r\n    echo\n    \n    if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n        print_status \"Restore cancelled\"\n        exit 0\n    fi\n    \n    print_status \"Restoring PostgreSQL database from $backup_file...\"\n    \n    # Restore from backup\n    if [[ \"$backup_file\" == *.gz ]]; then\n        gunzip -c \"$backup_file\" | PGPASSWORD=\"$DB_PASSWORD\" psql \\\n            --host=\"$DB_HOST\" \\\n            --port=\"$DB_PORT\" \\\n            --username=\"$DB_USER\" \\\n            --dbname=\"$DB_NAME\"\n    else\n        PGPASSWORD=\"$DB_PASSWORD\" psql \\\n            --host=\"$DB_HOST\" \\\n            --port=\"$DB_PORT\" \\\n            --username=\"$DB_USER\" \\\n            --dbname=\"$DB_NAME\" \\\n            < \"$backup_file\"\n    fi\n    \n    print_success \"PostgreSQL database restored successfully\"\n}\n\n# Function to show help\nshow_help() {\n    echo \"POSQ Database Restore Script\"\n    echo \"\"\n    echo \"Usage:\"\n    echo \"  $0 list                                    # List available backups\"\n    echo \"  $0 sqlite <backup_file>                   # Restore SQLite database\"\n    echo \"  $0 mysql <backup_file>                     # Restore MySQL database\"\n    echo \"  $0 postgresql <backup_file>                # Restore PostgreSQL database\"\n    echo \"\"\n    echo \"Examples:\"\n    echo \"  $0 list\"\n    echo \"  $0 sqlite backups/posq_sqlite_20240101_120000.db.gz\"\n    echo \"  $0 mysql backups/posq_mysql_20240101_120000.sql.gz\"\n    echo \"  $0 postgresql backups/posq_postgresql_20240101_120000.sql.gz\"\n    echo \"\"\n    echo \"Environment Variables:\"\n    echo \"  DB_TYPE     - Database type (sqlite, mysql, postgresql)\"\n    echo \"  DB_PATH     - SQLite database path\"\n    echo \"  DB_HOST     - Database host\"\n    echo \"  DB_PORT     - Database port\"\n    echo \"  DB_NAME     - Database name\"\n    echo \"  DB_USER     - Database user\"\n    echo \"  DB_PASSWORD - Database password\"\n}\n\n# Main function\nmain() {\n    echo \"==========================================\"\n    echo \"  POSQ Database Restore\"\n    echo \"==========================================\"\n    echo \"\"\n    \n    case \"$1\" in\n        \"list\")\n            list_backups\n            ;;\n        \"sqlite\")\n            restore_sqlite \"$2\"\n            ;;\n        \"mysql\")\n            restore_mysql \"$2\"\n            ;;\n        \"postgresql\")\n            restore_postgresql \"$2\"\n            ;;\n        \"help\"|\"-h\"|\"--help\")\n            show_help\n            ;;\n        *)\n            print_error \"Invalid command: $1\"\n            echo \"\"\n            show_help\n            exit 1\n            ;;\n    esac\n    \n    echo \"\"\n    echo \"Restore completed successfully! 🎉\"\n}\n\n# Run main function\nmain \"$@\"","size_bytes":6647},"frontend/src/pages/customer/CheckoutPage.jsx":{"content":"import { useState, useEffect } from 'react'\nimport { useCart } from '../../contexts/CartContext'\nimport { useNavigate } from 'react-router-dom'\nimport { ordersAPI } from '../../services/api'\nimport { \n  CheckCircleIcon,\n  ArrowLeftIcon,\n  XMarkIcon\n} from '@heroicons/react/24/outline'\nimport toast from 'react-hot-toast'\nimport { useSearchParams } from 'react-router-dom'\n\nfunction CheckoutPage() {\n  const { items: cartItems, total, clearCart, branchId, tableNumber } = useCart()\n  const navigate = useNavigate()\n  const [loading, setLoading] = useState(false)\n  const [showPaymentModal, setShowPaymentModal] = useState(false)\n  const [paymentQRCode, setPaymentQRCode] = useState(null)\n  const [orderDetails, setOrderDetails] = useState(null)\n  const [paymentMethod, setPaymentMethod] = useState('cash')\n  const [customerName, setCustomerName] = useState('')\n  const [searchParams] = useSearchParams()\n  const table = searchParams.get(\"table\")\n  const branch = searchParams.get(\"branch\") || \"1\"\n\n  useEffect(() => {\n    if (cartItems.length === 0) {\n      navigate(`/menu?table=${table}&branch=${branch}`)\n    }\n  }, [cartItems, navigate])\n\n  const calculateTotals = () => {\n    const subtotal = total\n    const taxRate = 10\n    const serviceChargeRate = 5\n    \n    const tax = (subtotal * taxRate) / 100\n    const serviceCharge = (subtotal * serviceChargeRate) / 100\n    const grandTotal = subtotal + tax + serviceCharge\n\n    return {\n      subtotal,\n      tax,\n      serviceCharge,\n      grandTotal\n    }\n  }\n\n  const handlePlaceOrder = async () => {\n    if (!customerName.trim()) {\n      toast.error('Please enter your name')\n      return\n    }\n\n    if (!table) {\n      toast.error('Table not found. Please scan the QR code at your table.')\n      return\n    }\n\n    try {\n      setLoading(true)\n      \n      const orderData = {\n        branchId: parseInt(branch) || 1,\n        tableNumber: table, // Send table number instead of table ID\n        customerName: customerName.trim(),\n        items: cartItems.map(item => ({\n          menuItemId: item.menuItemId,\n          quantity: item.quantity,\n          modifiers: item.modifiers?.map(m => m.id) || [],\n          note: item.note || ''\n        })),\n        paymentMethod: paymentMethod\n      }\n\n\n\n      console.log('🟡 FRONTEND - Before API call:');\n      console.log('Full orderData:', JSON.stringify(orderData, null, 2));\n      console.log('tableNumber value:', orderData.tableNumber, 'type:', typeof orderData.tableNumber);\n      console.log('table value from URL:', table, 'type:', typeof table);\n\n      const response = await ordersAPI.createOrder(orderData)\n      \n      if (response.data.orderId) {\n        setOrderDetails(response.data)\n        \n        if (paymentMethod === 'cash' && response.data.paymentQrCode) {\n          setPaymentQRCode(response.data.paymentQrCode)\n          setShowPaymentModal(true)\n        } else {\n          setTimeout(() => {\n            navigate(`/order-status/${response.data.orderId}?pin=${response.data.pin}`)\n          }, 1500)\n        }\n        \n        // clearCart()\n        toast.success('Order placed successfully!')\n      }\n    } catch (error) {\n      console.error('Order creation error:', error)\n      if (error.response?.data?.error) {\n        toast.error(error.response.data.error)\n      } else {\n        toast.error('Failed to place order. Please try again.')\n      }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const totals = calculateTotals()\n\n  if (showPaymentModal && orderDetails) {\n    return (\n      <div className=\"fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n        <div className=\"bg-white rounded-3xl max-w-lg w-full max-h-[90vh] overflow-y-auto shadow-2xl\">\n          <div className=\"p-8\">\n            <div className=\"text-center mb-8\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-green-500 to-emerald-500 rounded-full flex items-center justify-center mx-auto mb-4 shadow-xl\">\n                <CheckCircleIcon className=\"h-12 w-12 text-white\" />\n              </div>\n              <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">Order Placed!</h2>\n              <p className=\"text-gray-600\">Order #{orderDetails.orderCode}</p>\n            </div>\n\n            <div className=\"space-y-6\">\n              <div className=\"bg-gradient-to-br from-blue-50 to-purple-50 rounded-2xl p-6 border-2 border-blue-100\">\n                <h3 className=\"font-bold text-gray-900 mb-4 text-center text-lg\">\n                  Show this QR code to the cashier\n                </h3>\n                {paymentQRCode && (\n                  <div className=\"flex justify-center p-4 bg-white rounded-xl\">\n                    <img \n                      src={paymentQRCode} \n                      alt=\"Payment QR Code\"\n                      className=\"w-64 h-64\"\n                    />\n                  </div>\n                )}\n                <div className=\"mt-4 text-center\">\n                  <p className=\"text-sm text-gray-600 mb-1\">Order Code:</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{orderDetails.orderCode}</p>\n                  <p className=\"text-sm text-gray-600 mt-2\">PIN: {orderDetails.pin}</p>\n                </div>\n              </div>\n\n              <div className=\"bg-gray-50 rounded-2xl p-5\">\n                <h4 className=\"font-semibold text-gray-900 mb-3\">Order Summary</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Customer:</span>\n                    <span className=\"font-medium\">{customerName}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Table:</span>\n                    <span className=\"font-medium\">#{table}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Items:</span>\n                    <span className=\"font-medium\">{cartItems.reduce((sum, item) => sum + item.quantity, 0)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Payment Method:</span>\n                    <span className=\"font-medium capitalize\">{orderDetails.paymentMethod}</span>\n                  </div>\n                  <div className=\"flex justify-between pt-2 border-t border-gray-200\">\n                    <span className=\"text-gray-900 font-semibold\">Total:</span>\n                    <span className=\"font-bold text-blue-600\">{orderDetails.total.toFixed(2)} MAD</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-3\">\n                <button\n                  onClick={() => navigate(`/order-status/${orderDetails.orderId}?pin=${orderDetails.pin}`)}\n                  className=\"w-full py-4 px-6 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-bold rounded-xl shadow-lg hover:shadow-xl transition-all active:scale-95\"\n                >\n                  Track Order Status\n                </button>\n                \n                <button\n                  onClick={() =>{\n                   navigate(`/menu?table=${table}&branch=${branch}`)\n                   clearCart()}}\n                  className=\"w-full py-4 px-6 bg-gray-100 hover:bg-gray-200 text-gray-700 font-semibold rounded-xl transition-all active:scale-95 flex items-center justify-center gap-2\"\n                >\n                  <ArrowLeftIcon className=\"h-5 w-5\" />\n                  <span>Back to Menu</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-50 py-8\">\n      <div className=\"max-w-3xl mx-auto px-4 sm:px-6 lg:px-8\">\n        \n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-20 h-20 bg-gradient-to-br from-blue-600 via-purple-600 to-pink-600 rounded-3xl mb-4 shadow-xl\">\n            <span className=\"text-4xl\">🛒</span>\n          </div>\n          <h1 className=\"text-4xl font-black mb-2 bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent\">\n            Checkout\n          </h1>\n          <p className=\"text-gray-600 font-medium\">Complete your order</p>\n        </div>\n\n        <div className=\"space-y-6\">\n          \n          <div className=\"bg-white rounded-2xl shadow-lg border border-gray-100 overflow-hidden\">\n            <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 px-6 py-4\">\n              <h2 className=\"text-xl font-bold text-white\">Customer Information</h2>\n            </div>\n            <div className=\"p-6 space-y-4\">\n              <div>\n                <label className=\"block font-semibold text-gray-900 mb-2\">\n                  Your Name <span className=\"text-red-500\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  value={customerName}\n                  onChange={(e) => setCustomerName(e.target.value)}\n                  className=\"w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 transition-all\"\n                  placeholder=\"Enter your name\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block font-semibold text-gray-900 mb-2\">Table Number</label>\n                <div className=\"relative\">\n                  <input\n                    type=\"text\"\n                    value={table || 'Not set'}\n                    readOnly\n                    className=\"w-full px-4 py-3 bg-gray-50 border-2 border-gray-200 rounded-xl text-gray-700 cursor-not-allowed\"\n                  />\n                  {table && (\n                    <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n                      <CheckCircleIcon className=\"h-6 w-6 text-green-500\" />\n                    </div>\n                  )}\n                </div>\n                {table && (\n                  <p className=\"text-sm text-green-600 mt-2 flex items-center gap-1\">\n                    <CheckCircleIcon className=\"h-4 w-4\" />\n                    Table detected from QR code\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-2xl shadow-lg border border-gray-100 overflow-hidden\">\n            <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 px-6 py-4\">\n              <h2 className=\"text-xl font-bold text-white\">Order Summary</h2>\n            </div>\n            <div className=\"p-6\">\n              <div className=\"space-y-4 max-h-64 overflow-y-auto\">\n                {cartItems.map((item, index) => (\n                  <div key={index} className=\"flex items-center gap-4 p-3 bg-gray-50 rounded-xl\">\n                    <img\n                      src={item.image}\n                      alt={item.name}\n                      className=\"w-16 h-16 rounded-lg object-cover\"\n                      onError={(e) => {\n                        e.target.src = 'https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=100&h=100&fit=crop';\n                      }}\n                    />\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-bold text-gray-900\">{item.name}</h3>\n                      <p className=\"text-sm text-gray-600\">Quantity: {item.quantity}</p>\n                      {item.modifiers && item.modifiers.length > 0 && (\n                        <p className=\"text-xs text-gray-500\">\n                          Modifiers: {item.modifiers.map(m => m.name).join(', ')}\n                        </p>\n                      )}\n                      {item.note && (\n                        <p className=\"text-xs text-gray-500\">Note: {item.note}</p>\n                      )}\n                    </div>\n                    <span className=\"font-bold text-gray-900\">\n                      {item.total.toFixed(2)} MAD\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-2xl shadow-lg border border-gray-100 overflow-hidden\">\n            <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 px-6 py-4\">\n              <h2 className=\"text-xl font-bold text-white\">Payment Method</h2>\n            </div>\n            <div className=\"p-6\">\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                <button\n                  onClick={() => setPaymentMethod('cash')}\n                  className={`p-6 rounded-xl border-3 transition-all ${\n                    paymentMethod === 'cash'\n                      ? 'border-blue-500 bg-blue-50 shadow-lg scale-105'\n                      : 'border-gray-200 hover:border-gray-300'\n                  }`}\n                >\n                  <div className=\"text-4xl mb-2\">💵</div>\n                  <h3 className=\"font-bold text-lg text-gray-900\">Cash</h3>\n                  <p className=\"text-sm text-gray-600\">Pay at cashier</p>\n                </button>\n                \n                <button\n                  onClick={() => setPaymentMethod('card')}\n                  className={`p-6 rounded-xl border-3 transition-all ${\n                    paymentMethod === 'card'\n                      ? 'border-blue-500 bg-blue-50 shadow-lg scale-105'\n                      : 'border-gray-200 hover:border-gray-300'\n                  }`}\n                >\n                  <div className=\"text-4xl mb-2\">💳</div>\n                  <h3 className=\"font-bold text-lg text-gray-900\">Card</h3>\n                  <p className=\"text-sm text-gray-600\">Online payment</p>\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-gradient-to-br from-blue-50 to-purple-50 rounded-2xl shadow-lg border-2 border-blue-100 p-6\">\n            <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Total Breakdown</h2>\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between text-gray-700\">\n                <span>Subtotal:</span>\n                <span className=\"font-semibold\">{totals.subtotal.toFixed(2)} MAD</span>\n              </div>\n              <div className=\"flex justify-between text-gray-700\">\n                <span>Tax (10%):</span>\n                <span className=\"font-semibold\">{totals.tax.toFixed(2)} MAD</span>\n              </div>\n              <div className=\"flex justify-between text-gray-700\">\n                <span>Service Charge (5%):</span>\n                <span className=\"font-semibold\">{totals.serviceCharge.toFixed(2)} MAD</span>\n              </div>\n              <div className=\"flex justify-between text-2xl font-bold border-t-2 border-blue-200 pt-3\">\n                <span className=\"text-gray-900\">Grand Total:</span>\n                <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                  {totals.grandTotal.toFixed(2)} MAD\n                </span>\n              </div>\n            </div>\n          </div>\n\n          <button\n            onClick={handlePlaceOrder}\n            disabled={loading || !customerName.trim() || !table}\n            className=\"w-full py-5 px-6 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-bold text-lg rounded-xl shadow-xl hover:shadow-2xl transition-all active:scale-95 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 flex items-center justify-center gap-2\"\n          >\n            {loading ? (\n              <>\n                <div className=\"inline-block h-5 w-5 animate-spin rounded-full border-2 border-solid border-white border-r-transparent\"></div>\n                <span>Placing Order...</span>\n              </>\n            ) : (\n              <>\n                <CheckCircleIcon className=\"h-6 w-6\" />\n                <span>Place Order</span>\n              </>\n            )}\n          </button>\n\n          <button\n            onClick={() => navigate('/cart')}\n            className=\"w-full py-4 px-6 bg-gray-100 hover:bg-gray-200 text-gray-700 font-semibold rounded-xl transition-all active:scale-95 flex items-center justify-center gap-2\"\n          >\n            <ArrowLeftIcon className=\"h-5 w-5\" />\n            <span>Back to Cart</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default CheckoutPage","size_bytes":16729},"server/src/routes/payments.js":{"content":"const express = require('express');\nconst stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);\nconst { db } = require('../database/init');\nconst { authenticateToken, authorize } = require('../middleware/auth');\nconst { validatePayment } = require('../middleware/validation');\nconst { logger } = require('../middleware/errorHandler');\n\nconst router = express.Router();\n\n// Record payment (cashier)\nrouter.post('/', authenticateToken, authorize('admin', 'manager', 'cashier'), validatePayment, async (req, res) => {\n  try {\n    const { orderId, paymentType, amount, transactionRef } = req.body;\n\n    const order = await db('orders').where({ id: orderId }).first();\n    if (!order) {\n      return res.status(404).json({ error: 'Order not found' });\n    }\n\n    // Check if order is already paid\n    const existingPayments = await db('payments').where({ order_id: orderId });\n    const totalPaid = existingPayments.reduce((sum, payment) => sum + parseFloat(payment.amount), 0);\n    \n    if (totalPaid >= order.total) {\n      return res.status(400).json({ error: 'Order is already fully paid' });\n    }\n\n    // Create payment record\n    const [paymentId] = await db('payments').insert({\n      order_id: orderId,\n      payment_type: paymentType,\n      amount,\n      transaction_ref: transactionRef\n    });\n\n    // Update order payment status\n    const newTotalPaid = totalPaid + amount;\n    const paymentStatus = newTotalPaid >= order.total ? 'PAID' : 'PARTIAL';\n    \n    await db('orders')\n      .where({ id: orderId })\n      .update({\n        payment_status: paymentStatus,\n        updated_at: db.raw('CURRENT_TIMESTAMP')\n      });\n\n    // If fully paid, update order status to completed\n    if (paymentStatus === 'PAID' && order.status === 'SERVED') {\n      await db('orders')\n        .where({ id: orderId })\n        .update({\n          status: 'COMPLETED',\n          updated_at: db.raw('CURRENT_TIMESTAMP')\n        });\n    }\n\n    const payment = await db('payments').where({ id: paymentId }).first();\n\n    // Emit real-time event\n    const io = req.app.get('io');\n    const updatedOrder = await db('orders')\n      .select('orders.*', 'tables.table_number')\n      .leftJoin('tables', 'orders.table_id', 'tables.id')\n      .where({ 'orders.id': orderId })\n      .first();\n\n    io.to(`branch:${order.branch_id}:cashier`).emit('payment.recorded', {\n      orderId,\n      payment,\n      paymentStatus,\n      totalPaid: newTotalPaid\n    });\n\n    // Log payment\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'PAYMENT_RECORD',\n      meta: JSON.stringify({ \n        orderId, \n        paymentId, \n        paymentType, \n        amount, \n        transactionRef,\n        userId: req.user.id\n      })\n    });\n\n    logger.info(`Payment recorded for order ${orderId}: ${paymentType} ${amount}`);\n\n    res.status(201).json({ \n      payment, \n      paymentStatus,\n      totalPaid: newTotalPaid,\n      message: 'Payment recorded successfully' \n    });\n\n  } catch (error) {\n    logger.error('Payment recording error:', error);\n    res.status(500).json({ error: 'Failed to record payment' });\n  }\n});\n\n// Process card payment (Stripe)\nrouter.post('/card', authenticateToken, authorize('admin', 'manager', 'cashier'), async (req, res) => {\n  try {\n    const { orderId, paymentMethodId, amount } = req.body;\n\n    if (!process.env.STRIPE_SECRET_KEY) {\n      return res.status(400).json({ error: 'Stripe not configured' });\n    }\n\n    const order = await db('orders').where({ id: orderId }).first();\n    if (!order) {\n      return res.status(404).json({ error: 'Order not found' });\n    }\n\n    // Create Stripe payment intent\n    const paymentIntent = await stripe.paymentIntents.create({\n      amount: Math.round(amount * 100), // Convert to cents\n      currency: 'mad', // Moroccan Dirham\n      payment_method: paymentMethodId,\n      confirm: true,\n      return_url: `${process.env.FRONTEND_URL}/order/${orderId}`,\n      metadata: {\n        orderId: orderId.toString(),\n        orderCode: order.order_code\n      }\n    });\n\n    if (paymentIntent.status === 'succeeded') {\n      // Record successful payment\n      const [paymentId] = await db('payments').insert({\n        order_id: orderId,\n        payment_type: 'CARD',\n        amount,\n        transaction_ref: paymentIntent.id\n      });\n\n      // Update order payment status\n      await db('orders')\n        .where({ id: orderId })\n        .update({\n          payment_status: 'PAID',\n          status: order.status === 'SERVED' ? 'COMPLETED' : order.status,\n          updated_at: db.raw('CURRENT_TIMESTAMP')\n        });\n\n      // Emit real-time event\n      const io = req.app.get('io');\n      const updatedOrder = await db('orders')\n        .select('orders.*', 'tables.table_number')\n        .leftJoin('tables', 'orders.table_id', 'tables.id')\n        .where({ 'orders.id': orderId })\n        .first();\n\n      io.to(`branch:${order.branch_id}:cashier`).emit('payment.recorded', {\n        orderId,\n        payment: { id: paymentId, payment_type: 'CARD', amount, transaction_ref: paymentIntent.id },\n        paymentStatus: 'PAID',\n        totalPaid: amount\n      });\n\n      // Log payment\n      await db('audit_logs').insert({\n        user_id: req.user.id,\n        action: 'CARD_PAYMENT',\n        meta: JSON.stringify({ \n          orderId, \n          paymentId, \n          stripePaymentIntentId: paymentIntent.id,\n          amount,\n          userId: req.user.id\n        })\n      });\n\n      logger.info(`Card payment successful for order ${orderId}: ${paymentIntent.id}`);\n\n      res.json({ \n        success: true,\n        paymentIntent,\n        message: 'Payment processed successfully' \n      });\n    } else {\n      res.status(400).json({ \n        error: 'Payment failed', \n        paymentIntent \n      });\n    }\n\n  } catch (error) {\n    logger.error('Card payment error:', error);\n    res.status(500).json({ error: 'Payment processing failed' });\n  }\n});\n\n// Get payments for an order\nrouter.get('/order/:orderId', authenticateToken, authorize('admin', 'manager', 'cashier'), async (req, res) => {\n  try {\n    const { orderId } = req.params;\n\n    const payments = await db('payments')\n      .where({ order_id: orderId })\n      .orderBy('paid_at', 'desc');\n\n    const totalPaid = payments.reduce((sum, payment) => sum + parseFloat(payment.amount), 0);\n\n    res.json({ payments, totalPaid });\n  } catch (error) {\n    logger.error('Payments fetch error:', error);\n    res.status(500).json({ error: 'Failed to fetch payments' });\n  }\n});\n\n// Process refund\nrouter.post('/refund', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { paymentId, amount, reason } = req.body;\n\n    const payment = await db('payments').where({ id: paymentId }).first();\n    if (!payment) {\n      return res.status(404).json({ error: 'Payment not found' });\n    }\n\n    let refundTransactionRef = null;\n\n    // If it's a card payment, process Stripe refund\n    if (payment.payment_type === 'CARD' && payment.transaction_ref) {\n      try {\n        const refund = await stripe.refunds.create({\n          payment_intent: payment.transaction_ref,\n          amount: Math.round(amount * 100), // Convert to cents\n          reason: 'requested_by_customer'\n        });\n        refundTransactionRef = refund.id;\n      } catch (stripeError) {\n        logger.error('Stripe refund error:', stripeError);\n        return res.status(400).json({ error: 'Failed to process card refund' });\n      }\n    }\n\n    // Create refund record (negative payment)\n    const [refundId] = await db('payments').insert({\n      order_id: payment.order_id,\n      payment_type: 'REFUND',\n      amount: -amount,\n      transaction_ref: refundTransactionRef || `REF-${Date.now()}`\n    });\n\n    // Update order payment status\n    const order = await db('orders').where({ id: payment.order_id }).first();\n    const allPayments = await db('payments').where({ order_id: payment.order_id });\n    const totalPaid = allPayments.reduce((sum, p) => sum + parseFloat(p.amount), 0);\n    \n    const paymentStatus = totalPaid >= order.total ? 'PAID' : 'PARTIAL';\n    \n    await db('orders')\n      .where({ id: payment.order_id })\n      .update({\n        payment_status: paymentStatus,\n        updated_at: db.raw('CURRENT_TIMESTAMP')\n      });\n\n    // Log refund\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'REFUND',\n      meta: JSON.stringify({ \n        paymentId, \n        refundId, \n        amount, \n        reason,\n        refundTransactionRef,\n        userId: req.user.id\n      })\n    });\n\n    logger.info(`Refund processed for payment ${paymentId}: ${amount}`);\n\n    res.json({ \n      refundId,\n      refundTransactionRef,\n      message: 'Refund processed successfully' \n    });\n\n  } catch (error) {\n    logger.error('Refund processing error:', error);\n    res.status(500).json({ error: 'Failed to process refund' });\n  }\n});\n\n// Stripe webhook handler\nrouter.post('/webhook/stripe', express.raw({ type: 'application/json' }), async (req, res) => {\n  const sig = req.headers['stripe-signature'];\n  let event;\n\n  try {\n    event = stripe.webhooks.constructEvent(req.body, sig, process.env.STRIPE_WEBHOOK_SECRET);\n  } catch (err) {\n    logger.error('Stripe webhook signature verification failed:', err);\n    return res.status(400).send(`Webhook Error: ${err.message}`);\n  }\n\n  try {\n    switch (event.type) {\n      case 'payment_intent.succeeded':\n        const paymentIntent = event.data.object;\n        logger.info(`Stripe payment succeeded: ${paymentIntent.id}`);\n        break;\n      \n      case 'payment_intent.payment_failed':\n        const failedPayment = event.data.object;\n        logger.error(`Stripe payment failed: ${failedPayment.id}`);\n        break;\n      \n      default:\n        logger.info(`Unhandled Stripe event type: ${event.type}`);\n    }\n\n    res.json({ received: true });\n  } catch (error) {\n    logger.error('Stripe webhook processing error:', error);\n    res.status(500).json({ error: 'Webhook processing failed' });\n  }\n});\n\nmodule.exports = router;","size_bytes":10033},"server/src/migrations/20250103000004_create_app_settings.js":{"content":"exports.up = function(knex) {\n  return knex.schema.createTable('app_settings', table => {\n    table.increments('id').primary();\n    table.string('key').unique().notNullable();\n    table.text('value');\n    table.string('type').defaultTo('string'); // string, number, boolean, json, color\n    table.string('category').defaultTo('general'); // general, theme, branding, database, etc.\n    table.text('description');\n    table.boolean('is_public').defaultTo(false); // Can be accessed without auth\n    table.timestamps(true, true);\n  });\n};\n\nexports.down = function(knex) {\n  return knex.schema.dropTable('app_settings');\n};","size_bytes":620},"frontend/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Dynamic CSS Variables - Will be overridden by ThemeContext */\n:root {\n  /* Default Light Theme Colors */\n  --primary-color: #3B82F6;\n  --secondary-color: #1E40AF;\n  --accent-color: #60A5FA;\n  --success-color: #10B981;\n  --warning-color: #F59E0B;\n  --error-color: #EF4444;\n  --background-color: #FFFFFF;\n  --surface-color: #F8FAFC;\n  --text-primary: #1F2937;\n  --text-secondary: #6B7280;\n  --border-color: #E5E7EB;\n  \n  /* Layout Variables */\n  --border-radius: 8px;\n  --sidebar-width: 256px;\n  --header-height: 64px;\n  \n  /* Shadow Variables */\n  --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);\n  --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1);\n  \n  /* Light Theme Gradients */\n  --gradient-primary: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);\n  --gradient-surface: linear-gradient(135deg, var(--surface-color) 0%, #FFFFFF 100%);\n  --gradient-hero: linear-gradient(135deg, var(--primary-color) 0%, var(--accent-color) 50%, var(--secondary-color) 100%);\n}\n\n/* Base Styles */\n* {\n  box-sizing: border-box;\n}\n\nhtml {\n  scroll-behavior: smooth;\n}\n\nbody {\n  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n  background: var(--background-color);\n  min-height: 100vh;\n  line-height: 1.6;\n  color: var(--text-primary);\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n/* Print Styles */\n@media print {\n  body * {\n    visibility: hidden;\n  }\n  \n  .invoice-default,\n  .invoice-minimal,\n  .invoice-modern,\n  .invoice-default *,\n  .invoice-minimal *,\n  .invoice-modern * {\n    visibility: visible;\n  }\n  \n  .invoice-default,\n  .invoice-minimal,\n  .invoice-modern {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    box-shadow: none;\n    margin: 0;\n    padding: 0;\n  }\n  \n  /* Remove backgrounds for better printing */\n  .invoice-modern {\n    background: white !important;\n  }\n  \n  .bg-gradient-to-br {\n    background: white !important;\n  }\n  \n  /* Hide non-essential elements */\n  .no-print {\n    display: none !important;\n  }\n}\n\n/* Custom Components */\n@layer components {\n  /* Airbnb-style Buttons */\n  .btn {\n    @apply inline-flex items-center justify-center px-4 py-2 text-sm font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2;\n    border-radius: var(--border-radius);\n    position: relative;\n    overflow: hidden;\n    font-weight: 500;\n  }\n  \n  .btn-primary {\n    @apply text-white;\n    background: var(--primary-color);\n    border: 1px solid var(--primary-color);\n    box-shadow: var(--shadow-sm);\n  }\n  \n  .btn-primary:hover {\n    background: var(--secondary-color);\n    border-color: var(--secondary-color);\n    box-shadow: var(--shadow-md);\n    transform: translateY(-1px);\n  }\n  \n  .btn-primary:focus {\n    outline: none;\n    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n  }\n  \n  .btn-secondary {\n    color: var(--text-primary);\n    background: var(--surface-color);\n    border: 1px solid var(--border-color);\n    box-shadow: var(--shadow-sm);\n  }\n  \n  .btn-secondary:hover {\n    background: var(--background-color);\n    border-color: var(--primary-color);\n    color: var(--primary-color);\n    box-shadow: var(--shadow-md);\n    transform: translateY(-1px);\n  }\n  \n  .btn-outline {\n    color: var(--text-primary);\n    background: transparent;\n    border: 1px solid var(--border-color);\n  }\n  \n  .btn-outline:hover {\n    background: var(--surface-color);\n    border-color: var(--primary-color);\n    color: var(--primary-color);\n    box-shadow: var(--shadow-sm);\n  }\n  \n  .btn-success {\n    @apply text-white;\n    background: var(--success-color);\n    border: 1px solid var(--success-color);\n    box-shadow: var(--shadow-sm);\n  }\n  \n  .btn-success:hover {\n    background: #059669;\n    border-color: #059669;\n    box-shadow: var(--shadow-md);\n    transform: translateY(-1px);\n  }\n  \n  .btn-danger {\n    @apply text-white;\n    background: var(--error-color);\n    border: 1px solid var(--error-color);\n    box-shadow: var(--shadow-sm);\n  }\n  \n  .btn-danger:hover {\n    background: #DC2626;\n    border-color: #DC2626;\n    box-shadow: var(--shadow-md);\n    transform: translateY(-1px);\n  }\n  \n  .btn-sm {\n    @apply px-3 py-1.5 text-xs;\n    border-radius: calc(var(--border-radius) * 0.75);\n  }\n  \n  .btn-lg {\n    @apply px-6 py-3 text-base;\n    border-radius: calc(var(--border-radius) * 1.25);\n  }\n  \n  /* Airbnb-style Cards */\n  .card {\n    background: var(--surface-color);\n    border-radius: var(--border-radius);\n    box-shadow: var(--shadow-sm);\n    border: 1px solid #E2E8F0;\n    transition: all 0.2s ease;\n    overflow: hidden;\n  }\n  \n  .card:hover {\n    box-shadow: var(--shadow-md);\n    transform: translateY(-2px);\n  }\n  \n  .card-header {\n    @apply px-6 py-4 border-b border-gray-100;\n    background: var(--surface-color);\n  }\n  \n  .card-body {\n    @apply p-6;\n  }\n  \n  .card-footer {\n    @apply px-8 py-4 bg-gray-50 border-t border-gray-100;\n  }\n  \n  /* Light Theme Forms */\n  .form-input {\n    @apply block w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 transition-all duration-200;\n    background: var(--surface-color);\n    border-color: var(--border-color);\n    color: var(--text-primary);\n    border-radius: var(--border-radius);\n  }\n  \n  .form-input:focus {\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n  }\n  \n  .form-input::placeholder {\n    color: var(--text-secondary);\n  }\n  \n  .form-label {\n    @apply block text-sm font-medium mb-2;\n    color: var(--text-primary);\n  }\n  \n  .form-error {\n    @apply text-sm mt-1 font-medium;\n    color: var(--error-color);\n  }\n  \n  .form-checkbox {\n    @apply h-4 w-4 focus:ring-2 focus:ring-blue-500 border border-gray-300 rounded transition-all duration-200;\n    color: var(--primary-color);\n  }\n  \n  .form-checkbox:checked {\n    background: var(--primary-color);\n    border-color: var(--primary-color);\n  }\n  \n  /* Airbnb-style Badges */\n  .badge {\n    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;\n    border-radius: calc(var(--border-radius) * 0.5);\n  }\n  \n  .badge-success {\n    @apply badge;\n    background: #D1FAE5;\n    color: #065F46;\n  }\n  \n  .badge-danger {\n    @apply badge;\n    background: #FEE2E2;\n    color: #991B1B;\n  }\n  \n  .badge-warning {\n    @apply badge;\n    background: #FEF3C7;\n    color: #92400E;\n  }\n  \n  .badge-info {\n    @apply badge;\n    background: #DBEAFE;\n    color: #1E40AF;\n  }\n  \n  .badge-gray {\n    @apply badge bg-gradient-to-r from-gray-100 to-gray-200 text-gray-800 border border-gray-300;\n  }\n  \n  /* Loading Spinner */\n  .loading-spinner {\n    @apply inline-block w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin;\n  }\n  \n  /* Glass Effect */\n  .glass {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n  \n  /* Gradient Text */\n  .gradient-text {\n    background: var(--gradient-primary);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n  \n  /* Animated Background */\n  .animated-bg {\n    background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);\n    background-size: 400% 400%;\n    animation: gradientShift 15s ease infinite;\n  }\n  \n  @keyframes gradientShift {\n    0% { background-position: 0% 50%; }\n    50% { background-position: 100% 50%; }\n    100% { background-position: 0% 50%; }\n  }\n}\n\n@layer utilities {\n  .text-balance {\n    text-wrap: balance;\n  }\n  \n  .scrollbar-hide {\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n  }\n  \n  .scrollbar-hide::-webkit-scrollbar {\n    display: none;\n  }\n  \n  .line-clamp-2 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 2;\n  }\n  \n  .line-clamp-3 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 3;\n  }\n}\n\n/* Custom scrollbar for webkit browsers */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: rgba(0, 0, 0, 0.05);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  border-radius: 4px;\n  transition: all 0.3s ease;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: linear-gradient(135deg, #5a67d8 0%, #6b46c1 100%);\n}\n\n/* Loading animation */\n.loading-spinner {\n  @apply animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600;\n}\n\n/* QR Code styles */\n.qr-code-container {\n  @apply flex flex-col items-center justify-center p-6 bg-white rounded-2xl shadow-xl border border-gray-100;\n  backdrop-filter: blur(10px);\n}\n\n/* Order status colors */\n.status-pending {\n  @apply bg-gradient-to-r from-yellow-100 to-orange-100 text-yellow-800 border border-yellow-200;\n}\n\n.status-confirmed {\n  @apply bg-gradient-to-r from-blue-100 to-indigo-100 text-blue-800 border border-blue-200;\n}\n\n.status-preparing {\n  @apply bg-gradient-to-r from-orange-100 to-red-100 text-orange-800 border border-orange-200;\n}\n\n.status-ready {\n  @apply bg-gradient-to-r from-green-100 to-emerald-100 text-green-800 border border-green-200;\n}\n\n.status-served {\n  @apply bg-gradient-to-r from-purple-100 to-pink-100 text-purple-800 border border-purple-200;\n}\n\n.status-completed {\n  @apply bg-gradient-to-r from-gray-100 to-slate-100 text-gray-800 border border-gray-200;\n}\n\n.status-cancelled {\n  @apply bg-gradient-to-r from-red-100 to-pink-100 text-red-800 border border-red-200;\n}\n\n/* Payment status colors */\n.payment-unpaid {\n  @apply bg-gradient-to-r from-red-100 to-pink-100 text-red-800 border border-red-200;\n}\n\n.payment-partial {\n  @apply bg-gradient-to-r from-yellow-100 to-orange-100 text-yellow-800 border border-yellow-200;\n}\n\n.payment-paid {\n  @apply bg-gradient-to-r from-green-100 to-emerald-100 text-green-800 border border-green-200;\n}\n\n/* Menu item cards */\n.menu-item-card {\n  @apply bg-white rounded-2xl shadow-lg border border-gray-100 overflow-hidden transition-all duration-300 hover:shadow-2xl hover:scale-105;\n  backdrop-filter: blur(10px);\n}\n\n.menu-item-card:hover {\n  transform: translateY(-8px) scale(1.02);\n  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\n}\n\n.menu-item-image {\n  @apply w-full h-48 object-cover transition-transform duration-300;\n}\n\n.menu-item-card:hover .menu-item-image {\n  transform: scale(1.1);\n}\n\n/* Admin sidebar */\n.admin-sidebar {\n  background: linear-gradient(180deg, #667eea 0%, #764ba2 100%);\n  backdrop-filter: blur(10px);\n}\n\n.admin-sidebar-item {\n  @apply flex items-center px-4 py-3 text-white/80 hover:text-white hover:bg-white/10 transition-all duration-200 rounded-lg mx-2;\n}\n\n.admin-sidebar-item.active {\n  @apply bg-white/20 text-white shadow-lg;\n}\n\n/* Dashboard stats cards */\n.stat-card {\n  @apply bg-white rounded-2xl shadow-xl border border-gray-100 p-6 transition-all duration-300 hover:shadow-2xl hover:scale-105;\n  backdrop-filter: blur(10px);\n}\n\n.stat-card:hover {\n  transform: translateY(-5px);\n}\n\n.stat-icon {\n  @apply w-12 h-12 rounded-xl flex items-center justify-center text-white shadow-lg;\n}\n\n.stat-value {\n  @apply text-3xl font-bold gradient-text;\n}\n\n.stat-label {\n  @apply text-sm font-medium text-gray-600 uppercase tracking-wide;\n}\n\n/* Table styles */\n.table-modern {\n  @apply w-full bg-white rounded-2xl shadow-xl border border-gray-100 overflow-hidden;\n}\n\n.table-modern th {\n  @apply px-6 py-4 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider bg-gradient-to-r from-gray-50 to-gray-100;\n}\n\n.table-modern td {\n  @apply px-6 py-4 whitespace-nowrap text-sm text-gray-900;\n}\n\n.table-modern tbody tr {\n  @apply transition-colors duration-200 hover:bg-gray-50;\n}\n\n.table-modern tbody tr:nth-child(even) {\n  @apply bg-gray-50;\n}\n\n/* Modal styles */\n.modal-overlay {\n  @apply fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50;\n}\n\n.modal-content {\n  @apply bg-white rounded-2xl shadow-2xl border border-gray-100 max-w-2xl w-full max-h-[90vh] overflow-y-auto;\n  backdrop-filter: blur(10px);\n}\n\n/* Image upload area */\n.image-upload-area {\n  @apply relative border-2 border-dashed border-gray-300 rounded-2xl p-8 text-center cursor-pointer transition-all duration-300 hover:border-blue-400 hover:bg-blue-50/50;\n}\n\n.image-upload-area.drag-active {\n  @apply border-blue-500 bg-blue-50 scale-105;\n}\n\n/* Print styles */\n@media print {\n  .no-print {\n    display: none !important;\n  }\n  \n  .print-break {\n    page-break-before: always;\n  }\n  \n  body {\n    background: white !important;\n    color: black !important;\n  }\n  \n  .card {\n    box-shadow: none !important;\n    border: 1px solid #ccc !important;\n  }\n}\n\n/* Responsive design */\n@media (max-width: 768px) {\n  .card-body {\n    @apply p-4;\n  }\n  \n  .card-header {\n    @apply px-4 py-4;\n  }\n  \n  .btn {\n    @apply px-4 py-2 text-sm;\n  }\n  \n  .stat-card {\n    @apply p-4;\n  }\n}\n\n/* Dark mode support */\n@media (prefers-color-scheme: dark) {\n  :root {\n    --primary-50: #0f172a;\n    --primary-100: #1e293b;\n    --primary-200: #334155;\n    --primary-300: #475569;\n    --primary-400: #64748b;\n    --primary-500: #94a3b8;\n    --primary-600: #cbd5e1;\n    --primary-700: #e2e8f0;\n    --primary-800: #f1f5f9;\n    --primary-900: #f8fafc;\n  }\n}\n\n/* Animation keyframes */\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes fadeInLeft {\n  from {\n    opacity: 0;\n    transform: translateX(-30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes fadeInRight {\n  from {\n    opacity: 0;\n    transform: translateX(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n@keyframes bounce {\n  0%, 20%, 53%, 80%, 100% {\n    animation-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);\n    transform: translate3d(0,0,0);\n  }\n  40%, 43% {\n    animation-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060);\n    transform: translate3d(0, -30px, 0);\n  }\n  70% {\n    animation-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060);\n    transform: translate3d(0, -15px, 0);\n  }\n  90% {\n    transform: translate3d(0,-4px,0);\n  }\n}\n\n/* Utility classes */\n.animate-fadeInUp {\n  animation: fadeInUp 0.6s ease-out;\n}\n\n.animate-fadeInLeft {\n  animation: fadeInLeft 0.6s ease-out;\n}\n\n.animate-fadeInRight {\n  animation: fadeInRight 0.6s ease-out;\n}\n\n.animate-pulse {\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n.animate-bounce {\n  animation: bounce 1s infinite;\n}","size_bytes":14896},"server/src/utils/bootstrap.ts":{"content":"import path from 'path';\nimport db from './db';\n\nexport async function migrateAndSeedIfNeeded() {\n  const migrationsDir = path.resolve(process.cwd(), 'src/migrations');\n  const seedsDir = path.resolve(process.cwd(), 'src/seeds');\n  await (db as any).migrate.latest({ directory: migrationsDir });\n  const [{ cnt }] = await db('users').count<{ cnt: number }>('id as cnt');\n  if (Number(cnt) === 0) {\n    await (db as any).seed.run({ directory: seedsDir });\n  }\n}\n","size_bytes":461},"server/src/routes/inventory.js":{"content":"const express = require('express');\nconst { db } = require('../database/init');\nconst { authenticateToken, authorize } = require('../middleware/auth');\nconst { logger } = require('../middleware/errorHandler');\n\nconst router = express.Router();\n\n// Get all stock items (admin/manager)\nrouter.get('/stock', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n\n    const query = db('stock_items')\n      .select('stock_items.*', 'branches.name as branch_name')\n      .leftJoin('branches', 'stock_items.branch_id', 'branches.id')\n      .where({ 'stock_items.branch_id': branchId });\n\n    const stockItems = await query.orderBy('stock_items.name');\n\n    // Add low stock alerts\n    for (const item of stockItems) {\n      item.isLowStock = item.quantity <= item.min_threshold;\n    }\n\n    res.json({ success: true, items: stockItems });\n  } catch (error) {\n    logger.error('Stock items fetch error:', error);\n    res.status(500).json({ error: 'Failed to fetch stock items' });\n  }\n});\n\n// Create stock item (admin/manager)\nrouter.post('/stock', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { name, sku, unit, minStock, maxStock, currentStock, costPrice, supplier, description, isActive } = req.body;\n    \n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n\n    if (!name) {\n      return res.status(400).json({ error: 'Name is required' });\n    }\n\n    const [stockItemId] = await db('stock_items').insert({\n      name,\n      sku,\n      branch_id: branchId,\n      unit: unit || 'piece',\n      min_stock: minStock || 0,\n      max_stock: maxStock || 100,\n      current_stock: currentStock || 0,\n      cost_price: costPrice || 0,\n      supplier: supplier || '',\n      description: description || '',\n      is_active: isActive !== false\n    });\n\n    const stockItem = await db('stock_items')\n      .select('stock_items.*', 'branches.name as branch_name')\n      .leftJoin('branches', 'stock_items.branch_id', 'branches.id')\n      .where({ 'stock_items.id': stockItemId })\n      .first();\n\n    // Log stock item creation\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'STOCK_ITEM_CREATE',\n      meta: JSON.stringify({ stockItemId, name, sku, branchId })\n    });\n\n    res.status(201).json({ success: true, item: stockItem });\n  } catch (error) {\n    logger.error('Stock item creation error:', error);\n    res.status(500).json({ error: 'Failed to create stock item' });\n  }\n});\n\n// Update stock item (admin/manager)\nrouter.put('/stock/:id', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { name, sku, unit, minThreshold } = req.body;\n    \n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n    \n    // Verify the stock item belongs to the user's branch\n    const existingItem = await db('stock_items').where({ id }).first();\n    if (!existingItem) {\n      return res.status(404).json({ error: 'Stock item not found' });\n    }\n    if (existingItem.branch_id !== branchId) {\n      return res.status(403).json({ error: 'Access denied: Stock item belongs to different branch' });\n    }\n\n    await db('stock_items')\n      .where({ id })\n      .update({\n        name,\n        sku,\n        unit,\n        min_threshold: minThreshold,\n        updated_at: db.raw('CURRENT_TIMESTAMP')\n      });\n\n    const stockItem = await db('stock_items')\n      .select('stock_items.*', 'branches.name as branch_name')\n      .leftJoin('branches', 'stock_items.branch_id', 'branches.id')\n      .where({ 'stock_items.id': id })\n      .first();\n\n    // Log stock item update\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'STOCK_ITEM_UPDATE',\n      meta: JSON.stringify({ stockItemId: id, name, sku })\n    });\n\n    res.json({ stockItem });\n  } catch (error) {\n    logger.error('Stock item update error:', error);\n    res.status(500).json({ error: 'Failed to update stock item' });\n  }\n});\n\n// Delete stock item (admin/manager)\nrouter.delete('/stock/:id', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n    \n    // Verify the stock item belongs to the user's branch\n    const existingItem = await db('stock_items').where({ id }).first();\n    if (!existingItem) {\n      return res.status(404).json({ error: 'Stock item not found' });\n    }\n    if (existingItem.branch_id !== branchId) {\n      return res.status(403).json({ error: 'Access denied: Stock item belongs to different branch' });\n    }\n\n    // Check if stock item is used in recipes\n    const recipeCount = await db('recipes').where({ stock_item_id: id }).count('id as count').first();\n    \n    if (recipeCount.count > 0) {\n      return res.status(400).json({ error: 'Cannot delete stock item used in recipes' });\n    }\n\n    await db('stock_items').where({ id }).del();\n\n    // Log stock item deletion\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'STOCK_ITEM_DELETE',\n      meta: JSON.stringify({ stockItemId: id })\n    });\n\n    res.json({ message: 'Stock item deleted successfully' });\n  } catch (error) {\n    logger.error('Stock item deletion error:', error);\n    res.status(500).json({ error: 'Failed to delete stock item' });\n  }\n});\n\n// Record stock movement (admin/manager)\nrouter.post('/stock/:id/move', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { change, reason } = req.body;\n    \n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n\n    if (!change || !reason) {\n      return res.status(400).json({ error: 'Change amount and reason are required' });\n    }\n\n    const stockItem = await db('stock_items').where({ id }).first();\n    if (!stockItem) {\n      return res.status(404).json({ error: 'Stock item not found' });\n    }\n    if (stockItem.branch_id !== branchId) {\n      return res.status(403).json({ error: 'Access denied: Stock item belongs to different branch' });\n    }\n\n    // Update stock quantity\n    await db('stock_items')\n      .where({ id })\n      .update({\n        quantity: db.raw('quantity + ?', [change]),\n        updated_at: db.raw('CURRENT_TIMESTAMP')\n      });\n\n    // Log stock movement\n    await db('stock_movements').insert({\n      stock_item_id: id,\n      change,\n      reason,\n      user_id: req.user.id,\n      type: 'manual'\n    });\n\n    const updatedStockItem = await db('stock_items')\n      .select('stock_items.*', 'branches.name as branch_name')\n      .leftJoin('branches', 'stock_items.branch_id', 'branches.id')\n      .where({ 'stock_items.id': id })\n      .first();\n\n    // Log stock movement\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'STOCK_MOVEMENT',\n      meta: JSON.stringify({ \n        stockItemId: id, \n        change, \n        reason,\n        newQuantity: updatedStockItem.quantity\n      })\n    });\n\n    logger.info(`Stock movement: ${stockItem.name} ${change > 0 ? '+' : ''}${change} (${reason})`);\n\n    res.json({ \n      stockItem: updatedStockItem,\n      message: 'Stock movement recorded successfully' \n    });\n\n  } catch (error) {\n    logger.error('Stock movement error:', error);\n    res.status(500).json({ error: 'Failed to record stock movement' });\n  }\n});\n\n// Get stock movements history\nrouter.get('/stock/:id/movements', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { limit = 50, offset = 0 } = req.query;\n    \n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n    \n    // Verify the stock item belongs to the user's branch\n    const stockItem = await db('stock_items').where({ id }).first();\n    if (!stockItem) {\n      return res.status(404).json({ error: 'Stock item not found' });\n    }\n    if (stockItem.branch_id !== branchId) {\n      return res.status(403).json({ error: 'Access denied: Stock item belongs to different branch' });\n    }\n\n    const movements = await db('stock_movements')\n      .select(\n        'stock_movements.*',\n        'users.username as user_name',\n        'users.full_name',\n        'orders.order_code'\n      )\n      .leftJoin('users', 'stock_movements.user_id', 'users.id')\n      .leftJoin('orders', 'stock_movements.order_id', 'orders.id')\n      .where({ stock_item_id: id })\n      .orderBy('stock_movements.created_at', 'desc')\n      .limit(parseInt(limit))\n      .offset(parseInt(offset));\n\n    res.json({ movements });\n  } catch (error) {\n    logger.error('Stock movements fetch error:', error);\n    res.status(500).json({ error: 'Failed to fetch stock movements' });\n  }\n});\n\n// Get all inventory history across all stock items (admin/manager)\nrouter.get('/history', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n\n    const { limit = 100, offset = 0, stockItemId, type } = req.query;\n\n    let query = db('stock_movements')\n      .select(\n        'stock_movements.*',\n        'stock_items.name as stock_item_name',\n        'stock_items.unit',\n        'stock_items.sku',\n        'users.username as user_name',\n        'users.full_name',\n        'orders.order_code'\n      )\n      .leftJoin('stock_items', 'stock_movements.stock_item_id', 'stock_items.id')\n      .leftJoin('users', 'stock_movements.user_id', 'users.id')\n      .leftJoin('orders', 'stock_movements.order_id', 'orders.id')\n      .where({ 'stock_items.branch_id': branchId });\n\n    if (stockItemId) {\n      query = query.where({ 'stock_movements.stock_item_id': stockItemId });\n    }\n\n    if (type) {\n      query = query.where({ 'stock_movements.type': type });\n    }\n\n    const history = await query\n      .orderBy('stock_movements.created_at', 'desc')\n      .limit(parseInt(limit))\n      .offset(parseInt(offset));\n\n    res.json({ success: true, history });\n  } catch (error) {\n    logger.error('Inventory history fetch error:', error);\n    res.status(500).json({ error: 'Failed to fetch inventory history' });\n  }\n});\n\n// Get active low stock alerts (admin/manager)\nrouter.get('/alerts', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n\n    const alerts = await db('low_stock_alerts')\n      .select(\n        'low_stock_alerts.*',\n        'stock_items.name as stock_item_name',\n        'stock_items.sku',\n        'stock_items.unit',\n        'stock_items.quantity as current_stock'\n      )\n      .leftJoin('stock_items', 'low_stock_alerts.stock_item_id', 'stock_items.id')\n      .where({ \n        'low_stock_alerts.branch_id': branchId,\n        'low_stock_alerts.is_resolved': false \n      })\n      .orderBy('low_stock_alerts.created_at', 'desc');\n\n    res.json({ success: true, alerts, count: alerts.length });\n  } catch (error) {\n    logger.error('Low stock alerts fetch error:', error);\n    res.status(500).json({ error: 'Failed to fetch low stock alerts' });\n  }\n});\n\n// Resolve low stock alert (admin/manager)\nrouter.patch('/alerts/:id/resolve', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    await db('low_stock_alerts')\n      .where({ id })\n      .update({\n        is_resolved: true,\n        resolved_at: db.raw('CURRENT_TIMESTAMP')\n      });\n\n    res.json({ success: true, message: 'Alert resolved successfully' });\n  } catch (error) {\n    logger.error('Alert resolution error:', error);\n    res.status(500).json({ error: 'Failed to resolve alert' });\n  }\n});\n\n// Get low stock alerts\nrouter.get('/stock/alerts/low', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n\n    const query = db('stock_items')\n      .select('stock_items.*', 'branches.name as branch_name')\n      .leftJoin('branches', 'stock_items.branch_id', 'branches.id')\n      .where(db.raw('stock_items.quantity <= stock_items.min_threshold'))\n      .where({ 'stock_items.branch_id': branchId });\n\n    const lowStockItems = await query.orderBy('stock_items.name');\n\n    res.json({ lowStockItems });\n  } catch (error) {\n    logger.error('Low stock alerts fetch error:', error);\n    res.status(500).json({ error: 'Failed to fetch low stock alerts' });\n  }\n});\n\n// Get recipes (admin/manager)\nrouter.get('/recipes', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { menuItemId } = req.query;\n\n    let query = db('recipes')\n      .select(\n        'recipes.*',\n        'menu_items.name as menu_item_name',\n        'stock_items.name as stock_item_name',\n        'stock_items.sku as stock_item_sku',\n        'stock_items.unit'\n      )\n      .leftJoin('menu_items', 'recipes.menu_item_id', 'menu_items.id')\n      .leftJoin('stock_items', 'recipes.stock_item_id', 'stock_items.id');\n\n    if (menuItemId) {\n      query = query.where({ 'recipes.menu_item_id': menuItemId });\n    }\n\n    const recipes = await query.orderBy('menu_items.name');\n\n    res.json({ recipes });\n  } catch (error) {\n    logger.error('Recipes fetch error:', error);\n    res.status(500).json({ error: 'Failed to fetch recipes' });\n  }\n});\n\n// Create recipe (admin/manager)\nrouter.post('/recipes', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { menuItemId, stockItemId, qtyPerServing } = req.body;\n\n    if (!menuItemId || !stockItemId || !qtyPerServing) {\n      return res.status(400).json({ error: 'Menu item ID, stock item ID, and quantity per serving are required' });\n    }\n\n    // Check if recipe already exists\n    const existingRecipe = await db('recipes')\n      .where({ menu_item_id: menuItemId, stock_item_id: stockItemId })\n      .first();\n\n    if (existingRecipe) {\n      return res.status(400).json({ error: 'Recipe already exists for this menu item and stock item' });\n    }\n\n    const [recipeId] = await db('recipes').insert({\n      menu_item_id: menuItemId,\n      stock_item_id: stockItemId,\n      qty_per_serving: qtyPerServing\n    });\n\n    const recipe = await db('recipes')\n      .select(\n        'recipes.*',\n        'menu_items.name as menu_item_name',\n        'stock_items.name as stock_item_name',\n        'stock_items.sku as stock_item_sku',\n        'stock_items.unit'\n      )\n      .leftJoin('menu_items', 'recipes.menu_item_id', 'menu_items.id')\n      .leftJoin('stock_items', 'recipes.stock_item_id', 'stock_items.id')\n      .where({ 'recipes.id': recipeId })\n      .first();\n\n    // Log recipe creation\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'RECIPE_CREATE',\n      meta: JSON.stringify({ recipeId, menuItemId, stockItemId, qtyPerServing })\n    });\n\n    res.status(201).json({ recipe });\n  } catch (error) {\n    logger.error('Recipe creation error:', error);\n    res.status(500).json({ error: 'Failed to create recipe' });\n  }\n});\n\n// Update recipe (admin/manager)\nrouter.put('/recipes/:id', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { qtyPerServing } = req.body;\n\n    await db('recipes')\n      .where({ id })\n      .update({ qty_per_serving: qtyPerServing });\n\n    const recipe = await db('recipes')\n      .select(\n        'recipes.*',\n        'menu_items.name as menu_item_name',\n        'stock_items.name as stock_item_name',\n        'stock_items.sku as stock_item_sku',\n        'stock_items.unit'\n      )\n      .leftJoin('menu_items', 'recipes.menu_item_id', 'menu_items.id')\n      .leftJoin('stock_items', 'recipes.stock_item_id', 'stock_items.id')\n      .where({ 'recipes.id': id })\n      .first();\n\n    // Log recipe update\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'RECIPE_UPDATE',\n      meta: JSON.stringify({ recipeId: id, qtyPerServing })\n    });\n\n    res.json({ recipe });\n  } catch (error) {\n    logger.error('Recipe update error:', error);\n    res.status(500).json({ error: 'Failed to update recipe' });\n  }\n});\n\n// Delete recipe (admin/manager)\nrouter.delete('/recipes/:id', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    await db('recipes').where({ id }).del();\n\n    // Log recipe deletion\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'RECIPE_DELETE',\n      meta: JSON.stringify({ recipeId: id })\n    });\n\n    res.json({ message: 'Recipe deleted successfully' });\n  } catch (error) {\n    logger.error('Recipe deletion error:', error);\n    res.status(500).json({ error: 'Failed to delete recipe' });\n  }\n});\n\nmodule.exports = router;","size_bytes":17966},"server/src/routes/modules/auth.ts":{"content":"import { Router } from 'express';\nimport db from '../../utils/db';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\n\nconst router = Router();\n\nrouter.post('/login', async (req, res) => {\n  const { username, password } = req.body;\n  const user = await db('users').where({ username }).first();\n  if (!user) return res.status(401).json({ error: 'Invalid credentials' });\n  const match = await bcrypt.compare(password, user.password_hash);\n  if (!match) return res.status(401).json({ error: 'Invalid credentials' });\n  const payload = { id: user.id, username: user.username, role: user.role };\n  const accessToken = jwt.sign(payload, process.env.JWT_SECRET || 'devsecretchange', { expiresIn: '1h' });\n  const refreshToken = jwt.sign(payload, process.env.REFRESH_SECRET || 'devrefreshsecret', { expiresIn: '7d' });\n  res.json({ accessToken, refreshToken, user: payload });\n});\n\nrouter.post('/pin-login', async (req, res) => {\n  const { username, pin } = req.body;\n  const user = await db('users').where({ username, pin }).first();\n  if (!user) return res.status(401).json({ error: 'Invalid credentials' });\n  const payload = { id: user.id, username: user.username, role: user.role };\n  const accessToken = jwt.sign(payload, process.env.JWT_SECRET || 'devsecretchange', { expiresIn: '1h' });\n  const refreshToken = jwt.sign(payload, process.env.REFRESH_SECRET || 'devrefreshsecret', { expiresIn: '7d' });\n  res.json({ accessToken, refreshToken, user: payload });\n});\n\nexport default router;\n","size_bytes":1497},"server/src/routes/settings.js":{"content":"const express = require('express');\nconst { db } = require('../database/init');\nconst { authenticateToken, authorize } = require('../middleware/auth');\nconst { logger } = require('../middleware/errorHandler');\n\nconst router = express.Router();\n\n// Get all settings (admin/manager)\nrouter.get('/', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const settings = await db('settings').select('*');\n    \n    // Convert to key-value object\n    const settingsObj = {};\n    settings.forEach(setting => {\n      settingsObj[setting.key] = setting.value;\n    });\n\n    res.json({ settings: settingsObj });\n  } catch (error) {\n    logger.error('Settings fetch error:', error);\n    res.status(500).json({ error: 'Failed to fetch settings' });\n  }\n});\n\n// Update settings (admin/manager)\nrouter.put('/', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { settings } = req.body;\n\n    if (!settings || typeof settings !== 'object') {\n      return res.status(400).json({ error: 'Settings object is required' });\n    }\n\n    const trx = await db.transaction();\n\n    try {\n      for (const [key, value] of Object.entries(settings)) {\n        // Check if setting exists\n        const existingSetting = await trx('settings').where({ key }).first();\n        \n        if (existingSetting) {\n          await trx('settings')\n            .where({ key })\n            .update({ \n              value: String(value),\n              updated_at: db.raw('CURRENT_TIMESTAMP')\n            });\n        } else {\n          await trx('settings').insert({\n            key,\n            value: String(value)\n          });\n        }\n      }\n\n      await trx.commit();\n\n      // Log settings update\n      await db('audit_logs').insert({\n        user_id: req.user.id,\n        action: 'SETTINGS_UPDATE',\n        meta: JSON.stringify({ \n          settings: Object.keys(settings),\n          userId: req.user.id\n        })\n      });\n\n      logger.info(`Settings updated by ${req.user.username}: ${Object.keys(settings).join(', ')}`);\n\n      res.json({ success: true, message: 'Settings updated successfully' });\n    } catch (error) {\n      await trx.rollback();\n      throw error;\n    }\n  } catch (error) {\n    logger.error('Settings update error:', error);\n    res.status(500).json({ error: 'Failed to update settings' });\n  }\n});\n\n// Get specific setting (admin/manager)\nrouter.get('/:key', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { key } = req.params;\n\n    const setting = await db('settings').where({ key }).first();\n    \n    if (!setting) {\n      return res.status(404).json({ error: 'Setting not found' });\n    }\n\n    res.json({ setting });\n  } catch (error) {\n    logger.error('Setting fetch error:', error);\n    res.status(500).json({ error: 'Failed to fetch setting' });\n  }\n});\n\n// Update specific setting (admin/manager)\nrouter.put('/:key', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { key } = req.params;\n    const { value } = req.body;\n\n    if (value === undefined || value === null) {\n      return res.status(400).json({ error: 'Value is required' });\n    }\n\n    // Check if setting exists\n    const existingSetting = await db('settings').where({ key }).first();\n    \n    if (existingSetting) {\n      await db('settings')\n        .where({ key })\n        .update({ \n          value: String(value),\n          updated_at: db.raw('CURRENT_TIMESTAMP')\n        });\n    } else {\n      await db('settings').insert({\n        key,\n        value: String(value)\n      });\n    }\n\n    // Log setting update\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'SETTING_UPDATE',\n      meta: JSON.stringify({ key, value, userId: req.user.id })\n    });\n\n    logger.info(`Setting ${key} updated by ${req.user.username}: ${value}`);\n\n    res.json({ message: 'Setting updated successfully' });\n  } catch (error) {\n    logger.error('Setting update error:', error);\n    res.status(500).json({ error: 'Failed to update setting' });\n  }\n});\n\n// Get operating mode\nrouter.get('/mode/operating', async (req, res) => {\n  try {\n    const setting = await db('settings').where({ key: 'operating_mode' }).first();\n    const mode = setting ? setting.value : 'LOCAL';\n\n    res.json({ mode });\n  } catch (error) {\n    logger.error('Operating mode fetch error:', error);\n    res.status(500).json({ error: 'Failed to fetch operating mode' });\n  }\n});\n\n// Update operating mode (admin only)\nrouter.put('/mode/operating', authenticateToken, authorize('admin'), async (req, res) => {\n  try {\n    const { mode } = req.body;\n\n    if (!['LOCAL', 'CLOUD'].includes(mode)) {\n      return res.status(400).json({ error: 'Invalid operating mode. Must be LOCAL or CLOUD' });\n    }\n\n    const currentMode = await db('settings').where({ key: 'operating_mode' }).first();\n    \n    if (currentMode && currentMode.value === mode) {\n      return res.json({ success: true, message: 'Operating mode is already set to ' + mode });\n    }\n\n    await db('settings')\n      .where({ key: 'operating_mode' })\n      .update({ \n        value: mode,\n        updated_at: db.raw('CURRENT_TIMESTAMP')\n      });\n\n    // Log mode change\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'OPERATING_MODE_CHANGE',\n      meta: JSON.stringify({ \n        oldMode: currentMode ? currentMode.value : 'LOCAL',\n        newMode: mode,\n        userId: req.user.id\n      })\n    });\n\n    logger.info(`Operating mode changed from ${currentMode ? currentMode.value : 'LOCAL'} to ${mode} by ${req.user.username}`);\n\n    res.json({ \n      success: true,\n      message: `Operating mode changed to ${mode}`,\n      mode \n    });\n  } catch (error) {\n    logger.error('Operating mode update error:', error);\n    res.status(500).json({ error: 'Failed to update operating mode' });\n  }\n});\n\n// Change operating mode (admin only)\nrouter.post('/change-operating-mode', authenticateToken, authorize('admin'), async (req, res) => {\n  try {\n    const { mode } = req.body;\n\n    if (!['LOCAL', 'CLOUD'].includes(mode)) {\n      return res.status(400).json({ error: 'Invalid operating mode. Must be LOCAL or CLOUD' });\n    }\n\n    const currentMode = await db('settings').where({ key: 'operating_mode' }).first();\n    \n    if (currentMode && currentMode.value === mode) {\n      return res.json({ success: true, message: 'Operating mode is already set to ' + mode });\n    }\n\n    await db('settings')\n      .where({ key: 'operating_mode' })\n      .update({ \n        value: mode,\n        updated_at: db.raw('CURRENT_TIMESTAMP')\n      });\n\n    // Log mode change\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'OPERATING_MODE_CHANGE',\n      meta: JSON.stringify({ \n        oldMode: currentMode ? currentMode.value : 'LOCAL',\n        newMode: mode,\n        userId: req.user.id\n      })\n    });\n\n    logger.info(`Operating mode changed from ${currentMode ? currentMode.value : 'LOCAL'} to ${mode} by ${req.user.username}`);\n\n    res.json({ \n      success: true,\n      message: `Operating mode changed to ${mode}`,\n      mode \n    });\n  } catch (error) {\n    logger.error('Operating mode update error:', error);\n    res.status(500).json({ error: 'Failed to update operating mode' });\n  }\n});\n\n// Get database configuration\nrouter.get('/database/config', authenticateToken, authorize('admin'), async (req, res) => {\n  try {\n    const config = {\n      type: process.env.DB_TYPE || 'sqlite3',\n      host: process.env.DB_HOST,\n      port: process.env.DB_PORT,\n      name: process.env.DB_NAME,\n      user: process.env.DB_USER,\n      // Don't expose password in response\n      hasPassword: !!process.env.DB_PASSWORD\n    };\n\n    res.json({ config });\n  } catch (error) {\n    logger.error('Database config fetch error:', error);\n    res.status(500).json({ error: 'Failed to fetch database configuration' });\n  }\n});\n\n// Test database connection\nrouter.post('/database/test', authenticateToken, authorize('admin'), async (req, res) => {\n  try {\n    const { type, host, port, name, user, password, filename } = req.body;\n    \n    const knex = require('knex');\n    let testDb;\n\n    try {\n      if (type === 'sqlite3') {\n        // Test SQLite connection\n        testDb = knex({\n          client: 'sqlite3',\n          connection: {\n            filename: filename || './data/posq.db'\n          },\n          useNullAsDefault: true\n        });\n        \n        // Test simple query\n        await testDb.raw('SELECT 1');\n        \n        res.json({ \n          success: true,\n          message: 'SQLite database connection successful' \n        });\n      } else if (type === 'mysql2') {\n        // Test MySQL connection\n        testDb = knex({\n          client: 'mysql2',\n          connection: {\n            host: host || 'localhost',\n            port: parseInt(port) || 3306,\n            user: user || 'root',\n            password: password || '',\n            database: name || 'posq'\n          }\n        });\n        \n        // Test connection\n        await testDb.raw('SELECT 1');\n        \n        res.json({ \n          success: true,\n          message: 'MySQL database connection successful' \n        });\n      } else if (type === 'pg') {\n        // Test PostgreSQL connection\n        testDb = knex({\n          client: 'pg',\n          connection: {\n            host: host || 'localhost',\n            port: parseInt(port) || 5432,\n            user: user || 'postgres',\n            password: password || '',\n            database: name || 'posq'\n          }\n        });\n        \n        // Test connection\n        await testDb.raw('SELECT 1');\n        \n        res.json({ \n          success: true,\n          message: 'PostgreSQL database connection successful' \n        });\n      } else {\n        res.status(400).json({ \n          success: false,\n          error: 'Unsupported database type' \n        });\n      }\n    } catch (connError) {\n      logger.error('Database connection test failed:', connError);\n      res.status(400).json({ \n        success: false,\n        error: connError.message || 'Database connection failed' \n      });\n    } finally {\n      if (testDb) {\n        await testDb.destroy();\n      }\n    }\n  } catch (error) {\n    logger.error('Database connection test error:', error);\n    res.status(500).json({ \n      success: false,\n      error: 'Database connection test failed' \n    });\n  }\n});\n\n// Initialize database (create DB, migrate, seed)\nrouter.post('/database/initialize', authenticateToken, authorize('admin'), async (req, res) => {\n  try {\n    const { type, host, port, name, user, password, filename } = req.body;\n    \n    const knex = require('knex');\n    const path = require('path');\n    const fs = require('fs');\n    const bcrypt = require('bcrypt');\n    \n    let initDb;\n    \n    try {\n      if (type === 'sqlite3') {\n        // Ensure data directory exists\n        const dataDir = path.dirname(filename || './data/posq.db');\n        if (!fs.existsSync(dataDir)) {\n          fs.mkdirSync(dataDir, { recursive: true });\n        }\n        \n        // Create SQLite database\n        initDb = knex({\n          client: 'sqlite3',\n          connection: {\n            filename: filename || './data/posq.db'\n          },\n          useNullAsDefault: true,\n          migrations: {\n            directory: path.join(__dirname, '../migrations')\n          },\n          seeds: {\n            directory: path.join(__dirname, '../seeds')\n          }\n        });\n        \n        // Run migrations\n        await initDb.migrate.latest();\n        logger.info('SQLite migrations completed');\n        \n        // Run minimal seed (admin and owner only)\n        const hashedPassword = await bcrypt.hash('admin123', 12);\n        \n        // Check if admin exists\n        const adminExists = await initDb('users').where({ username: 'admin' }).first();\n        if (!adminExists) {\n          await initDb('users').insert([\n            {\n              username: 'admin',\n              password_hash: hashedPassword,\n              full_name: 'System Administrator',\n              role: 'admin',\n              pin: '1234',\n              is_active: true\n            }\n          ]);\n          \n          logger.info('Admin user created');\n        }\n        \n        // Check if default branch exists\n        const branchExists = await initDb('branches').where({ code: 'MAIN' }).first();\n        if (!branchExists) {\n          await initDb('branches').insert({\n            name: 'Main Branch',\n            code: 'MAIN',\n            address: 'Default Address'\n          });\n          logger.info('Default branch created');\n        }\n        \n        res.json({\n          success: true,\n          message: 'SQLite database initialized successfully'\n        });\n        \n      } else if (type === 'mysql2') {\n        // First connect without database to create it\n        const mysql = require('mysql2/promise');\n        const connection = await mysql.createConnection({\n          host: host || 'localhost',\n          port: parseInt(port) || 3306,\n          user: user || 'root',\n          password: password || ''\n        });\n        \n        // Create database if not exists\n        await connection.query(`CREATE DATABASE IF NOT EXISTS \\`${name || 'posq'}\\``);\n        await connection.end();\n        \n        logger.info(`MySQL database '${name || 'posq'}' created or already exists`);\n        \n        // Now connect with database\n        initDb = knex({\n          client: 'mysql2',\n          connection: {\n            host: host || 'localhost',\n            port: parseInt(port) || 3306,\n            user: user || 'root',\n            password: password || '',\n            database: name || 'posq'\n          },\n          migrations: {\n            directory: path.join(__dirname, '../migrations')\n          },\n          seeds: {\n            directory: path.join(__dirname, '../seeds')\n          }\n        });\n        \n        // Run migrations\n        await initDb.migrate.latest();\n        logger.info('MySQL migrations completed');\n        \n        // Run minimal seed (admin and owner only)\n        const hashedPassword = await bcrypt.hash('admin123', 12);\n        \n        // Check if admin exists\n        const adminExists = await initDb('users').where({ username: 'admin' }).first();\n        if (!adminExists) {\n          await initDb('users').insert([\n            {\n              username: 'admin',\n              password_hash: hashedPassword,\n              full_name: 'System Administrator',\n              role: 'admin',\n              pin: '1234',\n              is_active: true\n            }\n          ]);\n          logger.info('Admin user created');\n        }\n        \n        // Check if default branch exists\n        const branchExists = await initDb('branches').where({ code: 'MAIN' }).first();\n        if (!branchExists) {\n          await initDb('branches').insert({\n            name: 'Main Branch',\n            code: 'MAIN',\n            address: 'Default Address'\n          });\n          logger.info('Default branch created');\n        }\n        \n        res.json({\n          success: true,\n          message: `MySQL database '${name || 'posq'}' initialized successfully`\n        });\n      }\n    } catch (initError) {\n      logger.error('Database initialization failed:', initError);\n      res.status(500).json({\n        success: false,\n        error: initError.message || 'Database initialization failed'\n      });\n    } finally {\n      if (initDb) {\n        await initDb.destroy();\n      }\n    }\n  } catch (error) {\n    logger.error('Database initialization error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Database initialization failed'\n    });\n  }\n});\n\n// Export database\nrouter.get('/database/export', authenticateToken, authorize('admin'), async (req, res) => {\n  try {\n    const dbType = process.env.DB_TYPE || 'sqlite3';\n    const path = require('path');\n    const fs = require('fs');\n    const { exec } = require('child_process');\n    const util = require('util');\n    const execPromise = util.promisify(exec);\n    \n    if (dbType === 'sqlite3') {\n      // For SQLite, just send the database file\n      const dbPath = process.env.DB_PATH || './data/posq.db';\n      const absolutePath = path.resolve(dbPath);\n      \n      if (!fs.existsSync(absolutePath)) {\n        return res.status(404).json({ error: 'Database file not found' });\n      }\n      \n      // Set headers for file download\n      res.setHeader('Content-Type', 'application/x-sqlite3');\n      res.setHeader('Content-Disposition', `attachment; filename=\"posq-backup-${Date.now()}.db\"`);\n      \n      // Stream the file\n      const fileStream = fs.createReadStream(absolutePath);\n      fileStream.pipe(res);\n      \n    } else if (dbType === 'mysql2') {\n      // For MySQL, create SQL dump\n      const host = process.env.DB_HOST || 'localhost';\n      const port = process.env.DB_PORT || 3306;\n      const database = process.env.DB_NAME || 'posq';\n      const user = process.env.DB_USER || 'root';\n      const password = process.env.DB_PASSWORD || '';\n      \n      const timestamp = Date.now();\n      const dumpFile = path.join('/tmp', `posq-backup-${timestamp}.sql`);\n      \n      // Create mysqldump command\n      const dumpCmd = `mysqldump -h ${host} -P ${port} -u ${user} ${password ? `-p${password}` : ''} ${database} > ${dumpFile}`;\n      \n      try {\n        await execPromise(dumpCmd);\n        \n        // Set headers for file download\n        res.setHeader('Content-Type', 'application/sql');\n        res.setHeader('Content-Disposition', `attachment; filename=\"posq-backup-${timestamp}.sql\"`);\n        \n        // Stream the file\n        const fileStream = fs.createReadStream(dumpFile);\n        fileStream.pipe(res);\n        \n        // Clean up temp file after sending\n        fileStream.on('end', () => {\n          fs.unlinkSync(dumpFile);\n        });\n      } catch (dumpError) {\n        logger.error('MySQL dump failed:', dumpError);\n        res.status(500).json({ error: 'Failed to export MySQL database' });\n      }\n    } else {\n      res.status(400).json({ error: 'Database export not supported for this database type' });\n    }\n  } catch (error) {\n    logger.error('Database export error:', error);\n    res.status(500).json({ error: 'Failed to export database' });\n  }\n});\n\n// Get payment gateway configuration\nrouter.get('/payment/gateway', authenticateToken, authorize('admin'), async (req, res) => {\n  try {\n    const config = {\n      stripeEnabled: !!process.env.STRIPE_SECRET_KEY,\n      stripePublishableKey: process.env.STRIPE_PUBLISHABLE_KEY,\n      // Don't expose secret keys\n      hasStripeSecret: !!process.env.STRIPE_SECRET_KEY,\n      hasWebhookSecret: !!process.env.STRIPE_WEBHOOK_SECRET\n    };\n\n    res.json({ config });\n  } catch (error) {\n    logger.error('Payment gateway config fetch error:', error);\n    res.status(500).json({ error: 'Failed to fetch payment gateway configuration' });\n  }\n});\n\n// Get printer configuration\nrouter.get('/printer/config', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const settings = await db('settings')\n      .whereIn('key', ['printer_enabled', 'default_printer_ip'])\n      .select('key', 'value');\n\n    const config = {\n      enabled: false,\n      defaultIp: null\n    };\n\n    settings.forEach(setting => {\n      if (setting.key === 'printer_enabled') {\n        config.enabled = setting.value === 'true';\n      } else if (setting.key === 'default_printer_ip') {\n        config.defaultIp = setting.value;\n      }\n    });\n\n    res.json({ config });\n  } catch (error) {\n    logger.error('Printer config fetch error:', error);\n    res.status(500).json({ error: 'Failed to fetch printer configuration' });\n  }\n});\n\n// Update printer configuration\nrouter.put('/printer/config', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { enabled, defaultIp } = req.body;\n\n    const trx = await db.transaction();\n\n    try {\n      // Update printer enabled setting\n      await trx('settings')\n        .where({ key: 'printer_enabled' })\n        .update({ \n          value: String(enabled),\n          updated_at: db.raw('CURRENT_TIMESTAMP')\n        });\n\n      // Update default printer IP\n      if (defaultIp) {\n        await trx('settings')\n          .where({ key: 'default_printer_ip' })\n          .update({ \n            value: defaultIp,\n            updated_at: db.raw('CURRENT_TIMESTAMP')\n          });\n      }\n\n      await trx.commit();\n\n      // Log printer config update\n      await db('audit_logs').insert({\n        user_id: req.user.id,\n        action: 'PRINTER_CONFIG_UPDATE',\n        meta: JSON.stringify({ enabled, defaultIp, userId: req.user.id })\n      });\n\n      logger.info(`Printer configuration updated by ${req.user.username}: enabled=${enabled}, ip=${defaultIp}`);\n\n      res.json({ message: 'Printer configuration updated successfully' });\n    } catch (error) {\n      await trx.rollback();\n      throw error;\n    }\n  } catch (error) {\n    logger.error('Printer config update error:', error);\n    res.status(500).json({ error: 'Failed to update printer configuration' });\n  }\n});\n\n// Reset settings to defaults (admin only)\nrouter.post('/reset', authenticateToken, authorize('admin'), async (req, res) => {\n  try {\n    const defaultSettings = {\n      restaurant_name: 'POSQ Restaurant',\n      currency: 'MAD',\n      tax_rate: '10',\n      service_charge_rate: '5',\n      operating_mode: 'LOCAL',\n      printer_enabled: 'true',\n      sync_enabled: 'false',\n      backup_enabled: 'true',\n      backup_frequency: 'daily'\n    };\n\n    const trx = await db.transaction();\n\n    try {\n      for (const [key, value] of Object.entries(defaultSettings)) {\n        await trx('settings')\n          .where({ key })\n          .update({ \n            value,\n            updated_at: db.raw('CURRENT_TIMESTAMP')\n          });\n      }\n\n      await trx.commit();\n\n      // Log settings reset\n      await db('audit_logs').insert({\n        user_id: req.user.id,\n        action: 'SETTINGS_RESET',\n        meta: JSON.stringify({ \n          settings: Object.keys(defaultSettings),\n          userId: req.user.id\n        })\n      });\n\n      logger.info(`Settings reset to defaults by ${req.user.username}`);\n\n      res.json({ message: 'Settings reset to defaults successfully' });\n    } catch (error) {\n      await trx.rollback();\n      throw error;\n    }\n  } catch (error) {\n    logger.error('Settings reset error:', error);\n    res.status(500).json({ error: 'Failed to reset settings' });\n  }\n});\n\nmodule.exports = router;","size_bytes":22549},"server/src/routes/tables.js":{"content":"const express = require('express');\nconst QRCode = require('qrcode');\nconst { db } = require('../database/init');\nconst { authenticateToken, authorize } = require('../middleware/auth');\nconst { validateTable } = require('../middleware/validation');\nconst { logger } = require('../middleware/errorHandler');\n\nconst router = express.Router();\n\n// Get all tables (admin/cashier)\nrouter.get('/', authenticateToken, authorize('admin', 'manager', 'cashier'), async (req, res) => {\n  try {\n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n\n    const query = db('tables')\n      .select('tables.*', 'branches.name as branch_name')\n      .leftJoin('branches', 'tables.branch_id', 'branches.id')\n      .where({ 'tables.branch_id': branchId });\n\n    const tables = await query.orderBy('tables.table_number');\n\n    // Get current order status for each table\n    for (const table of tables) {\n      const activeOrder = await db('orders')\n        .where({ \n          table_id: table.id\n        })\n        .whereIn('status', ['PENDING', 'CONFIRMED', 'PREPARING', 'READY', 'SERVED'])\n        .orderBy('created_at', 'desc')\n        .first();\n\n      table.activeOrder = activeOrder;\n    }\n\n    res.json({ success: true, tables });\n  } catch (error) {\n    logger.error('Tables fetch error:', error);\n    res.status(500).json({ error: 'Failed to fetch tables' });\n  }\n});\n\n// Create table (admin)\nrouter.post('/', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { number, capacity, location, isActive } = req.body;\n    \n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n\n    if (!number || !capacity) {\n      return res.status(400).json({ error: 'Table number and capacity are required' });\n    }\n\n    // Check if table number already exists in this branch\n    const existingTable = await db('tables')\n      .where({ \n        table_number: number,\n        branch_id: branchId \n      })\n      .first();\n\n    if (existingTable) {\n      return res.status(400).json({ error: 'Table number already exists in this branch' });\n    }\n\n    const [tableId] = await db('tables').insert({\n      table_number: number,\n      capacity: parseInt(capacity),\n      location: location || '',\n      branch_id: branchId,\n      is_active: isActive !== false,\n      qr_code_url: `${process.env.FRONTEND_URL || 'http://localhost:5173'}/menu?table=${number}&branch=${branchId}`\n    });\n\n    const table = await db('tables').where({ id: tableId }).first();\n\n    // Log table creation\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'TABLE_CREATE',\n      meta: JSON.stringify({ tableId, number, capacity, branchId })\n    });\n\n    res.status(201).json({ success: true, table });\n  } catch (error) {\n    logger.error('Table creation error:', error);\n    res.status(500).json({ error: 'Failed to create table' });\n  }\n});\n\n// Update table (admin)\nrouter.put('/:id', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { number, capacity, location, isActive } = req.body;\n    \n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n\n    // Check if table exists and belongs to user's branch\n    const existingTable = await db('tables').where({ id }).first();\n    if (!existingTable) {\n      return res.status(404).json({ error: 'Table not found' });\n    }\n    if (existingTable.branch_id !== branchId) {\n      return res.status(403).json({ error: 'Access denied: Table belongs to different branch' });\n    }\n\n    // If table number is being changed, check for duplicates\n    if (number && number !== existingTable.table_number) {\n      const duplicateTable = await db('tables')\n        .where({ \n          table_number: number,\n          branch_id: existingTable.branch_id,\n          id: { '!=': id }\n        })\n        .first();\n\n      if (duplicateTable) {\n        return res.status(400).json({ error: 'Table number already exists in this branch' });\n      }\n    }\n\n    await db('tables')\n      .where({ id })\n      .update({\n        table_number: number || existingTable.table_number,\n        capacity: capacity ? parseInt(capacity) : existingTable.capacity,\n        location: location !== undefined ? location : existingTable.location,\n        is_active: isActive !== undefined ? isActive : existingTable.is_active,\n        qr_code_url: number ? `${process.env.FRONTEND_URL || 'http://localhost:5173'}/menu?table=${number}&branch=${existingTable.branch_id}` : existingTable.qr_code_url,\n        updated_at: db.raw('CURRENT_TIMESTAMP')\n      });\n\n    const table = await db('tables').where({ id }).first();\n\n    // Log table update\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'TABLE_UPDATE',\n      meta: JSON.stringify({ tableId: id, number, capacity })\n    });\n\n    res.json({ success: true, table });\n  } catch (error) {\n    logger.error('Table update error:', error);\n    res.status(500).json({ error: 'Failed to update table' });\n  }\n});\n\n// Delete table (admin)\nrouter.delete('/:id', authenticateToken, authorize('admin'), async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n\n    // Check if table exists and belongs to user's branch\n    const table = await db('tables').where({ id }).first();\n    if (!table) {\n      return res.status(404).json({ error: 'Table not found' });\n    }\n    if (table.branch_id !== branchId) {\n      return res.status(403).json({ error: 'Access denied: Table belongs to different branch' });\n    }\n\n    // Check if table has active orders\n    const activeOrder = await db('orders')\n      .where({ \n        table_id: id,\n        status: ['PENDING', 'CONFIRMED', 'PREPARING', 'READY', 'SERVED']\n      })\n      .first();\n\n    if (activeOrder) {\n      return res.status(400).json({ error: 'Cannot delete table with active orders' });\n    }\n\n    await db('tables').where({ id }).del();\n\n    // Log table deletion\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'TABLE_DELETE',\n      meta: JSON.stringify({ tableId: id, tableNumber: table.table_number })\n    });\n\n    res.json({ success: true, message: 'Table deleted successfully' });\n  } catch (error) {\n    logger.error('Table deletion error:', error);\n    res.status(500).json({ error: 'Failed to delete table' });\n  }\n});\n\n// Get single table\nrouter.get('/:id', authenticateToken, async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    // Use authenticated user's branch_id for security  \n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n\n    const table = await db('tables')\n      .select('tables.*', 'branches.name as branch_name')\n      .leftJoin('branches', 'tables.branch_id', 'branches.id')\n      .where({ 'tables.id': id })\n      .first();\n\n    if (!table) {\n      return res.status(404).json({ error: 'Table not found' });\n    }\n    if (table.branch_id !== branchId) {\n      return res.status(403).json({ error: 'Access denied: Table belongs to different branch' });\n    }\n\n    // Get current order\n    const activeOrder = await db('orders')\n      .where({ \n        table_id: id,\n        status: ['PENDING', 'CONFIRMED', 'PREPARING', 'READY', 'SERVED']\n      })\n      .orderBy('created_at', 'desc')\n      .first();\n\n    table.activeOrder = activeOrder;\n\n    res.json({ table });\n  } catch (error) {\n    logger.error('Table fetch error:', error);\n    res.status(500).json({ error: 'Failed to fetch table' });\n  }\n});\n\n// Generate QR code for table\nrouter.get('/:id/qr', authenticateToken, authorize('admin', 'manager', 'cashier'), async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { format = 'png' } = req.query;\n    \n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n\n    const table = await db('tables')\n      .select('tables.*', 'branches.name as branch_name', 'branches.code as branch_code')\n      .leftJoin('branches', 'tables.branch_id', 'branches.id')\n      .where({ 'tables.id': id })\n      .first();\n\n    if (!table) {\n      return res.status(404).json({ error: 'Table not found' });\n    }\n    \n    // Verify the table belongs to the user's branch\n    if (table.branch_id !== branchId) {\n      return res.status(403).json({ error: 'Access denied: Table belongs to different branch' });\n    }\n\n    // Build QR code URL if not exists\n    const qrCodeUrl = table.qr_code_url || `${process.env.FRONTEND_URL || 'http://localhost:5173'}/menu?table=${table.table_number}&branch=${table.branch_id}`;\n    \n    // Update table with QR code URL if it was null\n    if (!table.qr_code_url) {\n      await db('tables')\n        .where({ id: table.id })\n        .update({ qr_code_url: qrCodeUrl });\n    }\n\n    if (format === 'dataurl') {\n      const qrCodeDataURL = await QRCode.toDataURL(qrCodeUrl);\n      res.json({ success: true, qrCodeUrl: qrCodeDataURL, table });\n    } else {\n      const qrCodeBuffer = await QRCode.toBuffer(qrCodeUrl);\n      res.setHeader('Content-Type', 'image/png');\n      res.send(qrCodeBuffer);\n    }\n  } catch (error) {\n    logger.error('QR code generation error:', error);\n    res.status(500).json({ error: 'Failed to generate QR code' });\n  }\n});\n\n// Generate QR codes for all tables in a branch\nrouter.get('/branch/:branchId/qr-sheet', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    // Use authenticated user's branch_id for security (ignore path parameter)\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n\n    const tables = await db('tables')\n      .select('tables.*', 'branches.name as branch_name', 'branches.code as branch_code')\n      .leftJoin('branches', 'tables.branch_id', 'branches.id')\n      .where({ 'tables.branch_id': branchId })\n      .orderBy('tables.table_number');\n\n    const qrCodes = [];\n    for (const table of tables) {\n      // Build QR code URL if not exists\n      const qrCodeUrl = table.qr_code_url || `${process.env.FRONTEND_URL || 'http://localhost:5173'}/menu?table=${table.table_number}&branch=${table.branch_id}`;\n      \n      // Update table with QR code URL if it was null\n      if (!table.qr_code_url) {\n        await db('tables')\n          .where({ id: table.id })\n          .update({ qr_code_url: qrCodeUrl });\n      }\n      \n      const qrCodeDataURL = await QRCode.toDataURL(qrCodeUrl);\n      qrCodes.push({\n        table,\n        qrCode: qrCodeDataURL\n      });\n    }\n\n    res.json({ qrCodes });\n  } catch (error) {\n    logger.error('QR sheet generation error:', error);\n    res.status(500).json({ error: 'Failed to generate QR sheet' });\n  }\n});\n\n// Get table orders history\nrouter.get('/:id/orders', authenticateToken, authorize('admin', 'manager', 'cashier'), async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { limit = 20, offset = 0 } = req.query;\n    \n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n    \n    // Verify the table belongs to the user's branch\n    const table = await db('tables').where({ id }).first();\n    if (!table) {\n      return res.status(404).json({ error: 'Table not found' });\n    }\n    if (table.branch_id !== branchId) {\n      return res.status(403).json({ error: 'Access denied: Table belongs to different branch' });\n    }\n\n    const orders = await db('orders')\n      .select('orders.*')\n      .where({ 'orders.table_id': id })\n      .orderBy('orders.created_at', 'desc')\n      .limit(parseInt(limit))\n      .offset(parseInt(offset));\n\n    res.json({ orders });\n  } catch (error) {\n    logger.error('Table orders fetch error:', error);\n    res.status(500).json({ error: 'Failed to fetch table orders' });\n  }\n});\n\nmodule.exports = router;","size_bytes":12711},"AIRBNB_DESIGN_IMPLEMENTATION.md":{"content":"# 🎨 Airbnb-Style Design Implementation Complete\n\n## ✅ **ALL FEATURES IMPLEMENTED**\n\n### 🎨 **Modern Airbnb-Style Design System**\n\n#### **Design Philosophy**\n- **Clean & Modern**: Inspired by Airbnb's clean, friendly interface\n- **Blue Color Scheme**: Professional blue palette (#3B82F6, #1E40AF, #60A5FA)\n- **Friendly & Approachable**: Warm, welcoming design language\n- **Consistent Spacing**: 12px border radius, consistent padding/margins\n- **Subtle Shadows**: Light, elegant shadows for depth\n- **Smooth Animations**: Gentle hover effects and transitions\n\n#### **Color System**\n- **Primary**: #3B82F6 (Blue-500) - Main brand color\n- **Secondary**: #1E40AF (Blue-800) - Darker blue for depth\n- **Accent**: #60A5FA (Blue-400) - Light blue for highlights\n- **Success**: #10B981 (Emerald-500) - Green for success states\n- **Warning**: #F59E0B (Amber-500) - Orange for warnings\n- **Error**: #EF4444 (Red-500) - Red for errors\n- **Background**: #F8FAFC (Slate-50) - Light background\n- **Surface**: #FFFFFF (White) - Card/component backgrounds\n\n### 🔧 **Dynamic Settings System**\n\n#### **Database Integration**\n- **App Settings Table**: Complete settings storage in database\n- **Categories**: General, Theme, Branding, Layout, Database, Payment, Printer\n- **Types**: String, Number, Boolean, JSON, Color\n- **Public/Private**: Settings can be public (no auth) or private (admin only)\n\n#### **Real-Time Updates**\n- **ThemeContext**: React context for managing settings\n- **CSS Variables**: Dynamic CSS custom properties\n- **Live Updates**: Changes apply immediately across the app\n- **Persistence**: All settings saved to database\n\n#### **Settings Categories**\n\n##### **General Settings**\n- Application Name\n- Currency (MAD, USD, EUR, GBP)\n- Tax Rate (%)\n- Service Charge (%)\n- Welcome Message\n\n##### **Branding Settings**\n- Logo URL\n- Favicon URL\n- Logo Preview\n- Dynamic logo display\n\n##### **Theme Settings**\n- Primary Color (with color picker)\n- Secondary Color\n- Accent Color\n- Success Color\n- Warning Color\n- Error Color\n- Background Color\n- Surface Color\n\n##### **Layout Settings**\n- Border Radius (0-24px)\n- Sidebar Width (200-400px)\n- Shadow Intensity (Light, Medium, Heavy)\n\n##### **Database Settings**\n- Operating Mode (LOCAL/CLOUD)\n- Database Type (SQLite/MySQL/PostgreSQL)\n- Connection Details\n- Test Connection\n\n##### **Payment Settings**\n- Stripe Public Key\n- Stripe Secret Key\n\n##### **Printer Settings**\n- Enable/Disable Printer\n- IP Address\n- Port\n\n### 🎯 **Key Features Implemented**\n\n#### **1. Dynamic Color System**\n```css\n:root {\n  --primary-color: #3B82F6;\n  --secondary-color: #1E40AF;\n  --accent-color: #60A5FA;\n  /* ... all colors dynamically set */\n}\n```\n\n#### **2. Airbnb-Style Components**\n- **Buttons**: Clean, rounded with subtle shadows\n- **Cards**: White background with light borders\n- **Forms**: Simple inputs with focus states\n- **Badges**: Rounded with appropriate colors\n- **Navigation**: Clean, minimal design\n\n#### **3. Dynamic Branding**\n- **Logo Support**: URL-based logo with fallback\n- **App Name**: Dynamic throughout the app\n- **Favicon**: Customizable favicon\n- **Welcome Message**: Customizable customer greeting\n\n#### **4. Real-Time Theme Updates**\n- **ThemeContext**: Manages all theme settings\n- **CSS Variables**: Applied dynamically\n- **Live Preview**: Changes visible immediately\n- **Persistence**: Saved to database\n\n### 🏗️ **Technical Implementation**\n\n#### **Backend Architecture**\n```\nserver/src/routes/app-settings.js\n├── GET /api/app-settings - Get all settings\n├── GET /api/app-settings/category/:category - Get by category\n├── PUT /api/app-settings/:key - Update single setting\n├── PUT /api/app-settings - Update multiple settings\n└── POST /api/app-settings/reset - Reset to defaults\n```\n\n#### **Frontend Architecture**\n```\nfrontend/src/contexts/ThemeContext.jsx\n├── loadSettings() - Load from API\n├── updateSettings() - Save to API\n├── applyTheme() - Apply CSS variables\n├── getSetting() - Get specific setting\n├── getAppName() - Get app name\n└── getWelcomeMessage() - Get welcome message\n```\n\n#### **Database Schema**\n```sql\nCREATE TABLE app_settings (\n  id INTEGER PRIMARY KEY,\n  key VARCHAR UNIQUE NOT NULL,\n  value TEXT,\n  type VARCHAR DEFAULT 'string',\n  category VARCHAR DEFAULT 'general',\n  description TEXT,\n  is_public BOOLEAN DEFAULT false,\n  created_at TIMESTAMP,\n  updated_at TIMESTAMP\n);\n```\n\n### 🎨 **Design Components**\n\n#### **Buttons**\n```css\n.btn-primary {\n  background: var(--primary-color);\n  border: 1px solid var(--primary-color);\n  box-shadow: var(--shadow-sm);\n  border-radius: var(--border-radius);\n}\n\n.btn-primary:hover {\n  background: var(--secondary-color);\n  transform: translateY(-1px);\n  box-shadow: var(--shadow-md);\n}\n```\n\n#### **Cards**\n```css\n.card {\n  background: var(--surface-color);\n  border-radius: var(--border-radius);\n  box-shadow: var(--shadow-sm);\n  border: 1px solid #E2E8F0;\n}\n\n.card:hover {\n  box-shadow: var(--shadow-md);\n  transform: translateY(-2px);\n}\n```\n\n#### **Forms**\n```css\n.form-input {\n  background: var(--surface-color);\n  border: 1px solid #E2E8F0;\n  border-radius: var(--border-radius);\n  color: var(--text-primary);\n}\n\n.form-input:focus {\n  border-color: var(--primary-color);\n  box-shadow: var(--shadow-sm);\n}\n```\n\n### 📱 **Mobile Experience**\n\n#### **Responsive Design**\n- **Mobile-First**: Optimized for mobile devices\n- **Touch-Friendly**: Large touch targets\n- **Consistent Spacing**: Proper spacing on all screen sizes\n- **Readable Typography**: Clear, readable fonts\n\n#### **Dynamic Branding on Mobile**\n- **Logo Scaling**: Logos scale properly on mobile\n- **Color Consistency**: Same colors across all devices\n- **Touch Interactions**: Proper hover states for touch\n\n### 🔄 **Real-Time Updates**\n\n#### **Settings Changes**\n1. **User Changes Setting**: In admin settings page\n2. **API Call**: Settings saved to database\n3. **ThemeContext Update**: Context state updated\n4. **CSS Variables**: Applied to document root\n5. **UI Updates**: All components update immediately\n\n#### **Example Flow**\n```javascript\n// User changes primary color\nhandleSettingChange('primary_color', '#FF6B6B')\n\n// Settings saved to database\nawait updateSettings({ primary_color: '#FF6B6B' })\n\n// CSS variables updated\nroot.style.setProperty('--primary-color', '#FF6B6B')\n\n// All buttons, cards, etc. update immediately\n```\n\n### 🎯 **User Experience**\n\n#### **Admin Experience**\n- **Intuitive Settings**: Easy-to-use settings interface\n- **Live Preview**: See changes immediately\n- **Color Pickers**: Visual color selection\n- **Validation**: Proper input validation\n- **Feedback**: Success/error messages\n\n#### **Customer Experience**\n- **Consistent Branding**: Logo and colors throughout\n- **Professional Look**: Clean, modern design\n- **Easy Navigation**: Intuitive interface\n- **Mobile Optimized**: Perfect mobile experience\n\n### 🚀 **Production Ready**\n\n#### **Performance**\n- **Optimized CSS**: Efficient CSS variables\n- **Minimal Re-renders**: Smart context updates\n- **Cached Settings**: Settings cached in context\n- **Fast Loading**: Quick initial load\n\n#### **Scalability**\n- **Database Storage**: All settings in database\n- **API Endpoints**: RESTful settings API\n- **Type Safety**: Proper data types\n- **Validation**: Input validation and sanitization\n\n#### **Maintainability**\n- **Clean Code**: Well-structured components\n- **Documentation**: Comprehensive documentation\n- **TypeScript Ready**: Easy to convert to TypeScript\n- **Testing Ready**: Testable components\n\n### 🎉 **Final Result**\n\nThe POSQ Restaurant System now features:\n\n✅ **Modern Airbnb-Style Design** - Clean, friendly, professional  \n✅ **Dynamic Color System** - Fully customizable colors  \n✅ **Dynamic Branding** - Logo, name, and messaging  \n✅ **Real-Time Updates** - Changes apply immediately  \n✅ **Database Integration** - All settings stored in database  \n✅ **Mobile Optimized** - Perfect mobile experience  \n✅ **Production Ready** - Scalable and maintainable  \n\n### 🎨 **Design Highlights**\n\n- **Blue Color Scheme**: Professional and trustworthy\n- **Clean Typography**: Inter font for readability\n- **Subtle Animations**: Smooth, professional transitions\n- **Consistent Spacing**: 12px border radius throughout\n- **Light Shadows**: Elegant depth and hierarchy\n- **Friendly Interface**: Warm, welcoming design language\n\n### 🔧 **Technical Highlights**\n\n- **CSS Variables**: Dynamic theming system\n- **React Context**: Centralized theme management\n- **Database Storage**: Persistent settings\n- **API Integration**: RESTful settings endpoints\n- **Real-Time Updates**: Immediate UI changes\n- **Type Safety**: Proper data validation\n\n**The system now has a modern, friendly, Airbnb-style design with fully dynamic settings that can be customized in real-time!** 🎨✨\n\n---\n\n## 📞 **Usage Instructions**\n\n### **Changing Colors**\n1. Go to **Settings** → **Theme** tab\n2. Use color pickers or enter hex codes\n3. Click **Save Settings**\n4. Colors update immediately across the app\n\n### **Changing Branding**\n1. Go to **Settings** → **Branding** tab\n2. Enter logo URL and favicon URL\n3. Update app name and welcome message\n4. Click **Save Settings**\n5. Branding updates throughout the app\n\n### **Layout Customization**\n1. Go to **Settings** → **Layout** tab\n2. Adjust border radius, sidebar width, shadows\n3. Click **Save Settings**\n4. Layout updates immediately\n\n**The system is now fully customizable with a beautiful, modern design!** 🚀","size_bytes":9540},"COMPLETE_FIXES_SUMMARY.md":{"content":"# 🎉 ALL ISSUES FIXED - COMPLETE IMPLEMENTATION\n\n## ✅ **ALL REQUESTED FEATURES IMPLEMENTED**\n\n### 🔧 **1. Order Status Page Fixed**\n- **Issue**: Order status page was redirecting to login\n- **Solution**: Made order status page accessible without authentication\n- **Implementation**: Updated routing and API endpoints to allow public access\n- **Result**: Users can now check order status using PIN without logging in\n\n### 🎯 **2. Unique PIN System**\n- **Feature**: Each order gets a unique 8-digit PIN\n- **Implementation**: \n  - Backend generates unique PIN for each order\n  - PIN displayed prominently in checkout page\n  - QR code links to order status page\n  - PIN can be used to lookup order status\n- **Result**: Customers get PIN and QR code after checkout\n\n### 💳 **3. Dynamic Payment Methods**\n- **Feature**: Admin can enable/disable payment methods\n- **Settings**: \n  - Cash payment (always available)\n  - Card payment (can be disabled)\n  - Cash-only mode toggle\n- **Implementation**: \n  - Settings stored in database\n  - Checkout page adapts based on admin settings\n  - Visual indicators for disabled payment methods\n- **Result**: Admin has full control over payment options\n\n### 📝 **4. Customizable UI Text**\n- **Feature**: Admin can customize all customer-facing text\n- **Settings**:\n  - Header text (welcome message)\n  - Footer text\n  - Order instructions\n- **Implementation**:\n  - Settings stored in database\n  - Real-time updates across the app\n  - Dynamic text display in customer layout\n- **Result**: Complete branding control for admin\n\n### 📊 **5. Admin Orders Dashboard Fixed**\n- **Issue**: Orders not showing in admin dashboard\n- **Solution**: Fixed API response format and data loading\n- **Implementation**:\n  - Updated OrdersPage to properly load orders\n  - Fixed API response structure\n  - Added proper error handling\n- **Result**: All orders now visible in admin dashboard\n\n### 👨‍🍳 **6. Enhanced Kitchen Display**\n- **Feature**: Kitchen staff see detailed order information\n- **Implementation**:\n  - Order items with images\n  - Customer name and table number\n  - Item quantities and modifiers\n  - Special notes and instructions\n  - Visual food item images\n- **Result**: Kitchen has all information needed to prepare orders\n\n### 🎨 **7. Modern Airbnb-Style Design**\n- **Design**: Clean, modern, friendly interface\n- **Colors**: Professional blue color scheme\n- **Components**: \n  - Clean buttons with subtle shadows\n  - White cards with light borders\n  - Consistent spacing and typography\n  - Smooth animations and transitions\n- **Result**: Professional, modern restaurant system\n\n---\n\n## 🚀 **TECHNICAL IMPLEMENTATIONS**\n\n### **Backend Changes**\n\n#### **1. New Settings System**\n```javascript\n// New app_settings table with categories\n- General settings (app name, currency, tax rate)\n- Theme settings (colors, layout)\n- Branding settings (logo, favicon)\n- UI text settings (header, footer, instructions)\n- Payment settings (methods, cash-only mode)\n- Database settings (connection details)\n- Printer settings (IP, port)\n```\n\n#### **2. Enhanced Order System**\n```javascript\n// Orders now include:\n- Unique 8-digit PIN\n- Payment method selection\n- Enhanced order status tracking\n- Better API responses\n```\n\n#### **3. Dynamic Settings API**\n```javascript\n// RESTful API endpoints:\nGET /api/app-settings - Get all settings\nGET /api/app-settings/category/:category - Get by category\nPUT /api/app-settings/:key - Update single setting\nPUT /api/app-settings - Update multiple settings\nPOST /api/app-settings/reset - Reset to defaults\n```\n\n### **Frontend Changes**\n\n#### **1. ThemeContext System**\n```javascript\n// Centralized theme management:\n- Dynamic CSS variables\n- Real-time theme updates\n- Settings persistence\n- Brand customization\n```\n\n#### **2. Enhanced Components**\n```javascript\n// Updated components:\n- CheckoutPage: PIN display, dynamic payment methods\n- OrderStatusPage: Public access, modern design\n- SettingsPage: Comprehensive settings interface\n- KitchenDisplayPage: Enhanced order details with images\n- CustomerLayout: Dynamic branding and text\n```\n\n#### **3. Airbnb-Style Design System**\n```css\n/* Modern design variables */\n:root {\n  --primary-color: #3B82F6;\n  --secondary-color: #1E40AF;\n  --accent-color: #60A5FA;\n  --background-color: #F8FAFC;\n  --surface-color: #FFFFFF;\n  --border-radius: 12px;\n}\n```\n\n---\n\n## 🎯 **KEY FEATURES IMPLEMENTED**\n\n### **1. Order Management**\n- ✅ Unique PIN for each order\n- ✅ QR code generation for order status\n- ✅ Public order status lookup\n- ✅ Enhanced order details in kitchen\n- ✅ Real-time order updates\n\n### **2. Payment System**\n- ✅ Dynamic payment method selection\n- ✅ Cash-only mode toggle\n- ✅ Card payment enable/disable\n- ✅ Payment method validation\n- ✅ Visual payment method indicators\n\n### **3. Customization System**\n- ✅ Dynamic app branding\n- ✅ Customizable colors and themes\n- ✅ Editable UI text (header, footer, instructions)\n- ✅ Logo and favicon support\n- ✅ Real-time settings updates\n\n### **4. Admin Dashboard**\n- ✅ Fixed orders display\n- ✅ Comprehensive settings page\n- ✅ Payment method management\n- ✅ UI text customization\n- ✅ Theme color management\n\n### **5. Kitchen Display**\n- ✅ Enhanced order details\n- ✅ Food item images\n- ✅ Customer information\n- ✅ Special instructions\n- ✅ Modifiers and notes\n\n### **6. Modern Design**\n- ✅ Airbnb-style clean interface\n- ✅ Professional blue color scheme\n- ✅ Consistent spacing and typography\n- ✅ Smooth animations\n- ✅ Mobile-responsive design\n\n---\n\n## 📱 **USER EXPERIENCE IMPROVEMENTS**\n\n### **Customer Experience**\n1. **Easy Order Status Check**: Enter PIN to check order status\n2. **Clear Payment Options**: See available payment methods\n3. **Professional Design**: Clean, modern interface\n4. **Mobile Optimized**: Perfect mobile experience\n5. **Dynamic Branding**: Personalized restaurant experience\n\n### **Admin Experience**\n1. **Complete Control**: Full customization of all settings\n2. **Real-Time Updates**: Changes apply immediately\n3. **Comprehensive Dashboard**: All orders visible and manageable\n4. **Payment Management**: Control payment methods\n5. **Branding Control**: Customize all customer-facing text\n\n### **Kitchen Experience**\n1. **Detailed Orders**: All information needed to prepare food\n2. **Visual Food Items**: Images of what to prepare\n3. **Customer Details**: Name, table, special requests\n4. **Clear Instructions**: Modifiers, notes, quantities\n5. **Real-Time Updates**: Live order status changes\n\n---\n\n## 🔧 **SETTINGS CONFIGURATION**\n\n### **General Settings**\n- Application Name\n- Currency (MAD, USD, EUR, GBP)\n- Tax Rate (%)\n- Service Charge (%)\n- Welcome Message\n\n### **Branding Settings**\n- Logo URL with preview\n- Favicon URL\n- Dynamic logo display\n\n### **Theme Settings**\n- Primary Color (with color picker)\n- Secondary Color\n- Accent Color\n- Success, Warning, Error Colors\n- Background & Surface Colors\n\n### **UI Text Settings**\n- Header Text (welcome message)\n- Footer Text\n- Order Instructions\n\n### **Payment Settings**\n- Payment Methods (Cash, Card)\n- Cash-Only Mode Toggle\n- Stripe Integration Keys\n\n### **Layout Settings**\n- Border Radius (0-24px)\n- Sidebar Width (200-400px)\n- Shadow Intensity (Light, Medium, Heavy)\n\n---\n\n## 🎨 **DESIGN HIGHLIGHTS**\n\n### **Airbnb-Style Components**\n- **Buttons**: Clean, rounded with subtle shadows\n- **Cards**: White background with light borders\n- **Forms**: Simple inputs with focus states\n- **Badges**: Rounded with appropriate colors\n- **Navigation**: Clean, minimal design\n\n### **Color System**\n- **Primary**: #3B82F6 (Blue-500) - Main brand color\n- **Secondary**: #1E40AF (Blue-800) - Darker blue for depth\n- **Accent**: #60A5FA (Blue-400) - Light blue for highlights\n- **Success**: #10B981 (Emerald-500) - Green for success states\n- **Warning**: #F59E0B (Amber-500) - Orange for warnings\n- **Error**: #EF4444 (Red-500) - Red for errors\n\n### **Typography**\n- **Font**: Inter (clean, readable)\n- **Hierarchy**: Clear heading and body text\n- **Spacing**: Consistent margins and padding\n- **Colors**: Proper contrast for readability\n\n---\n\n## 🚀 **PRODUCTION READY**\n\n### **Performance**\n- ✅ Optimized CSS with variables\n- ✅ Efficient API calls\n- ✅ Cached settings in context\n- ✅ Fast loading times\n\n### **Scalability**\n- ✅ Database-driven settings\n- ✅ RESTful API architecture\n- ✅ Modular component design\n- ✅ Easy to extend and maintain\n\n### **Security**\n- ✅ Public settings for customer access\n- ✅ Protected admin settings\n- ✅ Input validation and sanitization\n- ✅ Secure API endpoints\n\n### **Maintainability**\n- ✅ Clean, documented code\n- ✅ Consistent design system\n- ✅ TypeScript-ready structure\n- ✅ Comprehensive error handling\n\n---\n\n## 🎉 **FINAL RESULT**\n\nThe POSQ Restaurant System now features:\n\n✅ **Fixed Order Status** - Users can check orders without login  \n✅ **Unique PIN System** - Each order has 8-digit PIN with QR code  \n✅ **Dynamic Payment Methods** - Admin controls cash/card options  \n✅ **Customizable UI Text** - All customer text editable  \n✅ **Fixed Admin Orders** - All orders visible in dashboard  \n✅ **Enhanced Kitchen Display** - Detailed orders with images  \n✅ **Modern Airbnb Design** - Clean, professional interface  \n\n### **Ready for Production Use:**\n- 🎨 **Beautiful Design** - Modern, friendly, professional\n- 🔧 **Full Customization** - Complete control over branding\n- 📱 **Mobile Perfect** - Responsive across all devices\n- 🚀 **Production Ready** - Scalable and maintainable\n- 💳 **Payment Control** - Flexible payment method management\n- 👨‍🍳 **Kitchen Ready** - All information for food preparation\n\n**The system is now complete and ready for professional restaurant use!** 🏆\n\n---\n\n## 📞 **How to Use**\n\n### **For Customers:**\n1. **Order Food**: Browse menu, add to cart, checkout\n2. **Get PIN**: Receive 8-digit PIN and QR code\n3. **Check Status**: Use PIN or QR code to check order status\n4. **Pay**: Use available payment methods\n\n### **For Admins:**\n1. **Customize**: Go to Settings to change colors, text, branding\n2. **Manage Orders**: View all orders in dashboard\n3. **Control Payments**: Enable/disable payment methods\n4. **Monitor Kitchen**: Real-time order updates\n\n### **For Kitchen Staff:**\n1. **View Orders**: See detailed order information\n2. **See Images**: Visual food items to prepare\n3. **Read Instructions**: Special notes and modifiers\n4. **Update Status**: Mark orders as ready\n\n**Everything is now working perfectly!** 🎯✨","size_bytes":10570},"server/index.js":{"content":"const express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst morgan = require('morgan');\nconst { createServer } = require('http');\nconst { Server } = require('socket.io');\nrequire('dotenv').config();\n\nconst authRoutes = require('./src/routes/auth');\nconst menuRoutes = require('./src/routes/menu');\nconst orderRoutes = require('./src/routes/orders');\nconst paymentRoutes = require('./src/routes/payments');\nconst tableRoutes = require('./src/routes/tables');\nconst inventoryRoutes = require('./src/routes/inventory');\nconst settingsRoutes = require('./src/routes/settings');\nconst { router: syncRoutes } = require('./src/routes/sync');\nconst reportRoutes = require('./src/routes/reports');\nconst uploadRoutes = require('./src/routes/upload');\nconst appSettingsRoutes = require('./src/routes/app-settings');\nconst backupRoutes = require('./src/routes/backup');\nconst employeesRoutes = require('./src/routes/employees');\nconst restaurantsRoutes = require('./src/routes/restaurants');\n\nconst { initializeDatabase } = require('./src/database/init');\nconst { setupSocketHandlers } = require('./src/socket/handlers');\nconst { errorHandler } = require('./src/middleware/errorHandler');\nconst { rateLimiter } = require('./src/middleware/rateLimiter');\n\nconst app = express();\nconst server = createServer(app);\nconst io = new Server(server, {\n  cors: {\n    origin: true,\n    methods: [\"GET\", \"POST\"],\n    credentials: true\n  }\n});\n\n// Store io instance for use in routes\napp.set('io', io);\n\n// Trust proxy for Replit environment (1 proxy hop)\napp.set('trust proxy', 1);\n\n// Middleware\napp.use(helmet());\napp.use(cors({\n  origin: true,\n  credentials: true\n}));\napp.use(morgan('combined'));\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true }));\napp.use(rateLimiter);\n\n// Static files\napp.use('/uploads', express.static('uploads'));\n\n// Serve frontend build in production\nif (process.env.NODE_ENV === 'production') {\n  const path = require('path');\n  app.use(express.static(path.join(__dirname, '../frontend/dist')));\n  \n  app.get('*', (req, res, next) => {\n    if (req.path.startsWith('/api')) {\n      return next();\n    }\n    res.sendFile(path.join(__dirname, '../frontend/dist/index.html'));\n  });\n}\n\n// Routes\napp.use('/api/auth', authRoutes);\napp.use('/api/menu', menuRoutes);\napp.use('/api/orders', orderRoutes);\napp.use('/api/payments', paymentRoutes);\napp.use('/api/tables', tableRoutes);\napp.use('/api/inventory', inventoryRoutes);\napp.use('/api/settings', settingsRoutes);\napp.use('/api/sync', syncRoutes);\napp.use('/api/reports', reportRoutes);\napp.use('/api/upload', uploadRoutes);\napp.use('/api/app-settings', appSettingsRoutes);\napp.use('/api/backup', backupRoutes);\napp.use('/api/employees', employeesRoutes);\napp.use('/api/restaurants', restaurantsRoutes);\n\n// Health check\napp.get('/health', (req, res) => {\n  res.json({ \n    status: 'OK', \n    timestamp: new Date().toISOString(),\n    mode: process.env.MODE || 'LOCAL'\n  });\n});\n\n// Setup Socket.IO handlers\nsetupSocketHandlers(io);\n\n// Error handling\napp.use(errorHandler);\n\n// 404 handler\napp.use('*', (req, res) => {\n  res.status(404).json({ error: 'Route not found' });\n});\n\nconst PORT = process.env.PORT || 3001;\n\nasync function startServer() {\n  try {\n    // Initialize database\n    await initializeDatabase();\n    \n    server.listen(PORT, () => {\n      console.log(`🚀 POSQ Server running on port ${PORT}`);\n      console.log(`📱 Frontend URL: ${process.env.FRONTEND_URL || 'http://localhost:5000'}`);\n      console.log(`🗄️  Database: ${process.env.DB_TYPE || 'sqlite'}`);\n      console.log(`⚙️  Mode: ${process.env.MODE || 'LOCAL'}`);\n    });\n  } catch (error) {\n    console.error('Failed to start server:', error);\n    process.exit(1);\n  }\n}\n\nstartServer();","size_bytes":3817},"server/knexfile.ts":{"content":"import type { Knex } from 'knex';\nimport path from 'path';\nimport dotenv from 'dotenv';\n\ndotenv.config({ path: path.resolve(process.cwd(), 'server/.env') });\n\nconst mode = process.env.MODE || 'LOCAL';\nconsole.log('Database mode:', mode);\n\nconst common: Partial<Knex.Config> = {\n  migrations: {\n    directory: path.resolve(process.cwd(), 'src/migrations')\n  },\n  seeds: {\n    directory: path.resolve(process.cwd(), 'src/seeds')\n  },\n  pool: { min: 1, max: 10 }\n};\n\nconst sqlite: Knex.Config = {\n  client: 'sqlite3',\n  connection: {\n    filename: process.env.SQLITE_PATH || path.resolve(process.cwd(), 'server/data/posq.sqlite')\n  },\n  useNullAsDefault: true,\n  ...common\n};\n\nconst mysql: Knex.Config = {\n  client: process.env.DB_CLIENT || 'mysql2',\n  connection: {\n    host: process.env.DB_HOST,\n    port: process.env.DB_PORT ? Number(process.env.DB_PORT) : 3306,\n    database: process.env.DB_NAME,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD\n  },\n  ...common\n};\n\n// FIXED: Use mode to determine which config to use\nconst config: Knex.Config = mode === 'LOCAL' ? sqlite : mysql;\n\nexport default config;\nmodule.exports = config;","size_bytes":1151},"replit.md":{"content":"# POSQ Restaurant POS System\n\n## Overview\nPOSQ is a comprehensive restaurant Point of Sale (POS) and QR ordering system designed for modern eateries. It offers a luxury design, full functionality including customer QR code ordering, an admin dashboard, real-time order tracking, inventory management, and professional reporting. The system aims to provide a robust, multi-tenant solution for single or multiple restaurant management, enhancing operational efficiency and customer experience with features like dynamic database management, customizable menu templates, and a complete table-based ordering flow with cash payment.\n\n## User Preferences\nI prefer simple language and iterative development. Ask before making major changes. I want detailed explanations but do not make changes to folder Z or file Y.\n\n## System Architecture\nThe system employs a client-server architecture with a React + Vite frontend and a Node.js + Express backend. SQLite is used for development, with support for MySQL/PostgreSQL in production. Real-time features are powered by Socket.IO, and the UI is styled with TailwindCSS, incorporating custom luxury components.\n\n**UI/UX Decisions:**\n- PWA (Progressive Web App) design with a mobile-first approach.\n- Luxury design aesthetic using TailwindCSS for custom theming.\n- QR code generation for customer ordering and table identification.\n- Admin dashboard with intuitive layouts for management tasks.\n- Tabbed interfaces and data tables for detailed views.\n- Customizable customer-facing menu page templates (Default-Luxury Gradient, Modern-Minimalist, Elegant-Sophisticated, Minimal-Grid).\n\n**Technical Implementations:**\n- **Authentication:** JWT-based authentication with role-based access control (Admin, Owner, Manager, Staff) and automatic token refresh.\n- **Database:** Knex.js for schema migrations and query building. Supports multi-tenancy with `branch_id` for data isolation. Dynamic database management allows admin users to configure, initialize, and manage databases.\n- **Real-time:** Socket.IO for live updates on orders, kitchen display, and other critical events.\n- **File Uploads:** Multer handles image uploads, storing paths (full URLs) in the database and files in a designated directory.\n- **Inventory Management:** Automatic stock deduction based on recipes when orders are completed, with stock movement logging.\n- **Reporting:** Comprehensive analytics, including sales, inventory usage, top-selling items, and table turnover, with Excel export capabilities.\n- **Multi-tenancy:** Strict data isolation enforced across all API endpoints using `req.user.branch_id`.\n- **Order Management:** Includes quick order search with QR code support, payment status management (PAID/UNPAID), and real-time order status updates via Socket.IO.\n- **Table-Based Ordering Flow:** Captures table number and branch ID from QR code URLs, persists them through the ordering process, and generates secure payment and tracking QR codes for customers.\n- **Security:** PIN-based order access for public viewing to prevent enumeration, with payment details restricted to authenticated users. Express trust proxy configured for secure rate limiting.\n\n**Feature Specifications:**\n- **Customer QR Ordering:** Customers can scan QR codes to access menus, place orders, and track status.\n- **Admin Dashboard:** Full management capabilities for menus, orders, tables, employees, inventory, and reports.\n- **Multi-Restaurant Management:** Owners can manage multiple restaurant branches and view aggregated analytics.\n- **Employee Management:** CRUD operations for employees with role assignments, PINs, and audit logging.\n- **Backup & Restore:** System for creating, restoring, and exporting database backups.\n- **Cashier Dashboard:** Dedicated interface for manual order code search, managing pending cash payments, and one-click payment confirmation with real-time updates.\n\n## External Dependencies\n- **Frontend:**\n    - React\n    - Vite\n    - TailwindCSS\n    - Socket.IO Client\n- **Backend:**\n    - Node.js\n    - Express.js\n    - Socket.IO\n    - SQLite (development database)\n    - Knex.js (database migrations and query builder)\n    - bcrypt (password hashing)\n    - Multer (file uploads)\n    - JWT (JSON Web Tokens for authentication)","size_bytes":4262},"server/src/routes/backup.js":{"content":"const express = require('express');\nconst { exec } = require('child_process');\nconst fs = require('fs').promises;\nconst path = require('path');\nconst { authenticateToken, authorize } = require('../middleware/auth');\nconst { logger } = require('../middleware/errorHandler');\n\nconst router = express.Router();\n\nconst BACKUP_DIR = path.join(__dirname, '../../../backups');\nconst SCRIPTS_DIR = path.join(__dirname, '../../../scripts');\n\nrouter.post('/create', authenticateToken, authorize('admin'), async (req, res) => {\n  try {\n    const dbType = process.env.DB_TYPE || 'sqlite3';\n    const scriptPath = path.join(SCRIPTS_DIR, 'backup.sh');\n    \n    const dbTypeMap = {\n      'sqlite3': 'sqlite',\n      'mysql2': 'mysql',\n      'pg': 'postgresql'\n    };\n    \n    const backupType = dbTypeMap[dbType] || 'sqlite';\n    \n    exec(`bash \"${scriptPath}\" \"${backupType}\"`, {\n      env: {\n        ...process.env,\n        DB_PATH: process.env.SQLITE_PATH || './data/posq.db',\n        DB_TYPE: backupType\n      }\n    }, async (error, stdout, stderr) => {\n      if (error) {\n        logger.error('Backup creation error:', error);\n        return res.status(500).json({ \n          success: false,\n          error: 'Failed to create backup',\n          details: stderr\n        });\n      }\n      \n      await require('../database/init').db('audit_logs').insert({\n        user_id: req.user.id,\n        action: 'BACKUP_CREATE',\n        meta: JSON.stringify({ dbType, userId: req.user.id })\n      });\n      \n      logger.info(`Database backup created by ${req.user.username}`);\n      \n      res.json({ \n        success: true,\n        message: 'Backup created successfully',\n        output: stdout\n      });\n    });\n    \n  } catch (error) {\n    logger.error('Backup creation error:', error);\n    res.status(500).json({ success: false, error: 'Failed to create backup' });\n  }\n});\n\nrouter.get('/list', authenticateToken, authorize('admin'), async (req, res) => {\n  try {\n    await fs.mkdir(BACKUP_DIR, { recursive: true });\n    \n    const files = await fs.readdir(BACKUP_DIR);\n    const backups = [];\n    \n    for (const file of files) {\n      if (file.endsWith('.gz') || file.endsWith('.db')) {\n        const filePath = path.join(BACKUP_DIR, file);\n        const stats = await fs.stat(filePath);\n        \n        backups.push({\n          filename: file,\n          size: stats.size,\n          created: stats.mtime,\n          type: file.includes('sqlite') ? 'sqlite' : file.includes('mysql') ? 'mysql' : 'postgresql'\n        });\n      }\n    }\n    \n    backups.sort((a, b) => b.created - a.created);\n    \n    res.json({ success: true, backups });\n    \n  } catch (error) {\n    logger.error('Backup list error:', error);\n    res.status(500).json({ success: false, error: 'Failed to list backups' });\n  }\n});\n\nrouter.post('/restore', authenticateToken, authorize('admin'), async (req, res) => {\n  try {\n    const { filename } = req.body;\n    \n    if (!filename) {\n      return res.status(400).json({ success: false, error: 'Filename is required' });\n    }\n    \n    if (filename.includes('..') || filename.includes('/') || filename.includes('\\\\')) {\n      return res.status(400).json({ success: false, error: 'Invalid filename' });\n    }\n    \n    if (!/^posq_(sqlite|mysql|postgresql)_\\d{8}_\\d{6}\\.(db|sql)(\\.gz)?$/.test(filename)) {\n      return res.status(400).json({ success: false, error: 'Invalid backup filename format' });\n    }\n    \n    const backupPath = path.join(BACKUP_DIR, filename);\n    const resolvedPath = path.resolve(backupPath);\n    const resolvedBackupDir = path.resolve(BACKUP_DIR);\n    \n    if (!resolvedPath.startsWith(resolvedBackupDir)) {\n      return res.status(400).json({ success: false, error: 'Invalid backup path' });\n    }\n    \n    try {\n      await fs.access(backupPath);\n    } catch {\n      return res.status(404).json({ success: false, error: 'Backup file not found' });\n    }\n    \n    const dbType = filename.includes('sqlite') ? 'sqlite' : filename.includes('mysql') ? 'mysql' : 'postgresql';\n    const scriptPath = path.join(SCRIPTS_DIR, 'restore.sh');\n    \n    exec(`bash \"${scriptPath}\" \"${dbType}\" \"${backupPath}\"`, {\n      env: {\n        ...process.env,\n        DB_PATH: process.env.SQLITE_PATH || './data/posq.db'\n      }\n    }, async (error, stdout, stderr) => {\n      if (error) {\n        logger.error('Backup restore error:', error);\n        return res.status(500).json({ \n          success: false,\n          error: 'Failed to restore backup',\n          details: stderr\n        });\n      }\n      \n      await require('../database/init').db('audit_logs').insert({\n        user_id: req.user.id,\n        action: 'BACKUP_RESTORE',\n        meta: JSON.stringify({ filename, userId: req.user.id })\n      });\n      \n      logger.info(`Database restored from ${filename} by ${req.user.username}`);\n      \n      res.json({ \n        success: true,\n        message: 'Backup restored successfully',\n        output: stdout\n      });\n    });\n    \n  } catch (error) {\n    logger.error('Backup restore error:', error);\n    res.status(500).json({ success: false, error: 'Failed to restore backup' });\n  }\n});\n\nrouter.delete('/:filename', authenticateToken, authorize('admin'), async (req, res) => {\n  try {\n    const { filename } = req.params;\n    \n    if (filename.includes('..') || filename.includes('/') || filename.includes('\\\\')) {\n      return res.status(400).json({ success: false, error: 'Invalid filename' });\n    }\n    \n    if (!/^posq_(sqlite|mysql|postgresql)_\\d{8}_\\d{6}\\.(db|sql)(\\.gz)?$/.test(filename)) {\n      return res.status(400).json({ success: false, error: 'Invalid backup filename format' });\n    }\n    \n    const backupPath = path.join(BACKUP_DIR, filename);\n    const resolvedPath = path.resolve(backupPath);\n    const resolvedBackupDir = path.resolve(BACKUP_DIR);\n    \n    if (!resolvedPath.startsWith(resolvedBackupDir)) {\n      return res.status(400).json({ success: false, error: 'Invalid backup path' });\n    }\n    \n    try {\n      await fs.access(backupPath);\n      await fs.unlink(backupPath);\n      \n      await require('../database/init').db('audit_logs').insert({\n        user_id: req.user.id,\n        action: 'BACKUP_DELETE',\n        meta: JSON.stringify({ filename, userId: req.user.id })\n      });\n      \n      logger.info(`Backup ${filename} deleted by ${req.user.username}`);\n      \n      res.json({ success: true, message: 'Backup deleted successfully' });\n    } catch {\n      return res.status(404).json({ success: false, error: 'Backup file not found' });\n    }\n    \n  } catch (error) {\n    logger.error('Backup deletion error:', error);\n    res.status(500).json({ success: false, error: 'Failed to delete backup' });\n  }\n});\n\nmodule.exports = router;\n","size_bytes":6695},"frontend/src/pages/admin/EmployeesPage.jsx":{"content":"import { useState, useEffect } from 'react'\nimport { employeesAPI } from '../../services/api'\nimport { \n  UserGroupIcon, \n  PlusIcon,\n  PencilIcon,\n  TrashIcon,\n  CheckCircleIcon,\n  XCircleIcon,\n  MagnifyingGlassIcon\n} from '@heroicons/react/24/outline'\nimport toast from 'react-hot-toast'\n\nfunction EmployeesPage() {\n  const [employees, setEmployees] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [showModal, setShowModal] = useState(false)\n  const [editingEmployee, setEditingEmployee] = useState(null)\n  const [searchTerm, setSearchTerm] = useState('')\n  const [filterRole, setFilterRole] = useState('all')\n  const [formData, setFormData] = useState({\n    username: '',\n    password: '',\n    full_name: '',\n    role: 'cashier',\n    pin: '',\n    salary: '',\n    phone: '',\n    email: '',\n    hire_date: new Date().toISOString().split('T')[0]\n  })\n\n  useEffect(() => {\n    loadEmployees()\n  }, [])\n\n  const loadEmployees = async () => {\n    try {\n      setLoading(true)\n      const response = await employeesAPI.getEmployees()\n      if (response.data.success) {\n        setEmployees(response.data.employees)\n      }\n    } catch (error) {\n      toast.error('Failed to load employees')\n      console.error('Load employees error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleOpenModal = (employee = null) => {\n    if (employee) {\n      setEditingEmployee(employee)\n      setFormData({\n        username: employee.username,\n        password: '',\n        full_name: employee.full_name,\n        role: employee.role,\n        pin: employee.pin || '',\n        salary: employee.salary || '',\n        phone: employee.phone || '',\n        email: employee.email || '',\n        hire_date: employee.hire_date || new Date().toISOString().split('T')[0]\n      })\n    } else {\n      setEditingEmployee(null)\n      setFormData({\n        username: '',\n        password: '',\n        full_name: '',\n        role: 'cashier',\n        pin: '',\n        salary: '',\n        phone: '',\n        email: '',\n        hire_date: new Date().toISOString().split('T')[0]\n      })\n    }\n    setShowModal(true)\n  }\n\n  const handleCloseModal = () => {\n    setShowModal(false)\n    setEditingEmployee(null)\n    setFormData({\n      username: '',\n      password: '',\n      full_name: '',\n      role: 'cashier',\n      pin: '',\n      salary: '',\n      phone: '',\n      email: '',\n      hire_date: new Date().toISOString().split('T')[0]\n    })\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n\n    if (!formData.username.trim() || !formData.full_name.trim()) {\n      toast.error('Please fill in all required fields')\n      return\n    }\n\n    if (!editingEmployee && !formData.password.trim()) {\n      toast.error('Password is required for new employees')\n      return\n    }\n\n    try {\n      setLoading(true)\n      \n      const submitData = { ...formData }\n      if (editingEmployee && !submitData.password) {\n        delete submitData.password\n      }\n\n      if (editingEmployee) {\n        await employeesAPI.updateEmployee(editingEmployee.id, submitData)\n        toast.success('Employee updated successfully')\n      } else {\n        await employeesAPI.createEmployee(submitData)\n        toast.success('Employee created successfully')\n      }\n\n      await loadEmployees()\n      handleCloseModal()\n    } catch (error) {\n      toast.error(error.response?.data?.error || 'Failed to save employee')\n      console.error('Save employee error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleDelete = async (employee) => {\n    if (!window.confirm(`Are you sure you want to deactivate ${employee.full_name}?`)) {\n      return\n    }\n\n    try {\n      setLoading(true)\n      await employeesAPI.deleteEmployee(employee.id)\n      toast.success('Employee deactivated successfully')\n      await loadEmployees()\n    } catch (error) {\n      toast.error(error.response?.data?.error || 'Failed to deactivate employee')\n      console.error('Delete employee error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleActivate = async (employee) => {\n    try {\n      setLoading(true)\n      await employeesAPI.activateEmployee(employee.id)\n      toast.success('Employee activated successfully')\n      await loadEmployees()\n    } catch (error) {\n      toast.error('Failed to activate employee')\n      console.error('Activate employee error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const filteredEmployees = employees.filter(emp => {\n    const matchesSearch = emp.full_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         emp.username.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         emp.role.toLowerCase().includes(searchTerm.toLowerCase())\n    const matchesRole = filterRole === 'all' || emp.role === filterRole\n    return matchesSearch && matchesRole\n  })\n\n  const getRoleBadgeColor = (role) => {\n    const colors = {\n      admin: 'bg-purple-100 text-purple-800 border-purple-200',\n      manager: 'bg-blue-100 text-blue-800 border-blue-200',\n      cashier: 'bg-green-100 text-green-800 border-green-200',\n      kitchen: 'bg-orange-100 text-orange-800 border-orange-200',\n      waiter: 'bg-yellow-100 text-yellow-800 border-yellow-200'\n    }\n    return colors[role] || 'bg-gray-100 text-gray-800 border-gray-200'\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold gradient-text\">Employee Management</h1>\n          <p className=\"text-gray-600 mt-2\">Manage your team members and their roles</p>\n        </div>\n        <button\n          onClick={() => handleOpenModal()}\n          className=\"btn-primary\"\n        >\n          <PlusIcon className=\"h-5 w-5 mr-2\" />\n          Add Employee\n        </button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <div className=\"card\">\n          <div className=\"card-body text-center\">\n            <UserGroupIcon className=\"h-8 w-8 text-blue-600 mx-auto mb-2\" />\n            <div className=\"text-2xl font-bold text-gray-900\">{employees.length}</div>\n            <div className=\"text-sm text-gray-600\">Total Employees</div>\n          </div>\n        </div>\n        <div className=\"card\">\n          <div className=\"card-body text-center\">\n            <CheckCircleIcon className=\"h-8 w-8 text-green-600 mx-auto mb-2\" />\n            <div className=\"text-2xl font-bold text-gray-900\">\n              {employees.filter(e => e.is_active).length}\n            </div>\n            <div className=\"text-sm text-gray-600\">Active</div>\n          </div>\n        </div>\n        <div className=\"card\">\n          <div className=\"card-body text-center\">\n            <XCircleIcon className=\"h-8 w-8 text-red-600 mx-auto mb-2\" />\n            <div className=\"text-2xl font-bold text-gray-900\">\n              {employees.filter(e => !e.is_active).length}\n            </div>\n            <div className=\"text-sm text-gray-600\">Inactive</div>\n          </div>\n        </div>\n        <div className=\"card\">\n          <div className=\"card-body text-center\">\n            <div className=\"h-8 w-8 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-2\">\n              <span className=\"text-purple-600 font-bold text-lg\">$</span>\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900\">\n              {employees.filter(e => e.salary).length}\n            </div>\n            <div className=\"text-sm text-gray-600\">With Salary</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"card\">\n        <div className=\"card-body\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            {/* Search */}\n            <div className=\"flex-1 relative\">\n              <MagnifyingGlassIcon className=\"h-5 w-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search by name, username, or role...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"form-input pl-10\"\n              />\n            </div>\n\n            {/* Role Filter */}\n            <div>\n              <select\n                value={filterRole}\n                onChange={(e) => setFilterRole(e.target.value)}\n                className=\"form-input\"\n              >\n                <option value=\"all\">All Roles</option>\n                <option value=\"admin\">Admin</option>\n                <option value=\"manager\">Manager</option>\n                <option value=\"cashier\">Cashier</option>\n                <option value=\"kitchen\">Kitchen</option>\n                <option value=\"waiter\">Waiter</option>\n              </select>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Employees Table */}\n      <div className=\"card\">\n        <div className=\"card-body p-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Employee\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Role\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Contact\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Salary\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Actions\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {loading && filteredEmployees.length === 0 ? (\n                  <tr>\n                    <td colSpan=\"6\" className=\"px-6 py-12 text-center\">\n                      <div className=\"loading-spinner mx-auto mb-2\"></div>\n                      <p className=\"text-gray-600\">Loading employees...</p>\n                    </td>\n                  </tr>\n                ) : filteredEmployees.length === 0 ? (\n                  <tr>\n                    <td colSpan=\"6\" className=\"px-6 py-12 text-center\">\n                      <UserGroupIcon className=\"h-12 w-12 text-gray-400 mx-auto mb-2\" />\n                      <p className=\"text-gray-600\">No employees found</p>\n                    </td>\n                  </tr>\n                ) : (\n                  filteredEmployees.map((employee) => (\n                    <tr key={employee.id} className=\"hover:bg-gray-50\">\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div>\n                          <div className=\"text-sm font-medium text-gray-900\">\n                            {employee.full_name}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">@{employee.username}</div>\n                          {employee.pin && (\n                            <div className=\"text-xs text-gray-400\">PIN: {employee.pin}</div>\n                          )}\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <span className={`badge ${getRoleBadgeColor(employee.role)}`}>\n                          {employee.role}\n                        </span>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"text-sm text-gray-900\">{employee.phone || '-'}</div>\n                        <div className=\"text-sm text-gray-500\">{employee.email || '-'}</div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"text-sm font-medium text-gray-900\">\n                          {employee.salary ? `${parseFloat(employee.salary).toFixed(2)} MAD` : '-'}\n                        </div>\n                        {employee.hire_date && (\n                          <div className=\"text-xs text-gray-500\">\n                            Since {new Date(employee.hire_date).toLocaleDateString()}\n                          </div>\n                        )}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        {employee.is_active ? (\n                          <span className=\"badge badge-success\">Active</span>\n                        ) : (\n                          <span className=\"badge badge-danger\">Inactive</span>\n                        )}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2\">\n                        <button\n                          onClick={() => handleOpenModal(employee)}\n                          className=\"text-blue-600 hover:text-blue-900\"\n                          title=\"Edit\"\n                        >\n                          <PencilIcon className=\"h-5 w-5\" />\n                        </button>\n                        {employee.is_active ? (\n                          <button\n                            onClick={() => handleDelete(employee)}\n                            className=\"text-red-600 hover:text-red-900\"\n                            title=\"Deactivate\"\n                          >\n                            <TrashIcon className=\"h-5 w-5\" />\n                          </button>\n                        ) : (\n                          <button\n                            onClick={() => handleActivate(employee)}\n                            className=\"text-green-600 hover:text-green-900\"\n                            title=\"Activate\"\n                          >\n                            <CheckCircleIcon className=\"h-5 w-5\" />\n                          </button>\n                        )}\n                      </td>\n                    </tr>\n                  ))\n                )}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n\n      {/* Add/Edit Modal */}\n      {showModal && (\n        <div className=\"modal-overlay\">\n          <div className=\"modal-content max-w-2xl\">\n            <div className=\"p-6 border-b border-gray-200\">\n              <h2 className=\"text-2xl font-bold text-gray-900\">\n                {editingEmployee ? 'Edit Employee' : 'Add New Employee'}\n              </h2>\n            </div>\n\n            <form onSubmit={handleSubmit} className=\"p-6 space-y-6\">\n              {/* Basic Info */}\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Basic Information</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"form-label\">Full Name *</label>\n                    <input\n                      type=\"text\"\n                      value={formData.full_name}\n                      onChange={(e) => setFormData({ ...formData, full_name: e.target.value })}\n                      className=\"form-input\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"form-label\">Username *</label>\n                    <input\n                      type=\"text\"\n                      value={formData.username}\n                      onChange={(e) => setFormData({ ...formData, username: e.target.value })}\n                      className=\"form-input\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"form-label\">\n                      Password {!editingEmployee && '*'}\n                    </label>\n                    <input\n                      type=\"password\"\n                      value={formData.password}\n                      onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                      className=\"form-input\"\n                      placeholder={editingEmployee ? 'Leave blank to keep current' : ''}\n                      required={!editingEmployee}\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"form-label\">Role *</label>\n                    <select\n                      value={formData.role}\n                      onChange={(e) => setFormData({ ...formData, role: e.target.value })}\n                      className=\"form-input\"\n                      required\n                    >\n                      <option value=\"cashier\">Cashier</option>\n                      <option value=\"waiter\">Waiter</option>\n                      <option value=\"kitchen\">Kitchen</option>\n                      <option value=\"manager\">Manager</option>\n                      <option value=\"admin\">Admin</option>\n                    </select>\n                  </div>\n\n                  <div>\n                    <label className=\"form-label\">PIN (4 digits)</label>\n                    <input\n                      type=\"text\"\n                      maxLength=\"4\"\n                      value={formData.pin}\n                      onChange={(e) => setFormData({ ...formData, pin: e.target.value.replace(/\\D/g, '') })}\n                      className=\"form-input\"\n                      placeholder=\"1234\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"form-label\">Hire Date</label>\n                    <input\n                      type=\"date\"\n                      value={formData.hire_date}\n                      onChange={(e) => setFormData({ ...formData, hire_date: e.target.value })}\n                      className=\"form-input\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Contact & Compensation */}\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Contact & Compensation</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"form-label\">Phone</label>\n                    <input\n                      type=\"tel\"\n                      value={formData.phone}\n                      onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                      className=\"form-input\"\n                      placeholder=\"+212 6XX XXX XXX\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"form-label\">Email</label>\n                    <input\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                      className=\"form-input\"\n                      placeholder=\"employee@example.com\"\n                    />\n                  </div>\n\n                  <div className=\"md:col-span-2\">\n                    <label className=\"form-label\">Monthly Salary (MAD)</label>\n                    <input\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={formData.salary}\n                      onChange={(e) => setFormData({ ...formData, salary: e.target.value })}\n                      className=\"form-input\"\n                      placeholder=\"0.00\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Actions */}\n              <div className=\"flex justify-end space-x-3 pt-4 border-t border-gray-200\">\n                <button\n                  type=\"button\"\n                  onClick={handleCloseModal}\n                  className=\"btn-outline\"\n                  disabled={loading}\n                >\n                  Cancel\n                </button>\n                <button\n                  type=\"submit\"\n                  className=\"btn-primary\"\n                  disabled={loading}\n                >\n                  {loading ? 'Saving...' : editingEmployee ? 'Update Employee' : 'Add Employee'}\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default EmployeesPage\n","size_bytes":20813},"server/src/routes/employees.js":{"content":"const express = require('express');\nconst router = express.Router();\nconst bcrypt = require('bcrypt');\nconst { db } = require('../database/init');\nconst { authenticateToken, authorize } = require('../middleware/auth');\nconst { logger } = require('../middleware/errorHandler');\n\nrouter.get('/', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n\n    const employees = await db('users')\n      .select(\n        'id',\n        'username',\n        'full_name',\n        'role',\n        'pin',\n        'salary',\n        'phone',\n        'email',\n        'hire_date',\n        'is_active',\n        'branch_id',\n        'created_at'\n      )\n      .where({ branch_id: branchId })\n      .orderBy('created_at', 'desc');\n\n    res.json({\n      success: true,\n      employees\n    });\n  } catch (error) {\n    logger.error('Failed to fetch employees:', error);\n    res.status(500).json({ error: 'Failed to fetch employees' });\n  }\n});\n\nrouter.get('/:id', authenticateToken, authorize('admin', 'manager'), async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n    \n    const employee = await db('users')\n      .select(\n        'id',\n        'username',\n        'full_name',\n        'role',\n        'pin',\n        'salary',\n        'phone',\n        'email',\n        'hire_date',\n        'is_active',\n        'branch_id',\n        'created_at'\n      )\n      .where({ id, branch_id: branchId })\n      .first();\n\n    if (!employee) {\n      return res.status(404).json({ error: 'Employee not found' });\n    }\n\n    res.json({\n      success: true,\n      employee\n    });\n  } catch (error) {\n    logger.error('Failed to fetch employee:', error);\n    res.status(500).json({ error: 'Failed to fetch employee' });\n  }\n});\n\nrouter.post('/', authenticateToken, authorize('admin'), async (req, res) => {\n  try {\n    const {\n      username,\n      password,\n      full_name,\n      role,\n      pin,\n      salary,\n      phone,\n      email,\n      hire_date\n    } = req.body;\n\n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n\n    if (!username || !password || !full_name || !role) {\n      return res.status(400).json({ error: 'Missing required fields' });\n    }\n\n    const existingUser = await db('users')\n      .where({ username })\n      .orWhere({ pin })\n      .first();\n\n    if (existingUser) {\n      if (existingUser.username === username) {\n        return res.status(400).json({ error: 'Username already exists' });\n      }\n      if (existingUser.pin === pin) {\n        return res.status(400).json({ error: 'PIN already in use' });\n      }\n    }\n\n    const password_hash = await bcrypt.hash(password, 12);\n\n    const [employeeId] = await db('users').insert({\n      username,\n      password_hash,\n      full_name,\n      role,\n      pin: pin || null,\n      salary: salary || null,\n      phone: phone || null,\n      email: email || null,\n      hire_date: hire_date || new Date().toISOString().split('T')[0],\n      is_active: true,\n      branch_id: branchId\n    });\n\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'CREATE_EMPLOYEE',\n      meta: JSON.stringify({ employeeId, username, full_name, role, branchId })\n    });\n\n    logger.info(`Employee ${username} created by ${req.user.username}`);\n\n    res.status(201).json({\n      success: true,\n      message: 'Employee created successfully',\n      employeeId\n    });\n  } catch (error) {\n    logger.error('Failed to create employee:', error);\n    res.status(500).json({ error: 'Failed to create employee' });\n  }\n});\n\nrouter.put('/:id', authenticateToken, authorize('admin'), async (req, res) => {\n  try {\n    const { id } = req.params;\n    const {\n      username,\n      password,\n      full_name,\n      role,\n      pin,\n      salary,\n      phone,\n      email,\n      hire_date,\n      is_active\n    } = req.body;\n\n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n\n    const employee = await db('users').where({ id, branch_id: branchId }).first();\n    \n    if (!employee) {\n      return res.status(404).json({ error: 'Employee not found' });\n    }\n\n    if (username && username !== employee.username) {\n      const existingUsername = await db('users')\n        .where({ username })\n        .whereNot({ id })\n        .first();\n      \n      if (existingUsername) {\n        return res.status(400).json({ error: 'Username already exists' });\n      }\n    }\n\n    if (pin && pin !== employee.pin) {\n      const existingPin = await db('users')\n        .where({ pin })\n        .whereNot({ id })\n        .first();\n      \n      if (existingPin) {\n        return res.status(400).json({ error: 'PIN already in use' });\n      }\n    }\n\n    const updateData = {\n      username: username || employee.username,\n      full_name: full_name || employee.full_name,\n      role: role || employee.role,\n      pin: pin !== undefined ? pin : employee.pin,\n      salary: salary !== undefined ? salary : employee.salary,\n      phone: phone !== undefined ? phone : employee.phone,\n      email: email !== undefined ? email : employee.email,\n      hire_date: hire_date || employee.hire_date,\n      is_active: is_active !== undefined ? is_active : employee.is_active\n    };\n\n    if (password) {\n      updateData.password_hash = await bcrypt.hash(password, 12);\n    }\n\n    await db('users')\n      .where({ id })\n      .update(updateData);\n\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'UPDATE_EMPLOYEE',\n      meta: JSON.stringify({ employeeId: id, changes: updateData, branchId })\n    });\n\n    logger.info(`Employee ${id} updated by ${req.user.username}`);\n\n    res.json({\n      success: true,\n      message: 'Employee updated successfully'\n    });\n  } catch (error) {\n    logger.error('Failed to update employee:', error);\n    res.status(500).json({ error: 'Failed to update employee' });\n  }\n});\n\nrouter.delete('/:id', authenticateToken, authorize('admin'), async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n\n    if (parseInt(id) === req.user.id) {\n      return res.status(400).json({ error: 'Cannot delete your own account' });\n    }\n\n    const employee = await db('users').where({ id, branch_id: branchId }).first();\n    \n    if (!employee) {\n      return res.status(404).json({ error: 'Employee not found' });\n    }\n\n    await db('users')\n      .where({ id })\n      .update({ is_active: false });\n\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'DELETE_EMPLOYEE',\n      meta: JSON.stringify({ employeeId: id, username: employee.username, branchId })\n    });\n\n    logger.info(`Employee ${id} deactivated by ${req.user.username}`);\n\n    res.json({\n      success: true,\n      message: 'Employee deactivated successfully'\n    });\n  } catch (error) {\n    logger.error('Failed to delete employee:', error);\n    res.status(500).json({ error: 'Failed to delete employee' });\n  }\n});\n\nrouter.post('/:id/activate', authenticateToken, authorize('admin'), async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    // Use authenticated user's branch_id for security\n    const branchId = req.user.branch_id;\n    \n    if (!branchId) {\n      return res.status(400).json({ error: 'User is not assigned to a branch' });\n    }\n\n    const employee = await db('users').where({ id, branch_id: branchId }).first();\n    \n    if (!employee) {\n      return res.status(404).json({ error: 'Employee not found' });\n    }\n\n    await db('users')\n      .where({ id })\n      .update({ is_active: true });\n\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'ACTIVATE_EMPLOYEE',\n      meta: JSON.stringify({ employeeId: id, username: employee.username, branchId })\n    });\n\n    logger.info(`Employee ${id} activated by ${req.user.username}`);\n\n    res.json({\n      success: true,\n      message: 'Employee activated successfully'\n    });\n  } catch (error) {\n    logger.error('Failed to activate employee:', error);\n    res.status(500).json({ error: 'Failed to activate employee' });\n  }\n});\n\nmodule.exports = router;\n","size_bytes":8897},"server/src/routes/restaurants.js":{"content":"const express = require('express');\nconst router = express.Router();\nconst bcrypt = require('bcrypt');\nconst { db } = require('../database/init');\nconst { authenticateToken, authorize } = require('../middleware/auth');\nconst { logger } = require('../middleware/errorHandler');\n\n// Get all restaurants for an owner\nrouter.get('/', authenticateToken, authorize('owner'), async (req, res) => {\n  try {\n    const restaurants = await db('branches')\n      .select(\n        'branches.*',\n        db.raw('COUNT(DISTINCT users.id) as employee_count'),\n        db.raw('COUNT(DISTINCT tables.id) as table_count'),\n        db.raw('COUNT(DISTINCT menu_items.id) as menu_item_count')\n      )\n      .leftJoin('users', 'branches.id', 'users.branch_id')\n      .leftJoin('tables', 'branches.id', 'tables.branch_id')\n      .leftJoin('menu_items', 'branches.id', 'menu_items.branch_id')\n      .where('branches.owner_id', req.user.id)\n      .groupBy('branches.id')\n      .orderBy('branches.created_at', 'desc');\n\n    // Parse settings JSON\n    const restaurantsWithSettings = restaurants.map(r => ({\n      ...r,\n      settings: r.settings ? JSON.parse(r.settings) : {}\n    }));\n\n    res.json(restaurantsWithSettings);\n  } catch (error) {\n    logger.error('Error fetching restaurants:', error);\n    res.status(500).json({ error: 'Failed to fetch restaurants' });\n  }\n});\n\n// Get activity logs (owner only) - MUST be before /:id route\nrouter.get('/logs', authenticateToken, authorize('owner'), async (req, res) => {\n  try {\n    const { limit = 100 } = req.query;\n    \n    // Get all branches owned by this user\n    const branches = await db('branches')\n      .select('id')\n      .where('owner_id', req.user.id);\n    \n    const branchIds = branches.map(b => b.id);\n\n    // Get audit logs for all owned branches\n    const logs = await db('audit_logs')\n      .select(\n        'audit_logs.*',\n        'users.username',\n        'users.full_name',\n        'branches.name as branch_name'\n      )\n      .leftJoin('users', 'audit_logs.user_id', 'users.id')\n      .leftJoin('branches', 'users.branch_id', 'branches.id')\n      .whereIn('users.branch_id', branchIds)\n      .orWhere('audit_logs.user_id', req.user.id)\n      .orderBy('audit_logs.created_at', 'desc')\n      .limit(parseInt(limit));\n\n    res.json({ logs });\n  } catch (error) {\n    logger.error('Error fetching activity logs:', error);\n    res.status(500).json({ error: 'Failed to fetch logs' });\n  }\n});\n\n// Get single restaurant details (owner/admin/manager only)\nrouter.get('/:id', authenticateToken, authorize('owner', 'admin', 'manager'), async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    const restaurant = await db('branches')\n      .select('branches.*')\n      .where('branches.id', id)\n      .first();\n\n    if (!restaurant) {\n      return res.status(404).json({ error: 'Restaurant not found' });\n    }\n\n    // Check authorization\n    if (req.user.role === 'owner' && restaurant.owner_id !== req.user.id) {\n      return res.status(403).json({ error: 'Access denied' });\n    }\n    \n    // Admin/manager can only view their own restaurant\n    if (['admin', 'manager'].includes(req.user.role) && restaurant.id !== req.user.branch_id) {\n      return res.status(403).json({ error: 'Access denied' });\n    }\n\n    // Get detailed stats\n    const stats = await db('branches')\n      .select(\n        db.raw('COUNT(DISTINCT users.id) as employee_count'),\n        db.raw('COUNT(DISTINCT tables.id) as table_count'),\n        db.raw('COUNT(DISTINCT menu_items.id) as menu_item_count'),\n        db.raw('COUNT(DISTINCT orders.id) as total_orders'),\n        db.raw('SUM(CASE WHEN orders.created_at >= DATE(\"now\", \"-30 days\") THEN orders.total ELSE 0 END) as monthly_revenue')\n      )\n      .leftJoin('users', 'branches.id', 'users.branch_id')\n      .leftJoin('tables', 'branches.id', 'tables.branch_id')\n      .leftJoin('menu_items', 'branches.id', 'menu_items.branch_id')\n      .leftJoin('orders', 'branches.id', 'orders.branch_id')\n      .where('branches.id', id)\n      .first();\n\n    res.json({\n      restaurant: {\n        ...restaurant,\n        settings: restaurant.settings ? JSON.parse(restaurant.settings) : {},\n        stats\n      }\n    });\n  } catch (error) {\n    logger.error('Error fetching restaurant:', error);\n    res.status(500).json({ error: 'Failed to fetch restaurant' });\n  }\n});\n\n// Create new restaurant (owner only)\nrouter.post('/', authenticateToken, authorize('owner'), async (req, res) => {\n  try {\n    const { name, code, address, phone, email, website, description, logo_url, settings, isActive, is_active, createAdmin, adminEmployee } = req.body;\n\n    // Validate required fields\n    if (!name || !code) {\n      return res.status(400).json({ error: 'Name and code are required' });\n    }\n\n    // Check if code already exists\n    const existing = await db('branches').where({ code }).first();\n    if (existing) {\n      return res.status(400).json({ error: 'Restaurant code already exists' });\n    }\n\n    // If creating admin, validate admin data\n    if (createAdmin && adminEmployee) {\n      if (!adminEmployee.username || !adminEmployee.password || !adminEmployee.full_name) {\n        return res.status(400).json({ error: 'Admin username, password, and full name are required' });\n      }\n\n      // Check if username already exists\n      const existingUser = await db('users').where({ username: adminEmployee.username }).first();\n      if (existingUser) {\n        return res.status(400).json({ error: 'Admin username already exists' });\n      }\n    }\n\n    // Create restaurant\n    const [id] = await db('branches').insert({\n      name,\n      code: code.toUpperCase(),\n      address,\n      phone,\n      email,\n      website,\n      description,\n      logo_url,\n      owner_id: req.user.id,\n      settings: settings ? JSON.stringify(settings) : JSON.stringify({\n        currency: 'MAD',\n        tax_rate: 10,\n        service_charge: 5,\n        timezone: 'Africa/Casablanca',\n        language: 'en'\n      }),\n      is_active: isActive !== undefined ? isActive : (is_active !== undefined ? is_active : true)\n    });\n\n    // Create default categories for new restaurant\n    await db('categories').insert([\n      { branch_id: id, name: 'Appetizers', position: 1 },\n      { branch_id: id, name: 'Main Courses', position: 2 },\n      { branch_id: id, name: 'Desserts', position: 3 },\n      { branch_id: id, name: 'Beverages', position: 4 }\n    ]);\n\n    // Create admin employee if requested\n    if (createAdmin && adminEmployee) {\n      const hashedPassword = await bcrypt.hash(adminEmployee.password, 10);\n      const [userId] = await db('users').insert({\n        username: adminEmployee.username,\n        password: hashedPassword,\n        full_name: adminEmployee.full_name,\n        email: adminEmployee.email || null,\n        phone: adminEmployee.phone || null,\n        role: 'admin',\n        branch_id: id,\n        is_active: true\n      });\n\n      logger.info(`Created admin user ${adminEmployee.username} for restaurant ${name}`);\n\n      // Log admin creation\n      await db('audit_logs').insert({\n        user_id: req.user.id,\n        action: 'CREATE_EMPLOYEE',\n        meta: JSON.stringify({ employee_id: userId, username: adminEmployee.username, role: 'admin', branch_id: id })\n      });\n    }\n\n    // Log the action\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'CREATE_RESTAURANT',\n      meta: JSON.stringify({ restaurant_id: id, name, code })\n    });\n\n    logger.info(`Owner ${req.user.username} created restaurant: ${name} (${code})`);\n\n    const restaurant = await db('branches').where({ id }).first();\n    res.status(201).json({\n      ...restaurant,\n      settings: JSON.parse(restaurant.settings)\n    });\n  } catch (error) {\n    logger.error('Error creating restaurant:', error);\n    res.status(500).json({ error: 'Failed to create restaurant' });\n  }\n});\n\n// Update restaurant (owner/admin only - manager cannot modify)\nrouter.put('/:id', authenticateToken, authorize('owner', 'admin'), async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { name, code, address, phone, email, website, description, logo_url, settings, is_active, isActive } = req.body;\n\n    const restaurant = await db('branches').where({ id }).first();\n    if (!restaurant) {\n      return res.status(404).json({ error: 'Restaurant not found' });\n    }\n\n    // Check authorization\n    if (req.user.role === 'owner' && restaurant.owner_id !== req.user.id) {\n      return res.status(403).json({ error: 'Access denied' });\n    }\n    \n    // Admin can only update their own restaurant and limited fields\n    if (req.user.role === 'admin' && restaurant.id !== req.user.branch_id) {\n      return res.status(403).json({ error: 'Access denied' });\n    }\n\n    const updates = {};\n    if (name) updates.name = name;\n    if (address !== undefined) updates.address = address;\n    if (phone !== undefined) updates.phone = phone;\n    if (email !== undefined) updates.email = email;\n    if (website !== undefined) updates.website = website;\n    if (description !== undefined) updates.description = description;\n    if (logo_url !== undefined) updates.logo_url = logo_url;\n    \n    // Only owner can change code and active status\n    if (req.user.role === 'owner') {\n      if (code) updates.code = code.toUpperCase();\n      // Handle both isActive and is_active\n      if (isActive !== undefined) updates.is_active = isActive;\n      else if (is_active !== undefined) updates.is_active = is_active;\n    }\n    \n    if (settings) {\n      updates.settings = JSON.stringify(settings);\n    }\n\n    await db('branches').where({ id }).update(updates);\n\n    // Log the action\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'UPDATE_RESTAURANT',\n      meta: JSON.stringify({ restaurant_id: id, updates })\n    });\n\n    logger.info(`User ${req.user.username} updated restaurant ${id}`);\n\n    const updated = await db('branches').where({ id }).first();\n    res.json({\n      ...updated,\n      settings: updated.settings ? JSON.parse(updated.settings) : {}\n    });\n  } catch (error) {\n    logger.error('Error updating restaurant:', error);\n    res.status(500).json({ error: 'Failed to update restaurant' });\n  }\n});\n\n// Deactivate restaurant (owner only)\nrouter.delete('/:id', authenticateToken, authorize('owner'), async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const restaurant = await db('branches').where({ id }).first();\n    if (!restaurant) {\n      return res.status(404).json({ error: 'Restaurant not found' });\n    }\n\n    if (restaurant.owner_id !== req.user.id) {\n      return res.status(403).json({ error: 'Access denied' });\n    }\n\n    // Soft delete - just deactivate\n    await db('branches').where({ id }).update({ is_active: false });\n\n    // Log the action\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'DEACTIVATE_RESTAURANT',\n      meta: JSON.stringify({ restaurant_id: id, name: restaurant.name })\n    });\n\n    logger.info(`Owner ${req.user.username} deactivated restaurant ${id}`);\n\n    res.json({ message: 'Restaurant deactivated successfully' });\n  } catch (error) {\n    logger.error('Error deactivating restaurant:', error);\n    res.status(500).json({ error: 'Failed to deactivate restaurant' });\n  }\n});\n\n// Activate restaurant (owner only)\nrouter.post('/:id/activate', authenticateToken, authorize('owner'), async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const restaurant = await db('branches').where({ id }).first();\n    if (!restaurant) {\n      return res.status(404).json({ error: 'Restaurant not found' });\n    }\n\n    if (restaurant.owner_id !== req.user.id) {\n      return res.status(403).json({ error: 'Access denied' });\n    }\n\n    await db('branches').where({ id }).update({ is_active: true });\n\n    // Log the action\n    await db('audit_logs').insert({\n      user_id: req.user.id,\n      action: 'ACTIVATE_RESTAURANT',\n      meta: JSON.stringify({ restaurant_id: id, name: restaurant.name })\n    });\n\n    logger.info(`Owner ${req.user.username} activated restaurant ${id}`);\n\n    res.json({ message: 'Restaurant activated successfully' });\n  } catch (error) {\n    logger.error('Error activating restaurant:', error);\n    res.status(500).json({ error: 'Failed to activate restaurant' });\n  }\n});\n\n// Get restaurant dashboard stats (for owner/admin/manager dashboard)\nrouter.get('/:id/dashboard', authenticateToken, authorize('owner', 'admin', 'manager'), async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const restaurant = await db('branches').where({ id }).first();\n    if (!restaurant) {\n      return res.status(404).json({ error: 'Restaurant not found' });\n    }\n\n    // Check authorization\n    if (req.user.role === 'owner' && restaurant.owner_id !== req.user.id) {\n      return res.status(403).json({ error: 'Access denied' });\n    }\n    \n    // Admin/manager can only view their own restaurant\n    if (['admin', 'manager'].includes(req.user.role) && restaurant.id !== req.user.branch_id) {\n      return res.status(403).json({ error: 'Access denied' });\n    }\n\n    // Get comprehensive stats\n    const stats = {\n      // Today's stats\n      todayOrders: await db('orders')\n        .where('branch_id', id)\n        .whereRaw('DATE(created_at) = DATE(\"now\")')\n        .count('id as count')\n        .first()\n        .then(r => r.count || 0),\n      \n      todayRevenue: await db('orders')\n        .where('branch_id', id)\n        .where('payment_status', 'PAID')\n        .whereRaw('DATE(created_at) = DATE(\"now\")')\n        .sum('total as total')\n        .first()\n        .then(r => parseFloat(r.total || 0)),\n      \n      // Monthly stats\n      monthlyOrders: await db('orders')\n        .where('branch_id', id)\n        .whereRaw('created_at >= DATE(\"now\", \"-30 days\")')\n        .count('id as count')\n        .first()\n        .then(r => r.count || 0),\n      \n      monthlyRevenue: await db('orders')\n        .where('branch_id', id)\n        .where('payment_status', 'PAID')\n        .whereRaw('created_at >= DATE(\"now\", \"-30 days\")')\n        .sum('total as total')\n        .first()\n        .then(r => parseFloat(r.total || 0)),\n      \n      // Employee counts\n      activeEmployees: await db('users')\n        .where('branch_id', id)\n        .where('is_active', true)\n        .count('id as count')\n        .first()\n        .then(r => r.count || 0),\n      \n      // Current pending orders\n      pendingOrders: await db('orders')\n        .where('branch_id', id)\n        .whereIn('status', ['PENDING', 'PREPARING', 'READY'])\n        .count('id as count')\n        .first()\n        .then(r => r.count || 0),\n      \n      // Tables and menu\n      totalTables: await db('tables')\n        .where('branch_id', id)\n        .count('id as count')\n        .first()\n        .then(r => r.count || 0),\n      \n      menuItems: await db('menu_items')\n        .where('branch_id', id)\n        .where('is_available', true)\n        .count('id as count')\n        .first()\n        .then(r => r.count || 0)\n    };\n\n    res.json(stats);\n  } catch (error) {\n    logger.error('Error fetching restaurant dashboard:', error);\n    res.status(500).json({ error: 'Failed to fetch dashboard stats' });\n  }\n});\n\n// Get detailed analytics for a restaurant\nrouter.get('/:id/analytics', authenticateToken, authorize('owner', 'admin', 'manager'), async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    const restaurant = await db('branches').where('id', id).first();\n    if (!restaurant) {\n      return res.status(404).json({ error: 'Restaurant not found' });\n    }\n\n    // Check authorization\n    if (req.user.role === 'owner' && restaurant.owner_id !== req.user.id) {\n      return res.status(403).json({ error: 'Access denied' });\n    }\n    if (['admin', 'manager'].includes(req.user.role) && restaurant.id !== req.user.branch_id) {\n      return res.status(403).json({ error: 'Access denied' });\n    }\n\n    // Get comprehensive analytics\n    const analytics = {\n      // Total revenue\n      totalRevenue: await db('orders')\n        .where('branch_id', id)\n        .whereIn('status', ['CONFIRMED', 'PREPARING', 'READY', 'SERVED', 'COMPLETED'])\n        .sum('total as total')\n        .first()\n        .then(r => r.total || 0),\n      \n      // Total orders\n      totalOrders: await db('orders')\n        .where('branch_id', id)\n        .count('id as count')\n        .first()\n        .then(r => r.count || 0),\n      \n      // Total menu items\n      totalMenuItems: await db('menu_items')\n        .where('branch_id', id)\n        .count('id as count')\n        .first()\n        .then(r => r.count || 0),\n      \n      // Total employees\n      totalEmployees: await db('users')\n        .where('branch_id', id)\n        .count('id as count')\n        .first()\n        .then(r => r.count || 0),\n      \n      // Recent orders (last 10)\n      recentOrders: await db('orders')\n        .select('orders.*')\n        .where('branch_id', id)\n        .orderBy('created_at', 'desc')\n        .limit(10),\n      \n      // Top selling products\n      topProducts: await db('order_items')\n        .select(\n          'menu_items.id',\n          'menu_items.name',\n          'menu_items.price',\n          'categories.name as category_name',\n          db.raw('COUNT(order_items.id) as total_sold'),\n          db.raw('SUM(order_items.quantity) as quantity_sold')\n        )\n        .leftJoin('menu_items', 'order_items.menu_item_id', 'menu_items.id')\n        .leftJoin('categories', 'menu_items.category_id', 'categories.id')\n        .leftJoin('orders', 'order_items.order_id', 'orders.id')\n        .where('menu_items.branch_id', id)\n        .groupBy('menu_items.id', 'menu_items.name', 'menu_items.price', 'categories.name')\n        .orderBy('quantity_sold', 'desc')\n        .limit(10),\n      \n      // Employees\n      employees: await db('users')\n        .select('id', 'full_name', 'role', 'email', 'is_active', 'hire_date')\n        .where('branch_id', id)\n        .orderBy('full_name'),\n      \n      // Inventory status\n      inventory: await db('stock_items')\n        .select('id', 'name', 'sku', 'quantity', 'min_threshold', 'unit')\n        .where('branch_id', id)\n        .orderBy('name')\n        .limit(20)\n    };\n\n    res.json(analytics);\n  } catch (error) {\n    logger.error('Error fetching restaurant analytics:', error);\n    res.status(500).json({ error: 'Failed to fetch analytics' });\n  }\n});\n\nmodule.exports = router;\n","size_bytes":18374},"frontend/src/pages/owner/OwnerDashboard.jsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { restaurantsAPI } from '../../services/api';\nimport { \n  FaStore, FaUsers, FaTable, FaUtensils, \n  FaChartLine, FaPlus, FaEdit, FaEye,\n  FaCheckCircle, FaTimesCircle, FaMoneyBillWave\n} from 'react-icons/fa';\n\nexport default function OwnerDashboard() {\n  const navigate = useNavigate();\n  const [restaurants, setRestaurants] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedRestaurant, setSelectedRestaurant] = useState(null);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n\n  useEffect(() => {\n    fetchRestaurants();\n  }, []);\n\n  const fetchRestaurants = async () => {\n    try {\n      setLoading(true);\n      const response = await restaurantsAPI.getRestaurants();\n      setRestaurants(response.data || []);\n    } catch (error) {\n      console.error('Error fetching restaurants:', error);\n      alert('Failed to load restaurants');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const calculateTotalStats = () => {\n    return restaurants.reduce((acc, r) => ({\n      totalEmployees: acc.totalEmployees + parseInt(r.employee_count || 0),\n      totalTables: acc.totalTables + parseInt(r.table_count || 0),\n      totalMenuItems: acc.totalMenuItems + parseInt(r.menu_item_count || 0),\n      activeRestaurants: acc.activeRestaurants + (r.is_active ? 1 : 0),\n    }), { totalEmployees: 0, totalTables: 0, totalMenuItems: 0, activeRestaurants: 0 });\n  };\n\n  const stats = calculateTotalStats();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-white mb-2 flex items-center gap-3\">\n            <FaStore className=\"text-purple-400\" />\n            Restaurant Portfolio\n          </h1>\n          <p className=\"text-gray-300\">\n            Manage all your restaurants from one central dashboard\n          </p>\n        </div>\n\n        {/* Overall Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <div className=\"bg-gradient-to-br from-purple-600 to-purple-800 rounded-2xl p-6 shadow-xl border border-purple-400/20\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-purple-200 text-sm font-medium mb-1\">Total Restaurants</p>\n                <p className=\"text-4xl font-bold text-white\">{restaurants.length}</p>\n                <p className=\"text-purple-300 text-xs mt-1\">\n                  {stats.activeRestaurants} active\n                </p>\n              </div>\n              <FaStore className=\"text-6xl text-purple-300/30\" />\n            </div>\n          </div>\n\n          <div className=\"bg-gradient-to-br from-blue-600 to-blue-800 rounded-2xl p-6 shadow-xl border border-blue-400/20\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-blue-200 text-sm font-medium mb-1\">Total Employees</p>\n                <p className=\"text-4xl font-bold text-white\">{stats.totalEmployees}</p>\n                <p className=\"text-blue-300 text-xs mt-1\">Across all locations</p>\n              </div>\n              <FaUsers className=\"text-6xl text-blue-300/30\" />\n            </div>\n          </div>\n\n          <div className=\"bg-gradient-to-br from-green-600 to-green-800 rounded-2xl p-6 shadow-xl border border-green-400/20\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-green-200 text-sm font-medium mb-1\">Total Tables</p>\n                <p className=\"text-4xl font-bold text-white\">{stats.totalTables}</p>\n                <p className=\"text-green-300 text-xs mt-1\">Available for service</p>\n              </div>\n              <FaTable className=\"text-6xl text-green-300/30\" />\n            </div>\n          </div>\n\n          <div className=\"bg-gradient-to-br from-orange-600 to-orange-800 rounded-2xl p-6 shadow-xl border border-orange-400/20\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-orange-200 text-sm font-medium mb-1\">Total Menu Items</p>\n                <p className=\"text-4xl font-bold text-white\">{stats.totalMenuItems}</p>\n                <p className=\"text-orange-300 text-xs mt-1\">Active items</p>\n              </div>\n              <FaUtensils className=\"text-6xl text-orange-300/30\" />\n            </div>\n          </div>\n        </div>\n\n        {/* Action Bar */}\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-2xl font-bold text-white\">Your Restaurants</h2>\n          <div className=\"flex gap-3\">\n            <button\n              onClick={() => navigate('/owner/logs')}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-xl hover:from-indigo-700 hover:to-purple-700 transition-all shadow-lg hover:shadow-xl transform hover:-translate-y-0.5\"\n            >\n              <FaChartLine />\n              <span>Activity Logs</span>\n            </button>\n            <button\n              onClick={() => navigate('/owner/restaurants/new')}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-xl hover:from-purple-700 hover:to-blue-700 transition-all shadow-lg hover:shadow-xl transform hover:-translate-y-0.5\"\n            >\n              <FaPlus />\n              <span>Add New Restaurant</span>\n            </button>\n          </div>\n        </div>\n\n        {/* Restaurants Grid */}\n        {loading ? (\n          <div className=\"text-center py-12\">\n            <div className=\"inline-block animate-spin rounded-full h-12 w-12 border-4 border-purple-500 border-t-transparent\"></div>\n            <p className=\"text-gray-300 mt-4\">Loading restaurants...</p>\n          </div>\n        ) : restaurants.length === 0 ? (\n          <div className=\"bg-white/5 backdrop-blur-sm rounded-2xl p-12 text-center border border-white/10\">\n            <FaStore className=\"text-6xl text-gray-500 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold text-white mb-2\">No Restaurants Yet</h3>\n            <p className=\"text-gray-400 mb-6\">Get started by creating your first restaurant</p>\n            <button\n              onClick={() => navigate('/owner/restaurants/new')}\n              className=\"px-6 py-3 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-xl hover:from-purple-700 hover:to-blue-700 transition-all\"\n            >\n              Create Restaurant\n            </button>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {restaurants.map((restaurant) => (\n              <div\n                key={restaurant.id}\n                className=\"bg-white/10 backdrop-blur-md rounded-2xl p-6 border border-white/20 hover:border-purple-400/50 transition-all hover:shadow-2xl hover:transform hover:-translate-y-1\"\n              >\n                {/* Restaurant Header */}\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <h3 className=\"text-xl font-bold text-white\">{restaurant.name}</h3>\n                      {restaurant.is_active ? (\n                        <FaCheckCircle className=\"text-green-400\" title=\"Active\" />\n                      ) : (\n                        <FaTimesCircle className=\"text-red-400\" title=\"Inactive\" />\n                      )}\n                    </div>\n                    <p className=\"text-sm font-mono text-purple-300\">{restaurant.code}</p>\n                  </div>\n                </div>\n\n                {/* Restaurant Details */}\n                <div className=\"space-y-2 mb-4\">\n                  {restaurant.address && (\n                    <p className=\"text-sm text-gray-300\">{restaurant.address}</p>\n                  )}\n                  {restaurant.phone && (\n                    <p className=\"text-sm text-gray-300\">📞 {restaurant.phone}</p>\n                  )}\n                  {restaurant.email && (\n                    <p className=\"text-sm text-gray-300\">📧 {restaurant.email}</p>\n                  )}\n                </div>\n\n                {/* Stats Grid */}\n                <div className=\"grid grid-cols-3 gap-3 mb-4\">\n                  <div className=\"bg-white/5 rounded-lg p-3 text-center\">\n                    <FaUsers className=\"text-blue-400 mx-auto mb-1\" />\n                    <p className=\"text-2xl font-bold text-white\">{restaurant.employee_count || 0}</p>\n                    <p className=\"text-xs text-gray-400\">Employees</p>\n                  </div>\n                  <div className=\"bg-white/5 rounded-lg p-3 text-center\">\n                    <FaTable className=\"text-green-400 mx-auto mb-1\" />\n                    <p className=\"text-2xl font-bold text-white\">{restaurant.table_count || 0}</p>\n                    <p className=\"text-xs text-gray-400\">Tables</p>\n                  </div>\n                  <div className=\"bg-white/5 rounded-lg p-3 text-center\">\n                    <FaUtensils className=\"text-orange-400 mx-auto mb-1\" />\n                    <p className=\"text-2xl font-bold text-white\">{restaurant.menu_item_count || 0}</p>\n                    <p className=\"text-xs text-gray-400\">Menu</p>\n                  </div>\n                </div>\n\n                {/* Actions */}\n                <div className=\"flex gap-2\">\n                  <button\n                    onClick={() => navigate(`/owner/restaurants/${restaurant.id}`)}\n                    className=\"flex-1 flex items-center justify-center gap-2 px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors\"\n                  >\n                    <FaEye />\n                    <span className=\"text-sm\">View</span>\n                  </button>\n                  <button\n                    onClick={() => navigate(`/owner/restaurants/${restaurant.id}/edit`)}\n                    className=\"flex-1 flex items-center justify-center gap-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors\"\n                  >\n                    <FaEdit />\n                    <span className=\"text-sm\">Edit</span>\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {/* Create Restaurant Modal */}\n        {showCreateModal && (\n          <div className=\"fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n            <div className=\"bg-gray-900 rounded-2xl p-6 max-w-2xl w-full border border-purple-500/30\">\n              <h2 className=\"text-2xl font-bold text-white mb-4\">Coming Soon</h2>\n              <p className=\"text-gray-300 mb-6\">\n                Restaurant creation form will be implemented next...\n              </p>\n              <button\n                onClick={() => setShowCreateModal(false)}\n                className=\"px-6 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors\"\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":11476},"server/src/migrations/20251024000001_multi_tenant_restaurants.js":{"content":"exports.up = function(knex) {\n  return knex.schema\n    // Enhance branches table to become full restaurants\n    .table('branches', table => {\n      table.integer('owner_id').unsigned();\n      table.string('phone');\n      table.string('email');\n      table.string('website');\n      table.text('description');\n      table.string('logo_url');\n      table.text('settings'); // JSON settings for restaurant-specific config\n      table.boolean('is_active').defaultTo(true);\n      table.foreign('owner_id').references('id').inTable('users');\n    })\n    \n    // Add restaurant/branch assignment to users (employees belong to a restaurant)\n    .table('users', table => {\n      table.integer('branch_id').unsigned();\n      table.string('email');\n      table.string('phone');\n      table.decimal('salary', 10, 2);\n      table.date('hire_date');\n      table.foreign('branch_id').references('id').inTable('branches');\n    });\n};\n\nexports.down = function(knex) {\n  return knex.schema\n    .table('users', table => {\n      table.dropForeign('branch_id');\n      table.dropColumn('branch_id');\n      table.dropColumn('email');\n      table.dropColumn('phone');\n      table.dropColumn('salary');\n      table.dropColumn('hire_date');\n    })\n    .table('branches', table => {\n      table.dropForeign('owner_id');\n      table.dropColumn('owner_id');\n      table.dropColumn('phone');\n      table.dropColumn('email');\n      table.dropColumn('website');\n      table.dropColumn('description');\n      table.dropColumn('logo_url');\n      table.dropColumn('settings');\n      table.dropColumn('is_active');\n    });\n};\n","size_bytes":1587},"DATABASE_SETUP.md":{"content":"# Database Configuration Guide\n\nThis project supports **SQLite**, **MySQL**, and **PostgreSQL**. Here's how to switch between them:\n\n---\n\n## 🟢 Option 1: PostgreSQL (Recommended for Cloud/Replit)\n\nPostgreSQL is ideal for production and cloud deployments. **Already configured on Replit!**\n\n### Configuration\n\nUpdate `server/.env`:\n\n```env\n# Change DB_TYPE to pg (or postgresql)\nDB_TYPE=pg\n\n# PostgreSQL connection (already set by Replit)\n# These variables are automatically available:\n# - DATABASE_URL\n# - PGHOST\n# - PGPORT\n# - PGUSER\n# - PGPASSWORD\n# - PGDATABASE\n```\n\nUpdate `server/knexfile.js` to use Replit's PostgreSQL:\n\n```javascript\ndevelopment: {\n  client: 'pg',\n  connection: process.env.DATABASE_URL || {\n    host: process.env.PGHOST,\n    port: process.env.PGPORT,\n    user: process.env.PGUSER,\n    password: process.env.PGPASSWORD,\n    database: process.env.PGDATABASE\n  },\n  migrations: {\n    directory: './src/migrations'\n  },\n  seeds: {\n    directory: './src/seeds'\n  }\n}\n```\n\n### Run Migrations & Seeds\n\n```bash\ncd server\nnpm run migrate\nnpm run seed\n```\n\n---\n\n## 🔵 Option 2: MySQL (For External MySQL Server)\n\nIf you have your own MySQL server (local or remote):\n\n### 1. Install MySQL Driver (Already installed: mysql2)\n\n```bash\ncd server\nnpm install mysql2\n```\n\n### 2. Update Configuration\n\nEdit `server/.env`:\n\n```env\n# Database Type\nDB_TYPE=mysql2\n\n# MySQL Connection Details\nDB_HOST=your-mysql-host.com      # e.g., localhost, db.example.com\nDB_PORT=3306                       # Default MySQL port\nDB_USER=your_username              # e.g., root, posq_user\nDB_PASSWORD=your_password          # Your MySQL password\nDB_NAME=posq                       # Database name\n```\n\n### 3. Create MySQL Database\n\nFirst, create a database in MySQL:\n\n```sql\nCREATE DATABASE posq CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER 'posq_user'@'%' IDENTIFIED BY 'your_password';\nGRANT ALL PRIVILEGES ON posq.* TO 'posq_user'@'%';\nFLUSH PRIVILEGES;\n```\n\n### 4. Run Migrations & Seeds\n\n```bash\ncd server\nnpm run migrate\nnpm run seed\n```\n\n---\n\n## ⚪ Option 3: SQLite (Current - Development Only)\n\nSQLite is already configured and works great for local development.\n\n**No external database server needed!**\n\n```env\nDB_TYPE=sqlite3\nSQLITE_PATH=./data/posq.db\n```\n\n---\n\n## 🚀 Quick Setup Commands\n\n### For PostgreSQL (Replit)\n```bash\ncd server\n\n# Update .env file\necho \"DB_TYPE=pg\" >> .env\n\n# Run migrations and seeds\nnpm run migrate\nnpm run seed\n\n# Restart server\nnpm start\n```\n\n### For MySQL (External Server)\n```bash\ncd server\n\n# Update .env with your MySQL credentials\nnano .env\n\n# Run migrations and seeds\nnpm run migrate\nnpm run seed\n\n# Restart server\nnpm start\n```\n\n---\n\n## 📊 Database Migration Commands\n\n```bash\n# Create a new migration\nnpm run migrate:make migration_name\n\n# Run all pending migrations\nnpm run migrate\n\n# Rollback last migration\nnpm run migrate:rollback\n\n# Run seeds\nnpm run seed\n```\n\n---\n\n## 🔍 Connection Testing\n\nTo test your database connection:\n\n```bash\ncd server\nnode -e \"require('./src/database/init').testConnection()\"\n```\n\n---\n\n## 📝 Environment Variables Reference\n\n### PostgreSQL\n- `DB_TYPE=pg` or `DB_TYPE=postgresql`\n- `DATABASE_URL` (Replit provides this automatically)\n- Or individual: `PGHOST`, `PGPORT`, `PGUSER`, `PGPASSWORD`, `PGDATABASE`\n\n### MySQL\n- `DB_TYPE=mysql2`\n- `DB_HOST` - MySQL server hostname\n- `DB_PORT` - MySQL port (default: 3306)\n- `DB_USER` - MySQL username\n- `DB_PASSWORD` - MySQL password\n- `DB_NAME` - Database name\n\n### SQLite\n- `DB_TYPE=sqlite3`\n- `SQLITE_PATH` - Path to SQLite file (default: `./data/posq.db`)\n\n---\n\n## ⚠️ Important Notes\n\n1. **Replit Users**: PostgreSQL is recommended and already set up for you!\n2. **Production**: Never use SQLite in production - use PostgreSQL or MySQL\n3. **Migrations**: Always run migrations after switching databases\n4. **Backup**: Backup your data before switching database types\n5. **Driver Installation**: \n   - PostgreSQL: `npm install pg`\n   - MySQL: `npm install mysql2`\n   - SQLite: `npm install sqlite3` (already included)\n\n---\n\n## 🎯 Recommended Database by Environment\n\n| Environment | Recommended Database | Why? |\n|------------|---------------------|------|\n| **Development (Local)** | SQLite | Simple, no setup required |\n| **Development (Replit)** | PostgreSQL | Free, managed, built-in |\n| **Staging** | PostgreSQL or MySQL | Production-like environment |\n| **Production** | PostgreSQL or MySQL | Scalable, reliable, concurrent |\n\n---\n\n## 🆘 Troubleshooting\n\n### Connection Error\n- Verify credentials in `.env`\n- Check if database server is running\n- Ensure database exists\n- Check firewall/security settings\n\n### Migration Error\n- Delete all tables and re-run migrations\n- Check migration files for syntax errors\n- Ensure database user has CREATE/ALTER permissions\n\n### Data Loss After Switch\n- Different databases = different data\n- Backup SQLite data before switching\n- Re-run seeds to populate test data\n","size_bytes":4963},"RESTAURANT_CREDENTIALS.md":{"content":"# Restaurant System Login Credentials\n\n## Owner Account (Multi-Restaurant Management)\n**Username**: `owner`  \n**Password**: `owner123`  \n**Access**: Owner Dashboard - Can manage all 5 restaurants\n\n---\n\n## Restaurant 1: Casa Downtown (MAIN)\n**Location**: 123 Boulevard Mohammed V, Casablanca, Morocco  \n**Code**: MAIN\n\n### Staff:\n- **Admin**: `admin` / `admin123`\n- **Manager**: `manager` / `manager123`\n- **Cashier**: `cashier` / `cashier123`\n\n---\n\n## Restaurant 2: Rabat Downtown (RBT)\n**Location**: 456 Avenue Hassan II, Rabat, Morocco  \n**Code**: RBT  \n**Email**: rabat@posq.com\n\n### Staff:\n- **Admin**: `admin2` / `admin123`\n\n---\n\n## Restaurant 3: Marrakech Medina (MRK)\n**Location**: 789 Jemaa el-Fnaa, Marrakech, Morocco  \n**Code**: MRK  \n**Email**: marrakech@posq.com  \n**Website**: https://marrakech.posq.com\n\n### Features:\n- Traditional Moroccan cuisine\n- 10 tables with QR codes\n- Sample menu items (Chicken Tagine, Lamb Couscous, etc.)\n- Stock inventory tracking\n\n### Staff:\n- **Admin**: `admin_mrk` / `admin123`\n- **Manager**: `manager_mrk` / `manager123`\n\n---\n\n## Restaurant 4: Tangier Seaside (TNG)\n**Location**: 321 Boulevard Pasteur, Tangier, Morocco  \n**Code**: TNG  \n**Email**: tangier@posq.com  \n**Website**: https://tangier.posq.com\n\n### Features:\n- Mediterranean fusion restaurant with ocean views\n- 10 tables with QR codes\n- Sample menu items\n- Stock inventory tracking\n\n### Staff:\n- **Admin**: `admin_tng` / `admin123`\n- **Manager**: `manager_tng` / `manager123`\n\n---\n\n## Restaurant 5: Fes Heritage (FES)\n**Location**: 555 Bab Boujloud, Fes, Morocco  \n**Code**: FES  \n**Email**: fes@posq.com  \n**Website**: https://fes.posq.com\n\n### Features:\n- Authentic Fassi cuisine in a restored riad\n- 10 tables with QR codes\n- Sample menu items\n- Stock inventory tracking\n\n### Staff:\n- **Admin**: `admin_fes` / `admin123`\n- **Manager**: `manager_fes` / `manager123`\n\n---\n\n## Quick Access Summary\n\n| Restaurant | Code | Admin Username | Admin Password |\n|------------|------|----------------|----------------|\n| Casa Downtown | MAIN | admin | admin123 |\n| Rabat Downtown | RBT | admin2 | admin123 |\n| Marrakech Medina | MRK | admin_mrk | admin123 |\n| Tangier Seaside | TNG | admin_tng | admin123 |\n| Fes Heritage | FES | admin_fes | admin123 |\n\n## Owner Dashboard Features\nLogin as `owner` / `owner123` to access:\n- View all 5 restaurants\n- Aggregate statistics (revenue, orders, employees)\n- Detailed analytics for each restaurant\n- Activity logs across all locations\n- Create/Edit/Deactivate restaurants\n\n---\n\n## Testing Multi-Tenant Security\nEach restaurant's data is completely isolated. You can test this by:\n1. Login as `admin_mrk` - You'll only see Marrakech data\n2. Login as `admin_tng` - You'll only see Tangier data\n3. Login as `owner` - You'll see all restaurants\n\n---\n\n## Customer QR Code Access\nEach restaurant has 10 tables (T1-T10). Customers can scan QR codes to order:\n- Format: `/menu?table=T1&branch=MRK`\n- No authentication required for customers\n- Orders are linked to specific tables and branches\n","size_bytes":3030},"frontend/src/pages/owner/ActivityLogs.jsx":{"content":"import { useState, useEffect } from 'react';\nimport { Search, Filter, Calendar, User, Activity } from 'lucide-react';\nimport api from '../../services/api';\n\nexport default function ActivityLogs() {\n  const [logs, setLogs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterAction, setFilterAction] = useState('all');\n  const [filterDate, setFilterDate] = useState('');\n\n  useEffect(() => {\n    loadLogs();\n  }, []);\n\n  const loadLogs = async () => {\n    try {\n      setLoading(true);\n      const response = await api.get('/api/restaurants/logs', {\n        params: {\n          limit: 100\n        }\n      });\n      setLogs(response.data.logs || []);\n    } catch (error) {\n      console.error('Failed to load activity logs:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filteredLogs = logs.filter(log => {\n    const matchesSearch = !searchTerm || \n      log.action.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      log.username?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      log.branch_name?.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesAction = filterAction === 'all' || log.action.includes(filterAction.toUpperCase());\n    \n    const matchesDate = !filterDate || \n      new Date(log.created_at).toISOString().split('T')[0] === filterDate;\n\n    return matchesSearch && matchesAction && matchesDate;\n  });\n\n  const actionColors = {\n    LOGIN: 'bg-blue-100 text-blue-700',\n    LOGOUT: 'bg-gray-100 text-gray-700',\n    CREATE: 'bg-green-100 text-green-700',\n    UPDATE: 'bg-yellow-100 text-yellow-700',\n    DELETE: 'bg-red-100 text-red-700',\n    RESTAURANT: 'bg-purple-100 text-purple-700'\n  };\n\n  const getActionColor = (action) => {\n    for (const [key, color] of Object.entries(actionColors)) {\n      if (action.includes(key)) return color;\n    }\n    return 'bg-slate-100 text-slate-700';\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 p-4 md:p-8\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-slate-900 mb-2\">Activity Logs</h1>\n          <p className=\"text-slate-600\">Track all actions across your restaurants</p>\n        </div>\n\n        {/* Filters */}\n        <div className=\"bg-white rounded-2xl shadow-xl p-6 mb-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-5 h-5\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search logs...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-3 rounded-xl border border-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n\n            <div className=\"relative\">\n              <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-5 h-5\" />\n              <select\n                value={filterAction}\n                onChange={(e) => setFilterAction(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-3 rounded-xl border border-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent appearance-none\"\n              >\n                <option value=\"all\">All Actions</option>\n                <option value=\"LOGIN\">Login</option>\n                <option value=\"CREATE\">Create</option>\n                <option value=\"UPDATE\">Update</option>\n                <option value=\"DELETE\">Delete</option>\n                <option value=\"RESTAURANT\">Restaurant</option>\n              </select>\n            </div>\n\n            <div className=\"relative\">\n              <Calendar className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-5 h-5\" />\n              <input\n                type=\"date\"\n                value={filterDate}\n                onChange={(e) => setFilterDate(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-3 rounded-xl border border-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n          </div>\n\n          <div className=\"mt-4 flex items-center justify-between text-sm\">\n            <span className=\"text-slate-600\">\n              Showing {filteredLogs.length} of {logs.length} logs\n            </span>\n            {(searchTerm || filterAction !== 'all' || filterDate) && (\n              <button\n                onClick={() => {\n                  setSearchTerm('');\n                  setFilterAction('all');\n                  setFilterDate('');\n                }}\n                className=\"text-blue-600 hover:text-blue-700 font-medium\"\n              >\n                Clear Filters\n              </button>\n            )}\n          </div>\n        </div>\n\n        {/* Logs List */}\n        <div className=\"bg-white rounded-2xl shadow-xl overflow-hidden\">\n          {loading ? (\n            <div className=\"p-12 text-center\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n              <p className=\"text-slate-600 mt-4\">Loading activity logs...</p>\n            </div>\n          ) : filteredLogs.length === 0 ? (\n            <div className=\"p-12 text-center\">\n              <Activity className=\"w-16 h-16 text-slate-300 mx-auto mb-4\" />\n              <p className=\"text-slate-600\">No activity logs found</p>\n            </div>\n          ) : (\n            <div className=\"divide-y divide-slate-200\">\n              {filteredLogs.map((log) => (\n                <div key={log.id} className=\"p-6 hover:bg-slate-50 transition-colors\">\n                  <div className=\"flex items-start justify-between gap-4\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3 mb-2\">\n                        <span className={`px-3 py-1 rounded-full text-xs font-medium ${getActionColor(log.action)}`}>\n                          {log.action}\n                        </span>\n                        {log.branch_name && (\n                          <span className=\"text-sm text-slate-600 flex items-center gap-1\">\n                            <Activity className=\"w-4 h-4\" />\n                            {log.branch_name}\n                          </span>\n                        )}\n                      </div>\n                      \n                      <div className=\"flex items-center gap-2 text-sm text-slate-600 mb-1\">\n                        <User className=\"w-4 h-4\" />\n                        <span className=\"font-medium\">{log.username || 'System'}</span>\n                        <span>•</span>\n                        <span>{new Date(log.created_at).toLocaleString()}</span>\n                      </div>\n\n                      {log.meta && (\n                        <div className=\"mt-2 text-sm text-slate-500 bg-slate-50 p-3 rounded-lg\">\n                          <pre className=\"whitespace-pre-wrap font-mono text-xs\">\n                            {typeof log.meta === 'string' ? log.meta : JSON.stringify(JSON.parse(log.meta), null, 2)}\n                          </pre>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7527},"frontend/src/components/layout/OwnerLayout.jsx":{"content":"import { useState } from 'react';\nimport { Outlet, Link, useNavigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { \n  FaStore, FaSignOutAlt, FaBars, FaTimes, \n  FaUser, FaChartBar, FaCog\n} from 'react-icons/fa';\n\nexport default function OwnerLayout() {\n  const { user, logout } = useAuth();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  const handleLogout = () => {\n    logout();\n    navigate('/admin/login');\n  };\n\n  const navItems = [\n    { \n      path: '/owner/dashboard', \n      label: 'Restaurants', \n      icon: FaStore \n    },\n    // Future nav items can be added here\n  ];\n\n  const isActive = (path) => location.pathname === path || location.pathname.startsWith(path + '/');\n\n  return (\n    <div className=\"flex h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 overflow-hidden\">\n      {/* Sidebar */}\n      <aside className={`\n        fixed md:static inset-y-0 left-0 z-50 w-64 \n        bg-gradient-to-b from-gray-900 to-gray-800 \n        border-r border-purple-500/20 \n        transform transition-transform duration-300 ease-in-out\n        ${sidebarOpen ? 'translate-x-0' : '-translate-x-full md:translate-x-0'}\n      `}>\n        <div className=\"flex flex-col h-full\">\n          {/* Logo */}\n          <div className=\"flex items-center justify-between p-6 border-b border-purple-500/20\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-purple-600 to-blue-600 rounded-lg flex items-center justify-center shadow-lg\">\n                <FaStore className=\"text-white text-xl\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-white\">POSQ</h1>\n                <p className=\"text-xs text-purple-300\">Owner Portal</p>\n              </div>\n            </div>\n            <button\n              onClick={() => setSidebarOpen(false)}\n              className=\"md:hidden text-gray-400 hover:text-white transition-colors\"\n            >\n              <FaTimes className=\"text-xl\" />\n            </button>\n          </div>\n\n          {/* Navigation */}\n          <nav className=\"flex-1 p-4 space-y-2 overflow-y-auto\">\n            {navItems.map((item) => {\n              const Icon = item.icon;\n              return (\n                <Link\n                  key={item.path}\n                  to={item.path}\n                  onClick={() => setSidebarOpen(false)}\n                  className={`\n                    flex items-center gap-3 px-4 py-3 rounded-xl transition-all\n                    ${isActive(item.path)\n                      ? 'bg-gradient-to-r from-purple-600 to-blue-600 text-white shadow-lg'\n                      : 'text-gray-300 hover:bg-white/10 hover:text-white'\n                    }\n                  `}\n                >\n                  <Icon className=\"text-xl\" />\n                  <span className=\"font-medium\">{item.label}</span>\n                </Link>\n              );\n            })}\n          </nav>\n\n          {/* User Info & Logout */}\n          <div className=\"p-4 border-t border-purple-500/20\">\n            <div className=\"bg-white/5 rounded-xl p-4 mb-3\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <div className=\"w-10 h-10 bg-gradient-to-br from-purple-600 to-blue-600 rounded-full flex items-center justify-center\">\n                  <FaUser className=\"text-white\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-white font-medium truncate\">{user?.full_name || user?.username}</p>\n                  <p className=\"text-xs text-purple-300 capitalize\">{user?.role}</p>\n                </div>\n              </div>\n            </div>\n            <button\n              onClick={handleLogout}\n              className=\"w-full flex items-center justify-center gap-2 px-4 py-3 bg-red-600/20 hover:bg-red-600/30 text-red-400 hover:text-red-300 rounded-xl transition-all border border-red-500/30\"\n            >\n              <FaSignOutAlt />\n              <span>Logout</span>\n            </button>\n          </div>\n        </div>\n      </aside>\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Mobile Header */}\n        <header className=\"md:hidden bg-gray-900 border-b border-purple-500/20 p-4 flex items-center justify-between\">\n          <button\n            onClick={() => setSidebarOpen(true)}\n            className=\"text-white hover:text-purple-400 transition-colors\"\n          >\n            <FaBars className=\"text-xl\" />\n          </button>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-purple-600 to-blue-600 rounded-lg flex items-center justify-center\">\n              <FaStore className=\"text-white\" />\n            </div>\n            <span className=\"text-white font-bold\">POSQ Owner</span>\n          </div>\n          <div className=\"w-8\"></div> {/* Spacer for centering */}\n        </header>\n\n        {/* Main Content Area */}\n        <main className=\"flex-1 overflow-auto\">\n          <Outlet />\n        </main>\n      </div>\n\n      {/* Backdrop for mobile */}\n      {sidebarOpen && (\n        <div\n          className=\"fixed inset-0 bg-black/50 z-40 md:hidden backdrop-blur-sm\"\n          onClick={() => setSidebarOpen(false)}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":5484},"server/src/seeds/03_multi_tenant_data.js":{"content":"const bcrypt = require('bcryptjs');\n\nexports.seed = async function(knex) {\n  // Create owner users first\n  const ownerPassword = await bcrypt.hash('owner123', 12);\n  \n  // Check if owner already exists\n  const existingOwner = await knex('users').where({ username: 'owner' }).first();\n  \n  if (!existingOwner) {\n    await knex('users').insert([\n      {\n        id: 100,\n        username: 'owner',\n        password_hash: ownerPassword,\n        full_name: 'Restaurant Owner',\n        role: 'owner',\n        pin: '0000',\n        email: 'owner@posq.com',\n        phone: '+212-600-000000',\n        is_active: true\n      }\n    ]);\n  }\n  \n  // Update existing branch to have owner\n  await knex('branches')\n    .where({ id: 1 })\n    .update({\n      owner_id: 100,\n      phone: '+212-522-123456',\n      email: 'casablanca@posq.com',\n      logo_url: null,\n      settings: JSON.stringify({\n        currency: 'MAD',\n        tax_rate: 10,\n        service_charge: 5,\n        timezone: 'Africa/Casablanca',\n        language: 'en'\n      }),\n      is_active: true\n    });\n  \n  // Update existing users to belong to branch 1\n  await knex('users')\n    .whereIn('id', [1, 2, 3])\n    .update({\n      branch_id: 1,\n      email: knex.raw(\"CONCAT(username, '@posq.com')\"),\n      phone: '+212-600-000001',\n      hire_date: knex.fn.now()\n    });\n  \n  // Add a second restaurant for the same owner\n  const existingBranch2 = await knex('branches').where({ code: 'RBT' }).first();\n  \n  if (!existingBranch2) {\n    await knex('branches').insert([\n      {\n        id: 2,\n        name: 'Rabat Downtown',\n        code: 'RBT',\n        address: '456 Avenue Hassan II, Rabat, Morocco',\n        owner_id: 100,\n        phone: '+212-537-654321',\n        email: 'rabat@posq.com',\n        logo_url: null,\n        settings: JSON.stringify({\n          currency: 'MAD',\n          tax_rate: 10,\n          service_charge: 5,\n          timezone: 'Africa/Casablanca',\n          language: 'en'\n        }),\n        is_active: true\n      }\n    ]);\n    \n    // Add admin for second restaurant\n    await knex('users').insert([\n      {\n        id: 101,\n        username: 'admin2',\n        password_hash: await bcrypt.hash('admin123', 12),\n        full_name: 'Rabat Admin',\n        role: 'admin',\n        pin: '2222',\n        email: 'admin2@posq.com',\n        phone: '+212-600-000002',\n        branch_id: 2,\n        is_active: true,\n        hire_date: knex.fn.now()\n      }\n    ]);\n    \n    // Add some tables for branch 2\n    const tables2 = [];\n    for (let i = 1; i <= 8; i++) {\n      tables2.push({\n        branch_id: 2,\n        table_number: `T${i}`,\n        qr_code: `https://posq.local/menu?table=T${i}&branch=RBT`,\n        description: `Table ${i}`\n      });\n    }\n    await knex('tables').insert(tables2);\n    \n    // Add categories for branch 2\n    await knex('categories').insert([\n      { branch_id: 2, name: 'Appetizers', position: 1 },\n      { branch_id: 2, name: 'Main Courses', position: 2 },\n      { branch_id: 2, name: 'Desserts', position: 3 },\n      { branch_id: 2, name: 'Beverages', position: 4 }\n    ]);\n  }\n};\n","size_bytes":3078},"server/src/seeds/04_enhanced_restaurants.js":{"content":"const bcrypt = require('bcryptjs');\n\nexports.seed = async function(knex) {\n  // Add more restaurants for the owner with complete data\n  const ownerUser = await knex('users').where({ username: 'owner' }).first();\n  \n  if (!ownerUser) {\n    console.log('Owner user not found. Please run previous seeds first.');\n    return;\n  }\n  \n  const restaurants = [\n    {\n      name: 'Marrakech Medina',\n      code: 'MRK',\n      address: '789 Jemaa el-Fnaa, Marrakech, Morocco',\n      phone: '+212-524-123789',\n      email: 'marrakech@posq.com',\n      website: 'https://marrakech.posq.com',\n      description: 'Traditional Moroccan cuisine in the heart of Marrakech medina',\n      owner_id: ownerUser.id,\n      settings: JSON.stringify({\n        currency: 'MAD',\n        tax_rate: 10,\n        service_charge: 5,\n        timezone: 'Africa/Casablanca',\n        language: 'en'\n      }),\n      is_active: true\n    },\n    {\n      name: 'Tangier Seaside',\n      code: 'TNG',\n      address: '321 Boulevard Pasteur, Tangier, Morocco',\n      phone: '+212-539-987654',\n      email: 'tangier@posq.com',\n      website: 'https://tangier.posq.com',\n      description: 'Mediterranean fusion restaurant with ocean views',\n      owner_id: ownerUser.id,\n      settings: JSON.stringify({\n        currency: 'MAD',\n        tax_rate: 10,\n        service_charge: 7,\n        timezone: 'Africa/Casablanca',\n        language: 'en'\n      }),\n      is_active: true\n    },\n    {\n      name: 'Fes Heritage',\n      code: 'FES',\n      address: '555 Bab Boujloud, Fes, Morocco',\n      phone: '+212-535-456789',\n      email: 'fes@posq.com',\n      website: 'https://fes.posq.com',\n      description: 'Authentic Fassi cuisine in a restored riad',\n      owner_id: ownerUser.id,\n      settings: JSON.stringify({\n        currency: 'MAD',\n        tax_rate: 10,\n        service_charge: 5,\n        timezone: 'Africa/Casablanca',\n        language: 'en'\n      }),\n      is_active: true\n    }\n  ];\n  \n  for (const restaurant of restaurants) {\n    // Check if restaurant already exists\n    const existing = await knex('branches').where({ code: restaurant.code }).first();\n    \n    if (!existing) {\n      const [branchId] = await knex('branches').insert(restaurant).returning('id');\n      const actualBranchId = branchId?.id || branchId;\n      \n      console.log(`Created restaurant: ${restaurant.name} (${restaurant.code})`);\n      \n      // Create admin user for this restaurant\n      const adminPassword = await bcrypt.hash('admin123', 12);\n      await knex('users').insert({\n        username: `admin_${restaurant.code.toLowerCase()}`,\n        password_hash: adminPassword,\n        full_name: `${restaurant.name} Admin`,\n        role: 'admin',\n        pin: '1234',\n        email: `admin@${restaurant.code.toLowerCase()}.posq.com`,\n        phone: restaurant.phone.replace(/\\d{3}$/, '001'),\n        branch_id: actualBranchId,\n        is_active: true,\n        hire_date: knex.fn.now()\n      });\n      \n      // Create manager user\n      const managerPassword = await bcrypt.hash('manager123', 12);\n      await knex('users').insert({\n        username: `manager_${restaurant.code.toLowerCase()}`,\n        password_hash: managerPassword,\n        full_name: `${restaurant.name} Manager`,\n        role: 'manager',\n        pin: '5678',\n        email: `manager@${restaurant.code.toLowerCase()}.posq.com`,\n        phone: restaurant.phone.replace(/\\d{3}$/, '002'),\n        branch_id: actualBranchId,\n        is_active: true,\n        hire_date: knex.fn.now()\n      });\n      \n      // Create tables (10 tables per restaurant)\n      const tables = [];\n      for (let i = 1; i <= 10; i++) {\n        tables.push({\n          branch_id: actualBranchId,\n          table_number: `T${i}`,\n          qr_code: `https://posq.local/menu?table=T${i}&branch=${restaurant.code}`,\n          description: `Table ${i}`,\n          capacity: i <= 4 ? 2 : (i <= 8 ? 4 : 6)\n        });\n      }\n      await knex('tables').insert(tables);\n      \n      // Create default categories\n      await knex('categories').insert([\n        { branch_id: actualBranchId, name: 'Appetizers', position: 1 },\n        { branch_id: actualBranchId, name: 'Main Courses', position: 2 },\n        { branch_id: actualBranchId, name: 'Desserts', position: 3 },\n        { branch_id: actualBranchId, name: 'Beverages', position: 4 }\n      ]);\n      \n      // Add sample menu items\n      const categories = await knex('categories')\n        .where({ branch_id: actualBranchId })\n        .select('id', 'name');\n      \n      const menuItems = [];\n      for (const category of categories) {\n        if (category.name === 'Appetizers') {\n          menuItems.push(\n            { branch_id: actualBranchId, category_id: category.id, name: 'Moroccan Salad', price: 45, description: 'Fresh seasonal vegetables with olive oil', is_available: true },\n            { branch_id: actualBranchId, category_id: category.id, name: 'Zaalouk', price: 40, description: 'Traditional eggplant and tomato salad', is_available: true }\n          );\n        } else if (category.name === 'Main Courses') {\n          menuItems.push(\n            { branch_id: actualBranchId, category_id: category.id, name: 'Chicken Tagine', price: 120, description: 'Slow-cooked chicken with preserved lemon and olives', is_available: true },\n            { branch_id: actualBranchId, category_id: category.id, name: 'Lamb Couscous', price: 150, description: 'Steamed couscous with tender lamb and vegetables', is_available: true }\n          );\n        } else if (category.name === 'Desserts') {\n          menuItems.push(\n            { branch_id: actualBranchId, category_id: category.id, name: 'Moroccan Pastries', price: 50, description: 'Assorted traditional pastries with honey', is_available: true }\n          );\n        } else if (category.name === 'Beverages') {\n          menuItems.push(\n            { branch_id: actualBranchId, category_id: category.id, name: 'Mint Tea', price: 20, description: 'Traditional Moroccan mint tea', is_available: true },\n            { branch_id: actualBranchId, category_id: category.id, name: 'Fresh Orange Juice', price: 25, description: 'Freshly squeezed orange juice', is_available: true }\n          );\n        }\n      }\n      \n      if (menuItems.length > 0) {\n        await knex('menu_items').insert(menuItems);\n      }\n      \n      // Add sample stock items\n      await knex('stock_items').insert([\n        { branch_id: actualBranchId, name: 'Chicken', sku: 'CHK001', quantity: 50, min_threshold: 10, unit: 'kg' },\n        { branch_id: actualBranchId, name: 'Lamb', sku: 'LMB001', quantity: 30, min_threshold: 5, unit: 'kg' },\n        { branch_id: actualBranchId, name: 'Tomatoes', sku: 'TMT001', quantity: 100, min_threshold: 20, unit: 'kg' },\n        { branch_id: actualBranchId, name: 'Olive Oil', sku: 'OIL001', quantity: 20, min_threshold: 5, unit: 'liters' },\n        { branch_id: actualBranchId, name: 'Mint', sku: 'MNT001', quantity: 15, min_threshold: 3, unit: 'bunches' }\n      ]);\n      \n      console.log(`✅ Successfully set up restaurant: ${restaurant.name}`);\n    } else {\n      console.log(`Restaurant ${restaurant.name} already exists, skipping...`);\n    }\n  }\n  \n  console.log('✅ Restaurant seed completed!');\n};\n","size_bytes":7212},"frontend/src/pages/owner/RestaurantDetails.jsx":{"content":"import { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { \n  ArrowLeft, Edit, TrendingUp, ShoppingCart, Users, Package, \n  DollarSign, Activity, Calendar, MapPin, Phone, Mail, Globe,\n  CheckCircle, XCircle, BarChart3\n} from 'lucide-react';\nimport api from '../../services/api';\n\nexport default function RestaurantDetails() {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  \n  const [loading, setLoading] = useState(true);\n  const [restaurant, setRestaurant] = useState(null);\n  const [analytics, setAnalytics] = useState(null);\n  const [activeTab, setActiveTab] = useState('overview');\n\n  useEffect(() => {\n    loadRestaurantDetails();\n  }, [id]);\n\n  const loadRestaurantDetails = async () => {\n    try {\n      setLoading(true);\n      const [restaurantRes, analyticsRes] = await Promise.all([\n        api.get(`/api/restaurants/${id}`),\n        api.get(`/api/restaurants/${id}/analytics`)\n      ]);\n      \n      setRestaurant(restaurantRes.data.restaurant);\n      setAnalytics(analyticsRes.data);\n    } catch (error) {\n      console.error('Failed to load restaurant details:', error);\n      alert('Failed to load restaurant details');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  if (!restaurant) {\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-screen\">\n        <h2 className=\"text-2xl font-bold text-slate-900 mb-4\">Restaurant Not Found</h2>\n        <button\n          onClick={() => navigate('/owner')}\n          className=\"px-6 py-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700\"\n        >\n          Back to Dashboard\n        </button>\n      </div>\n    );\n  }\n\n  const settings = typeof restaurant.settings === 'string' \n    ? JSON.parse(restaurant.settings) \n    : restaurant.settings || {};\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 p-4 md:p-8\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <button\n            onClick={() => navigate('/owner')}\n            className=\"flex items-center gap-2 text-slate-600 hover:text-slate-900 mb-4 transition-colors\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n            Back to Dashboard\n          </button>\n          \n          <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n            <div>\n              <div className=\"flex items-center gap-3 mb-2\">\n                <h1 className=\"text-3xl font-bold text-slate-900\">{restaurant.name}</h1>\n                {restaurant.is_active ? (\n                  <span className=\"px-3 py-1 bg-green-100 text-green-700 rounded-full text-sm font-medium flex items-center gap-1\">\n                    <CheckCircle className=\"w-4 h-4\" />\n                    Active\n                  </span>\n                ) : (\n                  <span className=\"px-3 py-1 bg-red-100 text-red-700 rounded-full text-sm font-medium flex items-center gap-1\">\n                    <XCircle className=\"w-4 h-4\" />\n                    Inactive\n                  </span>\n                )}\n              </div>\n              <div className=\"flex flex-wrap gap-4 text-sm text-slate-600\">\n                <span className=\"flex items-center gap-1\">\n                  <MapPin className=\"w-4 h-4\" />\n                  {restaurant.address}\n                </span>\n                {restaurant.phone && (\n                  <span className=\"flex items-center gap-1\">\n                    <Phone className=\"w-4 h-4\" />\n                    {restaurant.phone}\n                  </span>\n                )}\n              </div>\n            </div>\n            \n            <button\n              onClick={() => navigate(`/owner/restaurants/${id}/edit`)}\n              className=\"px-6 py-3 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-xl hover:from-blue-700 hover:to-indigo-700 font-medium transition-all flex items-center gap-2 shadow-lg shadow-blue-500/30\"\n            >\n              <Edit className=\"w-5 h-5\" />\n              Edit Restaurant\n            </button>\n          </div>\n        </div>\n\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <div className=\"bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl p-6 text-white shadow-xl\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"p-3 bg-white/20 rounded-xl\">\n                <DollarSign className=\"w-6 h-6\" />\n              </div>\n              <TrendingUp className=\"w-5 h-5 opacity-80\" />\n            </div>\n            <div className=\"text-3xl font-bold mb-1\">\n              {settings.currency || 'MAD'} {analytics?.totalRevenue?.toLocaleString() || '0'}\n            </div>\n            <div className=\"text-blue-100\">Total Revenue</div>\n          </div>\n\n          <div className=\"bg-gradient-to-br from-green-500 to-green-600 rounded-2xl p-6 text-white shadow-xl\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"p-3 bg-white/20 rounded-xl\">\n                <ShoppingCart className=\"w-6 h-6\" />\n              </div>\n              <Activity className=\"w-5 h-5 opacity-80\" />\n            </div>\n            <div className=\"text-3xl font-bold mb-1\">\n              {analytics?.totalOrders?.toLocaleString() || '0'}\n            </div>\n            <div className=\"text-green-100\">Total Orders</div>\n          </div>\n\n          <div className=\"bg-gradient-to-br from-purple-500 to-purple-600 rounded-2xl p-6 text-white shadow-xl\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"p-3 bg-white/20 rounded-xl\">\n                <Package className=\"w-6 h-6\" />\n              </div>\n              <BarChart3 className=\"w-5 h-5 opacity-80\" />\n            </div>\n            <div className=\"text-3xl font-bold mb-1\">\n              {analytics?.totalMenuItems?.toLocaleString() || '0'}\n            </div>\n            <div className=\"text-purple-100\">Menu Items</div>\n          </div>\n\n          <div className=\"bg-gradient-to-br from-orange-500 to-orange-600 rounded-2xl p-6 text-white shadow-xl\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"p-3 bg-white/20 rounded-xl\">\n                <Users className=\"w-6 h-6\" />\n              </div>\n              <Users className=\"w-5 h-5 opacity-80\" />\n            </div>\n            <div className=\"text-3xl font-bold mb-1\">\n              {analytics?.totalEmployees?.toLocaleString() || '0'}\n            </div>\n            <div className=\"text-orange-100\">Employees</div>\n          </div>\n        </div>\n\n        {/* Tabs */}\n        <div className=\"bg-white rounded-2xl shadow-xl overflow-hidden\">\n          <div className=\"border-b border-slate-200\">\n            <div className=\"flex gap-1 p-2 overflow-x-auto\">\n              {[\n                { id: 'overview', label: 'Overview', icon: Activity },\n                { id: 'products', label: 'Top Products', icon: Package },\n                { id: 'employees', label: 'Employees', icon: Users },\n                { id: 'inventory', label: 'Inventory', icon: Package }\n              ].map((tab) => {\n                const Icon = tab.icon;\n                return (\n                  <button\n                    key={tab.id}\n                    onClick={() => setActiveTab(tab.id)}\n                    className={`px-6 py-3 rounded-xl font-medium transition-all flex items-center gap-2 whitespace-nowrap ${\n                      activeTab === tab.id\n                        ? 'bg-blue-600 text-white shadow-lg'\n                        : 'text-slate-600 hover:bg-slate-50'\n                    }`}\n                  >\n                    <Icon className=\"w-5 h-5\" />\n                    {tab.label}\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n\n          <div className=\"p-8\">\n            {activeTab === 'overview' && (\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-xl font-bold text-slate-900 mb-4\">Restaurant Information</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div className=\"space-y-3\">\n                      <div>\n                        <label className=\"text-sm text-slate-500\">Branch Code</label>\n                        <p className=\"text-slate-900 font-medium\">{restaurant.code}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm text-slate-500\">Email</label>\n                        <p className=\"text-slate-900 font-medium\">{restaurant.email || 'Not set'}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm text-slate-500\">Currency</label>\n                        <p className=\"text-slate-900 font-medium\">{settings.currency || 'MAD'}</p>\n                      </div>\n                    </div>\n                    <div className=\"space-y-3\">\n                      <div>\n                        <label className=\"text-sm text-slate-500\">Tax Rate</label>\n                        <p className=\"text-slate-900 font-medium\">{settings.tax_rate || 0}%</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm text-slate-500\">Service Charge</label>\n                        <p className=\"text-slate-900 font-medium\">{settings.service_charge || 0}%</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm text-slate-500\">Timezone</label>\n                        <p className=\"text-slate-900 font-medium\">{settings.timezone || 'Not set'}</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"border-t pt-6\">\n                  <h3 className=\"text-xl font-bold text-slate-900 mb-4\">Recent Activity</h3>\n                  <div className=\"space-y-3\">\n                    {analytics?.recentOrders?.length > 0 ? (\n                      analytics.recentOrders.map((order) => (\n                        <div key={order.id} className=\"flex items-center justify-between p-4 bg-slate-50 rounded-xl\">\n                          <div>\n                            <p className=\"font-medium text-slate-900\">Order #{order.order_code}</p>\n                            <p className=\"text-sm text-slate-500\">\n                              {new Date(order.created_at).toLocaleDateString()} at {new Date(order.created_at).toLocaleTimeString()}\n                            </p>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-bold text-slate-900\">{settings.currency} {order.total?.toFixed(2)}</p>\n                            <p className=\"text-sm text-slate-500\">{order.status}</p>\n                          </div>\n                        </div>\n                      ))\n                    ) : (\n                      <p className=\"text-slate-500 text-center py-8\">No recent orders</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {activeTab === 'products' && (\n              <div>\n                <h3 className=\"text-xl font-bold text-slate-900 mb-4\">Top Selling Products</h3>\n                <div className=\"space-y-3\">\n                  {analytics?.topProducts?.length > 0 ? (\n                    analytics.topProducts.map((product, index) => (\n                      <div key={product.id} className=\"flex items-center justify-between p-4 bg-slate-50 rounded-xl\">\n                        <div className=\"flex items-center gap-4\">\n                          <div className=\"w-8 h-8 rounded-full bg-blue-600 text-white flex items-center justify-center font-bold\">\n                            {index + 1}\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-slate-900\">{product.name}</p>\n                            <p className=\"text-sm text-slate-500\">{product.category_name}</p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-bold text-slate-900\">{product.total_sold || 0} sold</p>\n                          <p className=\"text-sm text-slate-500\">{settings.currency} {product.price?.toFixed(2)}</p>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <p className=\"text-slate-500 text-center py-8\">No product data available</p>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {activeTab === 'employees' && (\n              <div>\n                <h3 className=\"text-xl font-bold text-slate-900 mb-4\">Employee List</h3>\n                <div className=\"space-y-3\">\n                  {analytics?.employees?.length > 0 ? (\n                    analytics.employees.map((employee) => (\n                      <div key={employee.id} className=\"flex items-center justify-between p-4 bg-slate-50 rounded-xl\">\n                        <div>\n                          <p className=\"font-medium text-slate-900\">{employee.full_name}</p>\n                          <p className=\"text-sm text-slate-500\">{employee.role} • {employee.email}</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <span className={`px-3 py-1 rounded-full text-sm font-medium ${\n                            employee.is_active \n                              ? 'bg-green-100 text-green-700' \n                              : 'bg-red-100 text-red-700'\n                          }`}>\n                            {employee.is_active ? 'Active' : 'Inactive'}\n                          </span>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <p className=\"text-slate-500 text-center py-8\">No employees found</p>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {activeTab === 'inventory' && (\n              <div>\n                <h3 className=\"text-xl font-bold text-slate-900 mb-4\">Inventory Status</h3>\n                <div className=\"space-y-3\">\n                  {analytics?.inventory?.length > 0 ? (\n                    analytics.inventory.map((item) => (\n                      <div key={item.id} className=\"flex items-center justify-between p-4 bg-slate-50 rounded-xl\">\n                        <div>\n                          <p className=\"font-medium text-slate-900\">{item.name}</p>\n                          <p className=\"text-sm text-slate-500\">{item.sku || 'No SKU'}</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-bold text-slate-900\">{item.quantity || 0} {item.unit}</p>\n                          {item.quantity <= item.min_threshold && (\n                            <span className=\"text-xs text-red-600 font-medium\">Low Stock</span>\n                          )}\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <p className=\"text-slate-500 text-center py-8\">No inventory items</p>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15854},"frontend/src/pages/owner/RestaurantForm.jsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Building2, MapPin, Phone, Mail, Globe, Save, X, ArrowLeft, UserPlus, User, Lock } from 'lucide-react';\nimport api from '../../services/api';\n\nexport default function RestaurantForm() {\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const isEditMode = !!id;\n\n  const [loading, setLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    name: '',\n    code: '',\n    address: '',\n    phone: '',\n    email: '',\n    website: '',\n    description: '',\n    currency: 'MAD',\n    taxRate: 10,\n    serviceCharge: 5,\n    timezone: 'Africa/Casablanca',\n    language: 'en',\n    isActive: true,\n    createAdmin: false,\n    adminUsername: '',\n    adminPassword: '',\n    adminFullName: '',\n    adminEmail: '',\n    adminPhone: ''\n  });\n\n  useEffect(() => {\n    if (isEditMode) {\n      loadRestaurant();\n    }\n  }, [id]);\n\n  const loadRestaurant = async () => {\n    try {\n      const response = await api.get(`/api/restaurants/${id}`);\n      const restaurant = response.data.restaurant;\n      const settings = typeof restaurant.settings === 'string' \n        ? JSON.parse(restaurant.settings) \n        : restaurant.settings || {};\n\n      setFormData({\n        name: restaurant.name || '',\n        code: restaurant.code || '',\n        address: restaurant.address || '',\n        phone: restaurant.phone || '',\n        email: restaurant.email || '',\n        website: restaurant.website || '',\n        description: restaurant.description || '',\n        currency: settings.currency || 'MAD',\n        taxRate: settings.tax_rate || 10,\n        serviceCharge: settings.service_charge || 5,\n        timezone: settings.timezone || 'Africa/Casablanca',\n        language: settings.language || 'en',\n        isActive: restaurant.is_active\n      });\n    } catch (error) {\n      console.error('Failed to load restaurant:', error);\n      alert('Failed to load restaurant details');\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      const payload = {\n        name: formData.name,\n        code: formData.code,\n        address: formData.address,\n        phone: formData.phone,\n        email: formData.email,\n        website: formData.website,\n        description: formData.description,\n        settings: {\n          currency: formData.currency,\n          tax_rate: parseFloat(formData.taxRate),\n          service_charge: parseFloat(formData.serviceCharge),\n          timezone: formData.timezone,\n          language: formData.language\n        },\n        isActive: formData.isActive\n      };\n\n      // Add admin employee data if creating new restaurant and option is selected\n      if (!isEditMode && formData.createAdmin) {\n        if (!formData.adminUsername || !formData.adminPassword || !formData.adminFullName) {\n          alert('Please fill in all required admin employee fields');\n          setLoading(false);\n          return;\n        }\n        payload.createAdmin = true;\n        payload.adminEmployee = {\n          username: formData.adminUsername,\n          password: formData.adminPassword,\n          full_name: formData.adminFullName,\n          email: formData.adminEmail,\n          phone: formData.adminPhone\n        };\n      }\n\n      if (isEditMode) {\n        await api.put(`/api/restaurants/${id}`, payload);\n        alert('Restaurant updated successfully!');\n      } else {\n        await api.post('/api/restaurants', payload);\n        alert('Restaurant created successfully!');\n      }\n      \n      navigate('/owner');\n    } catch (error) {\n      console.error('Failed to save restaurant:', error);\n      alert(error.response?.data?.error || 'Failed to save restaurant');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 p-4 md:p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <button\n            onClick={() => navigate('/owner')}\n            className=\"flex items-center gap-2 text-slate-600 hover:text-slate-900 mb-4 transition-colors\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n            Back to Dashboard\n          </button>\n          <h1 className=\"text-3xl font-bold text-slate-900\">\n            {isEditMode ? 'Edit Restaurant' : 'Create New Restaurant'}\n          </h1>\n          <p className=\"text-slate-600 mt-2\">\n            {isEditMode ? 'Update restaurant information and settings' : 'Add a new restaurant to your portfolio'}\n          </p>\n        </div>\n\n        {/* Form */}\n        <form onSubmit={handleSubmit} className=\"bg-white rounded-2xl shadow-xl p-8 space-y-8\">\n          {/* Basic Information */}\n          <div>\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-4 flex items-center gap-2\">\n              <Building2 className=\"w-5 h-5 text-blue-600\" />\n              Basic Information\n            </h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  Restaurant Name *\n                </label>\n                <input\n                  type=\"text\"\n                  required\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  className=\"w-full px-4 py-3 rounded-xl border border-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all\"\n                  placeholder=\"e.g., POSQ Downtown\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  Branch Code *\n                </label>\n                <input\n                  type=\"text\"\n                  required\n                  value={formData.code}\n                  onChange={(e) => setFormData({ ...formData, code: e.target.value.toUpperCase() })}\n                  className=\"w-full px-4 py-3 rounded-xl border border-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all\"\n                  placeholder=\"e.g., DWN\"\n                  maxLength={10}\n                />\n              </div>\n\n              <div className=\"md:col-span-2\">\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  <MapPin className=\"w-4 h-4 inline mr-1\" />\n                  Address *\n                </label>\n                <textarea\n                  required\n                  value={formData.address}\n                  onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n                  className=\"w-full px-4 py-3 rounded-xl border border-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all\"\n                  rows=\"3\"\n                  placeholder=\"Full street address\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  <Phone className=\"w-4 h-4 inline mr-1\" />\n                  Phone Number\n                </label>\n                <input\n                  type=\"tel\"\n                  value={formData.phone}\n                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                  className=\"w-full px-4 py-3 rounded-xl border border-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all\"\n                  placeholder=\"+212-XXX-XXXXXX\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  <Mail className=\"w-4 h-4 inline mr-1\" />\n                  Email Address\n                </label>\n                <input\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  className=\"w-full px-4 py-3 rounded-xl border border-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all\"\n                  placeholder=\"contact@restaurant.com\"\n                />\n              </div>\n\n              <div className=\"md:col-span-2\">\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  <Globe className=\"w-4 h-4 inline mr-1\" />\n                  Website (Optional)\n                </label>\n                <input\n                  type=\"url\"\n                  value={formData.website}\n                  onChange={(e) => setFormData({ ...formData, website: e.target.value })}\n                  className=\"w-full px-4 py-3 rounded-xl border border-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all\"\n                  placeholder=\"https://www.restaurant.com\"\n                />\n              </div>\n\n              <div className=\"md:col-span-2\">\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  Description\n                </label>\n                <textarea\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  className=\"w-full px-4 py-3 rounded-xl border border-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all\"\n                  rows=\"3\"\n                  placeholder=\"Brief description of the restaurant\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Admin Employee Creation (only for new restaurants) */}\n          {!isEditMode && (\n            <div className=\"border-t pt-8\">\n              <div className=\"mb-4\">\n                <label className=\"flex items-center gap-3 cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={formData.createAdmin}\n                    onChange={(e) => setFormData({ ...formData, createAdmin: e.target.checked })}\n                    className=\"w-5 h-5 rounded border-slate-300 text-blue-600 focus:ring-2 focus:ring-blue-500\"\n                  />\n                  <span className=\"text-lg font-semibold text-slate-900 flex items-center gap-2\">\n                    <UserPlus className=\"w-5 h-5 text-blue-600\" />\n                    Create Admin Employee for this Restaurant\n                  </span>\n                </label>\n                <p className=\"text-sm text-slate-600 mt-2 ml-8\">\n                  Create the first admin user who will manage this restaurant\n                </p>\n              </div>\n\n              {formData.createAdmin && (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-6 p-6 bg-blue-50 rounded-xl\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                      <User className=\"w-4 h-4 inline mr-1\" />\n                      Username *\n                    </label>\n                    <input\n                      type=\"text\"\n                      required={formData.createAdmin}\n                      value={formData.adminUsername}\n                      onChange={(e) => setFormData({ ...formData, adminUsername: e.target.value })}\n                      className=\"w-full px-4 py-3 rounded-xl border border-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all\"\n                      placeholder=\"admin_username\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                      <Lock className=\"w-4 h-4 inline mr-1\" />\n                      Password *\n                    </label>\n                    <input\n                      type=\"password\"\n                      required={formData.createAdmin}\n                      value={formData.adminPassword}\n                      onChange={(e) => setFormData({ ...formData, adminPassword: e.target.value })}\n                      className=\"w-full px-4 py-3 rounded-xl border border-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all\"\n                      placeholder=\"Secure password\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                      Full Name *\n                    </label>\n                    <input\n                      type=\"text\"\n                      required={formData.createAdmin}\n                      value={formData.adminFullName}\n                      onChange={(e) => setFormData({ ...formData, adminFullName: e.target.value })}\n                      className=\"w-full px-4 py-3 rounded-xl border border-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all\"\n                      placeholder=\"John Doe\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                      <Mail className=\"w-4 h-4 inline mr-1\" />\n                      Email\n                    </label>\n                    <input\n                      type=\"email\"\n                      value={formData.adminEmail}\n                      onChange={(e) => setFormData({ ...formData, adminEmail: e.target.value })}\n                      className=\"w-full px-4 py-3 rounded-xl border border-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all\"\n                      placeholder=\"admin@example.com\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                      <Phone className=\"w-4 h-4 inline mr-1\" />\n                      Phone\n                    </label>\n                    <input\n                      type=\"tel\"\n                      value={formData.adminPhone}\n                      onChange={(e) => setFormData({ ...formData, adminPhone: e.target.value })}\n                      className=\"w-full px-4 py-3 rounded-xl border border-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all\"\n                      placeholder=\"+212-XXX-XXXXXX\"\n                    />\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Settings */}\n          <div className=\"border-t pt-8\">\n            <h2 className=\"text-xl font-semibold text-slate-900 mb-4\">Restaurant Settings</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  Currency\n                </label>\n                <select\n                  value={formData.currency}\n                  onChange={(e) => setFormData({ ...formData, currency: e.target.value })}\n                  className=\"w-full px-4 py-3 rounded-xl border border-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all\"\n                >\n                  <option value=\"MAD\">MAD (Moroccan Dirham)</option>\n                  <option value=\"USD\">USD (US Dollar)</option>\n                  <option value=\"EUR\">EUR (Euro)</option>\n                  <option value=\"GBP\">GBP (British Pound)</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  Tax Rate (%)\n                </label>\n                <input\n                  type=\"number\"\n                  step=\"0.01\"\n                  min=\"0\"\n                  max=\"100\"\n                  value={formData.taxRate}\n                  onChange={(e) => setFormData({ ...formData, taxRate: e.target.value })}\n                  className=\"w-full px-4 py-3 rounded-xl border border-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  Service Charge (%)\n                </label>\n                <input\n                  type=\"number\"\n                  step=\"0.01\"\n                  min=\"0\"\n                  max=\"100\"\n                  value={formData.serviceCharge}\n                  onChange={(e) => setFormData({ ...formData, serviceCharge: e.target.value })}\n                  className=\"w-full px-4 py-3 rounded-xl border border-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  Timezone\n                </label>\n                <select\n                  value={formData.timezone}\n                  onChange={(e) => setFormData({ ...formData, timezone: e.target.value })}\n                  className=\"w-full px-4 py-3 rounded-xl border border-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all\"\n                >\n                  <option value=\"Africa/Casablanca\">Africa/Casablanca</option>\n                  <option value=\"Europe/London\">Europe/London</option>\n                  <option value=\"America/New_York\">America/New_York</option>\n                  <option value=\"Asia/Dubai\">Asia/Dubai</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  Language\n                </label>\n                <select\n                  value={formData.language}\n                  onChange={(e) => setFormData({ ...formData, language: e.target.value })}\n                  className=\"w-full px-4 py-3 rounded-xl border border-slate-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all\"\n                >\n                  <option value=\"en\">English</option>\n                  <option value=\"fr\">Français</option>\n                  <option value=\"ar\">العربية</option>\n                  <option value=\"es\">Español</option>\n                </select>\n              </div>\n\n              <div className=\"flex items-center\">\n                <label className=\"flex items-center gap-3 cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={formData.isActive}\n                    onChange={(e) => setFormData({ ...formData, isActive: e.target.checked })}\n                    className=\"w-5 h-5 rounded border-slate-300 text-blue-600 focus:ring-2 focus:ring-blue-500\"\n                  />\n                  <span className=\"text-sm font-medium text-slate-700\">\n                    Restaurant is Active\n                  </span>\n                </label>\n              </div>\n            </div>\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex justify-end gap-4 pt-6 border-t\">\n            <button\n              type=\"button\"\n              onClick={() => navigate('/owner')}\n              className=\"px-6 py-3 rounded-xl border border-slate-200 text-slate-700 hover:bg-slate-50 font-medium transition-all flex items-center gap-2\"\n            >\n              <X className=\"w-5 h-5\" />\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"px-6 py-3 rounded-xl bg-gradient-to-r from-blue-600 to-indigo-600 text-white hover:from-blue-700 hover:to-indigo-700 font-medium transition-all flex items-center gap-2 disabled:opacity-50 shadow-lg shadow-blue-500/30\"\n            >\n              <Save className=\"w-5 h-5\" />\n              {loading ? 'Saving...' : isEditMode ? 'Update Restaurant' : 'Create Restaurant'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20176},"frontend/src/pages/admin/CashierDashboard.jsx":{"content":"import { useState, useEffect } from 'react'\nimport { ordersAPI } from '../../services/api'\nimport { \n  MagnifyingGlassIcon, \n  QrCodeIcon,\n  CheckCircleIcon,\n  XCircleIcon,\n  ClockIcon\n} from '@heroicons/react/24/outline'\nimport toast from 'react-hot-toast'\nimport io from 'socket.io-client'\n\nfunction CashierDashboard() {\n  const [searchCode, setSearchCode] = useState('')\n  const [searchedOrder, setSearchedOrder] = useState(null)\n  const [pendingOrders, setPendingOrders] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [socket, setSocket] = useState(null)\n\n  useEffect(() => {\n    loadPendingOrders()\n    setupSocketConnection()\n\n    return () => {\n      if (socket) socket.disconnect()\n    }\n  }, [])\n\n  const setupSocketConnection = () => {\n    const newSocket = io(import.meta.env.VITE_API_URL || 'http://localhost:3001')\n    \n    newSocket.on('connect', () => {\n      console.log('Connected to socket server')\n      const branchId = 1\n      newSocket.emit('join', { room: `branch:${branchId}:cashier` })\n    })\n\n    newSocket.on('order.created', (order) => {\n      if (order.payment_status === 'UNPAID' && order.payment_method === 'cash') {\n        toast.success(`New order: ${order.order_code}`)\n        loadPendingOrders()\n      }\n    })\n\n    newSocket.on('order.updated', () => {\n      loadPendingOrders()\n    })\n\n    setSocket(newSocket)\n  }\n\n  const loadPendingOrders = async () => {\n    try {\n      const response = await ordersAPI.getOrders({\n        paymentStatus: 'UNPAID',\n        paymentMethod: 'cash'\n      })\n      setPendingOrders(response.data.orders || [])\n    } catch (error) {\n      console.error('Failed to load pending orders:', error)\n    }\n  }\n\n  const handleSearch = async () => {\n    if (!searchCode.trim()) {\n      toast.error('Please enter an order code')\n      return\n    }\n\n    try {\n      setLoading(true)\n      const response = await ordersAPI.getOrderByCode(searchCode.trim())\n      setSearchedOrder(response.data.order)\n      toast.success('Order found!')\n    } catch (error) {\n      toast.error(error.response?.data?.error || 'Order not found')\n      setSearchedOrder(null)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleConfirmPayment = async (orderId, orderCode) => {\n    if (!window.confirm(`Confirm payment for order ${orderCode}?`)) {\n      return\n    }\n\n    try {\n      setLoading(true)\n      await ordersAPI.updatePayment(orderId, {\n        paymentStatus: 'PAID',\n        paymentMethod: 'cash'\n      })\n      \n      toast.success('Payment confirmed! Order sent to kitchen.')\n      setSearchedOrder(null)\n      setSearchCode('')\n      loadPendingOrders()\n    } catch (error) {\n      toast.error(error.response?.data?.error || 'Failed to confirm payment')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const formatTime = (dateString) => {\n    const date = new Date(dateString)\n    return date.toLocaleTimeString('en-US', { \n      hour: '2-digit', \n      minute: '2-digit'\n    })\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-50 py-8\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        \n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-black bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent mb-2\">\n            Cashier Dashboard\n          </h1>\n          <p className=\"text-gray-600 font-medium\">\n            Scan or search for orders to confirm payments\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          \n          <div className=\"lg:col-span-2 space-y-6\">\n            \n            <div className=\"bg-white rounded-2xl shadow-lg border border-gray-100 p-6\">\n              <div className=\"flex items-center gap-3 mb-4\">\n                <QrCodeIcon className=\"h-8 w-8 text-blue-600\" />\n                <h2 className=\"text-2xl font-bold text-gray-900\">Search Order</h2>\n              </div>\n              \n              <div className=\"flex gap-3\">\n                <input\n                  type=\"text\"\n                  value={searchCode}\n                  onChange={(e) => setSearchCode(e.target.value.toUpperCase())}\n                  onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n                  placeholder=\"Enter order code (e.g., BR1-20251024-0001)\"\n                  className=\"flex-1 px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 transition-all\"\n                />\n                <button\n                  onClick={handleSearch}\n                  disabled={loading}\n                  className=\"px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-bold rounded-xl shadow-lg hover:shadow-xl transition-all active:scale-95 disabled:opacity-50 flex items-center gap-2\"\n                >\n                  <MagnifyingGlassIcon className=\"h-5 w-5\" />\n                  <span>Search</span>\n                </button>\n              </div>\n\n              <div className=\"mt-4 p-4 bg-blue-50 border border-blue-200 rounded-xl\">\n                <p className=\"text-sm text-blue-800\">\n                  💡 Tip: Ask customer to show their QR code or order code from their phone\n                </p>\n              </div>\n            </div>\n\n            {searchedOrder && (\n              <div className=\"bg-white rounded-2xl shadow-xl border-2 border-blue-200 p-6 animate-fadeIn\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div>\n                    <h3 className=\"text-2xl font-bold text-gray-900 mb-1\">\n                      Order {searchedOrder.order_code}\n                    </h3>\n                    <div className=\"flex items-center gap-4 text-sm text-gray-600\">\n                      <span>Table #{searchedOrder.table_number}</span>\n                      <span>•</span>\n                      <span>{searchedOrder.customer_name}</span>\n                      <span>•</span>\n                      <span>{formatTime(searchedOrder.created_at)}</span>\n                    </div>\n                  </div>\n                  <div className={`px-4 py-2 rounded-full font-bold ${\n                    searchedOrder.payment_status === 'PAID'\n                      ? 'bg-green-100 text-green-700'\n                      : 'bg-yellow-100 text-yellow-700'\n                  }`}>\n                    {searchedOrder.payment_status}\n                  </div>\n                </div>\n\n                <div className=\"bg-gray-50 rounded-xl p-4 mb-4\">\n                  <h4 className=\"font-bold text-gray-900 mb-3\">Order Items</h4>\n                  <div className=\"space-y-2\">\n                    {searchedOrder.items?.map((item, idx) => (\n                      <div key={idx} className=\"flex justify-between text-sm\">\n                        <span className=\"text-gray-700\">\n                          {item.quantity}x {item.item_name}\n                        </span>\n                        <span className=\"font-semibold text-gray-900\">\n                          {(item.quantity * item.unit_price).toFixed(2)} MAD\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"bg-gradient-to-br from-blue-50 to-purple-50 rounded-xl p-4 mb-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-lg font-bold text-gray-900\">Total Amount:</span>\n                    <span className=\"text-3xl font-black bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                      {searchedOrder.total.toFixed(2)} MAD\n                    </span>\n                  </div>\n                </div>\n\n                {searchedOrder.payment_status === 'UNPAID' ? (\n                  <div className=\"flex gap-3\">\n                    <button\n                      onClick={() => setSearchedOrder(null)}\n                      className=\"flex-1 py-3 px-6 bg-gray-100 hover:bg-gray-200 text-gray-700 font-semibold rounded-xl transition-all active:scale-95\"\n                    >\n                      Cancel\n                    </button>\n                    <button\n                      onClick={() => handleConfirmPayment(searchedOrder.id, searchedOrder.order_code)}\n                      disabled={loading}\n                      className=\"flex-1 py-3 px-6 bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white font-bold rounded-xl shadow-lg hover:shadow-xl transition-all active:scale-95 disabled:opacity-50 flex items-center justify-center gap-2\"\n                    >\n                      <CheckCircleIcon className=\"h-6 w-6\" />\n                      <span>Confirm Payment</span>\n                    </button>\n                  </div>\n                ) : (\n                  <div className=\"p-4 bg-green-50 border-2 border-green-200 rounded-xl text-center\">\n                    <CheckCircleIcon className=\"h-12 w-12 text-green-600 mx-auto mb-2\" />\n                    <p className=\"font-bold text-green-900\">Payment Already Confirmed</p>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n\n          <div className=\"lg:col-span-1\">\n            <div className=\"sticky top-4 bg-white rounded-2xl shadow-lg border border-gray-100 p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h2 className=\"text-xl font-bold text-gray-900\">Pending Payments</h2>\n                <span className=\"px-3 py-1 bg-yellow-100 text-yellow-700 font-bold rounded-full text-sm\">\n                  {pendingOrders.length}\n                </span>\n              </div>\n\n              <div className=\"space-y-3 max-h-[70vh] overflow-y-auto\">\n                {pendingOrders.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <ClockIcon className=\"h-12 w-12 text-gray-300 mx-auto mb-2\" />\n                    <p className=\"text-gray-500 font-medium\">No pending payments</p>\n                  </div>\n                ) : (\n                  pendingOrders.map((order) => (\n                    <div\n                      key={order.id}\n                      onClick={() => {\n                        setSearchCode(order.order_code)\n                        setSearchedOrder(order)\n                      }}\n                      className=\"p-4 bg-gradient-to-br from-yellow-50 to-orange-50 border-2 border-yellow-200 rounded-xl cursor-pointer hover:shadow-lg transition-all\"\n                    >\n                      <div className=\"flex justify-between items-start mb-2\">\n                        <div>\n                          <p className=\"font-bold text-gray-900\">{order.order_code}</p>\n                          <p className=\"text-sm text-gray-600\">Table #{order.table_number}</p>\n                        </div>\n                        <span className=\"text-lg font-bold text-orange-600\">\n                          {order.total.toFixed(2)} MAD\n                        </span>\n                      </div>\n                      <div className=\"flex items-center gap-2 text-xs text-gray-600\">\n                        <ClockIcon className=\"h-4 w-4\" />\n                        <span>{formatTime(order.created_at)}</span>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default CashierDashboard\n","size_bytes":11611},"frontend/src/pages/customer/templates/MinimalTemplate.jsx":{"content":"import React from 'react';\n\nexport default function MinimalTemplate({ menu, table, addItem, onSelectItem }) {\n  return (\n    <div className=\"max-w-7xl mx-auto px-4\">\n      <div className=\"mb-12 py-8 border-b border-gray-200\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-4xl font-light text-gray-900 tracking-tight\">Menu</h1>\n            {table && (\n              <p className=\"text-gray-500 mt-2\">Table № {table}</p>\n            )}\n          </div>\n          <div className=\"w-12 h-12 rounded-full bg-gray-900 flex items-center justify-center\">\n            <span className=\"text-white text-xl\">🍽</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"space-y-16\">\n        {menu.map((category) => (\n          <div key={category.id}>\n            <h2 className=\"text-2xl font-light text-gray-900 mb-8 pb-3 border-b border-gray-200\">\n              {category.name}\n            </h2>\n\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n              {category.items?.map((item) => (\n                <div\n                  key={item.id}\n                  onClick={() => onSelectItem(item)}\n                  className=\"group cursor-pointer bg-white border border-gray-200 rounded-lg overflow-hidden hover:border-gray-900 hover:shadow-md transition-all duration-200\"\n                >\n                  <div className=\"aspect-square relative overflow-hidden bg-gray-50\">\n                    <img\n                      src={item.image || \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=400&h=400&fit=crop\"}\n                      alt={item.name}\n                      className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                      onError={(e) => {\n                        e.target.src = \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=400&h=400&fit=crop\";\n                      }}\n                    />\n                  </div>\n                  <div className=\"p-4\">\n                    <h3 className=\"font-medium text-gray-900 mb-1 group-hover:text-gray-600 transition-colors\">\n                      {item.name}\n                    </h3>\n                    {item.description && (\n                      <p className=\"text-sm text-gray-500 mb-3 line-clamp-2\">\n                        {item.description}\n                      </p>\n                    )}\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-lg font-medium text-gray-900\">\n                        {parseFloat(item?.price || 0).toFixed(2)}\n                      </span>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          addItem(item);\n                        }}\n                        className=\"w-8 h-8 rounded-full border border-gray-900 flex items-center justify-center hover:bg-gray-900 hover:text-white transition-colors group-hover:scale-110\"\n                      >\n                        <svg className=\"w-4 h-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4v16m8-8H4\" />\n                        </svg>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3558},"frontend/src/pages/customer/templates/DefaultTemplate.jsx":{"content":"import React from 'react';\n\nexport default function DefaultTemplate({ menu, table, addItem, onSelectItem }) {\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      <div className=\"text-center mb-12 animate-fadeInUp\">\n        <div className=\"inline-flex items-center justify-center w-20 h-20 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full mb-6 shadow-xl\">\n          <span className=\"text-white font-bold text-2xl\">🍽️</span>\n        </div>\n        <h1 className=\"text-4xl font-bold gradient-text mb-4\">\n          Our Delicious Menu\n        </h1>\n        {table && <p className=\"text-xl text-gray-600\">Table {table}</p>}\n        <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n          Discover our carefully crafted dishes made with love and the finest ingredients\n        </p>\n      </div>\n\n      <div className=\"space-y-8\">\n        {menu.map((category) => (\n          <div key={category.id} className=\"card\">\n            <div className=\"card-header\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">{category.name}</h2>\n            </div>\n            <div className=\"card-body\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {category.items?.map((item) => (\n                  <div\n                    key={item.id}\n                    className=\"menu-item-card group\"\n                    onClick={() => onSelectItem(item)}\n                  >\n                    <div className=\"relative overflow-hidden\">\n                      <img\n                        src={item.image || \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=400&h=300&fit=crop\"}\n                        alt={item.name}\n                        className=\"menu-item-image\"\n                        onError={(e) => {\n                          e.target.src = \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=400&h=300&fit=crop\";\n                        }}\n                      />\n                      <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n                      <div className=\"absolute top-4 right-4 bg-white/90 backdrop-blur-sm rounded-full px-3 py-1 text-sm font-semibold text-gray-800 shadow-lg\">\n                        {parseFloat(item?.price || 0).toFixed(2)} MAD\n                      </div>\n                    </div>\n                    <div className=\"p-6\">\n                      <h3 className=\"font-bold text-gray-900 text-lg mb-2 group-hover:text-blue-600 transition-colors duration-200\">\n                        {item.name}\n                      </h3>\n                      {item.description && (\n                        <p className=\"text-gray-600 mb-4 line-clamp-2\">{item.description}</p>\n                      )}\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          addItem(item);\n                        }}\n                        className=\"btn-primary w-full group-hover:animate-bounce transition-transform duration-200 rounded-md h-10 flex items-center justify-center\"\n                      >\n                        Add to Cart\n                      </button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3449},"frontend/src/pages/customer/templates/ElegantTemplate.jsx":{"content":"import React from 'react';\n\nexport default function ElegantTemplate({ menu, table, addItem, onSelectItem }) {\n  return (\n    <div className=\"max-w-5xl mx-auto\">\n      <div className=\"text-center mb-16 py-12 bg-gradient-to-r from-amber-50 to-orange-50 -mx-4 px-4 rounded-3xl\">\n        <div className=\"mb-4\">\n          <span className=\"text-6xl\">🍷</span>\n        </div>\n        <h1 className=\"text-5xl font-serif font-bold text-gray-900 mb-3\">\n          Culinary Excellence\n        </h1>\n        {table && (\n          <div className=\"inline-block px-6 py-2 bg-white rounded-full shadow-sm mb-4\">\n            <span className=\"text-gray-600\">Table</span>\n            <span className=\"ml-2 font-bold text-gray-900\">{table}</span>\n          </div>\n        )}\n        <p className=\"text-gray-600 max-w-2xl mx-auto text-lg italic\">\n          \"Where every dish tells a story\"\n        </p>\n      </div>\n\n      <div className=\"space-y-16\">\n        {menu.map((category) => (\n          <div key={category.id}>\n            <div className=\"text-center mb-10\">\n              <h2 className=\"text-3xl font-serif font-bold text-gray-900 mb-2\">\n                {category.name}\n              </h2>\n              <div className=\"w-24 h-1 bg-gradient-to-r from-amber-400 to-orange-400 mx-auto rounded-full\"></div>\n            </div>\n\n            <div className=\"space-y-6\">\n              {category.items?.map((item, idx) => (\n                <div\n                  key={item.id}\n                  onClick={() => onSelectItem(item)}\n                  className={`group cursor-pointer bg-white rounded-2xl overflow-hidden hover:shadow-2xl transition-all duration-500 border border-gray-100 ${idx % 2 === 0 ? 'hover:translate-x-2' : 'hover:-translate-x-2'}`}\n                >\n                  <div className=\"flex flex-col md:flex-row\">\n                    <div className=\"md:w-2/5 relative overflow-hidden\">\n                      <img\n                        src={item.image || \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=600&h=400&fit=crop\"}\n                        alt={item.name}\n                        className=\"w-full h-64 md:h-full object-cover group-hover:scale-110 transition-transform duration-700\"\n                        onError={(e) => {\n                          e.target.src = \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=600&h=400&fit=crop\";\n                        }}\n                      />\n                      <div className=\"absolute inset-0 bg-gradient-to-t from-black/40 via-transparent to-transparent\"></div>\n                    </div>\n                    <div className=\"md:w-3/5 p-8 flex flex-col justify-between\">\n                      <div>\n                        <div className=\"flex justify-between items-start mb-4\">\n                          <h3 className=\"text-2xl font-serif font-bold text-gray-900 group-hover:text-amber-600 transition-colors\">\n                            {item.name}\n                          </h3>\n                          <div className=\"ml-4 flex-shrink-0\">\n                            <span className=\"text-3xl font-bold bg-gradient-to-r from-amber-600 to-orange-600 bg-clip-text text-transparent\">\n                              {parseFloat(item?.price || 0).toFixed(2)}\n                            </span>\n                            <span className=\"text-sm text-gray-500 ml-1\">MAD</span>\n                          </div>\n                        </div>\n                        {item.description && (\n                          <p className=\"text-gray-600 leading-relaxed mb-6\">\n                            {item.description}\n                          </p>\n                        )}\n                      </div>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          addItem(item);\n                        }}\n                        className=\"self-start px-8 py-3 bg-gradient-to-r from-amber-500 to-orange-500 text-white rounded-full hover:shadow-lg hover:scale-105 transition-all duration-300 font-medium\"\n                      >\n                        Add to Order\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4339},"frontend/src/pages/customer/templates/ModernTemplate.jsx":{"content":"import React from 'react';\n\nexport default function ModernTemplate({ menu, table, addItem, onSelectItem }) {\n  return (\n    <div className=\"max-w-6xl mx-auto px-4\">\n      <div className=\"mb-16 pt-8\">\n        <div className=\"flex items-center gap-3 mb-6\">\n          <div className=\"w-1 h-12 bg-gradient-to-b from-blue-600 to-blue-400\"></div>\n          <div>\n            <h1 className=\"text-5xl font-bold text-gray-900\">Menu</h1>\n            {table && <p className=\"text-lg text-gray-500 mt-1\">Table {table}</p>}\n          </div>\n        </div>\n        <p className=\"text-gray-600 text-lg max-w-2xl\">\n          Fresh ingredients, bold flavors, exceptional experience\n        </p>\n      </div>\n\n      <div className=\"space-y-20\">\n        {menu.map((category, idx) => (\n          <div key={category.id} className=\"relative\">\n            <div className=\"flex items-center gap-6 mb-8\">\n              <h2 className=\"text-3xl font-bold text-gray-900\">{category.name}</h2>\n              <div className=\"flex-1 h-px bg-gray-200\"></div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {category.items?.map((item) => (\n                <div\n                  key={item.id}\n                  onClick={() => onSelectItem(item)}\n                  className=\"group cursor-pointer bg-white rounded-2xl overflow-hidden hover:shadow-xl transition-all duration-300 border border-gray-100\"\n                >\n                  <div className=\"flex gap-6 p-6\">\n                    <div className=\"flex-shrink-0\">\n                      <img\n                        src={item.image || \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=200&h=200&fit=crop\"}\n                        alt={item.name}\n                        className=\"w-32 h-32 object-cover rounded-xl\"\n                        onError={(e) => {\n                          e.target.src = \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?w=200&h=200&fit=crop\";\n                        }}\n                      />\n                    </div>\n                    <div className=\"flex-1 flex flex-col justify-between\">\n                      <div>\n                        <h3 className=\"text-xl font-bold text-gray-900 mb-2 group-hover:text-blue-600 transition-colors\">\n                          {item.name}\n                        </h3>\n                        {item.description && (\n                          <p className=\"text-gray-600 text-sm line-clamp-2 mb-3\">\n                            {item.description}\n                          </p>\n                        )}\n                      </div>\n                      <div className=\"flex items-end justify-between\">\n                        <span className=\"text-2xl font-bold text-gray-900\">\n                          {parseFloat(item?.price || 0).toFixed(2)} <span className=\"text-lg text-gray-500\">MAD</span>\n                        </span>\n                        <button\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            addItem(item);\n                          }}\n                          className=\"px-6 py-2 bg-gray-900 text-white rounded-full hover:bg-blue-600 transition-colors text-sm font-medium\"\n                        >\n                          Add\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3531},"frontend/src/utils/format.js":{"content":"export function formatCurrency(value) {\n  const n = parseFloat(value)\n  return (Number.isFinite(n) ? n : 0).toFixed(2)\n}\n\nexport default formatCurrency\n","size_bytes":152},"server/src/migrations/20251028000001_enhance_inventory_tracking.js":{"content":"exports.up = function(knex) {\n  return knex.schema\n    .table('stock_movements', table => {\n      table.integer('user_id').unsigned();\n      table.integer('order_id').unsigned();\n      table.string('type').defaultTo('manual');\n      table.foreign('user_id').references('id').inTable('users');\n      table.foreign('order_id').references('id').inTable('orders');\n    })\n    .createTable('low_stock_alerts', table => {\n      table.increments('id').primary();\n      table.integer('stock_item_id').unsigned();\n      table.integer('branch_id').unsigned();\n      table.decimal('current_quantity', 10, 2);\n      table.decimal('min_threshold', 10, 2);\n      table.boolean('is_resolved').defaultTo(false);\n      table.timestamp('resolved_at');\n      table.timestamps(true, true);\n      table.foreign('stock_item_id').references('id').inTable('stock_items');\n      table.foreign('branch_id').references('id').inTable('branches');\n    });\n};\n\nexports.down = function(knex) {\n  return knex.schema\n    .dropTableIfExists('low_stock_alerts')\n    .table('stock_movements', table => {\n      table.dropForeign('user_id');\n      table.dropForeign('order_id');\n      table.dropColumn('user_id');\n      table.dropColumn('order_id');\n      table.dropColumn('type');\n    });\n};\n","size_bytes":1255},"server/src/migrations/20251029000001_add_contact_fields_to_settings.js":{"content":"exports.up = function(knex) {\n  return knex.schema.table('settings', function(table) {\n    table.text('restaurant_address').nullable();\n    table.string('restaurant_phone', 20).nullable();\n    table.string('restaurant_email', 255).nullable();\n  });\n};\n\nexports.down = function(knex) {\n  return knex.schema.table('settings', function(table) {\n    table.dropColumn('restaurant_address');\n    table.dropColumn('restaurant_phone');\n    table.dropColumn('restaurant_email');\n  });\n};","size_bytes":478},"server/update_schema.js":{"content":"const { db } = require('./src/database/init');\n\nasync function updateSchema() {\n  try {\n    console.log('📦 Updating database schema...');\n    \n    const stockMovementsInfo = await db.raw(\"PRAGMA table_info('stock_movements')\");\n    const stockMovementsColumns = stockMovementsInfo.map(col => col.name);\n    \n    if (!stockMovementsColumns.includes('user_id')) {\n      console.log('Adding user_id, order_id, and type columns to stock_movements...');\n      await db.schema.table('stock_movements', table => {\n        table.integer('user_id').unsigned();\n        table.integer('order_id').unsigned();\n        table.string('type').defaultTo('manual');\n      });\n      console.log('✅ stock_movements table updated');\n    } else {\n      console.log('✅ stock_movements table already has new columns');\n    }\n    \n    const hasLowStockAlerts = await db.schema.hasTable('low_stock_alerts');\n    if (!hasLowStockAlerts) {\n      console.log('Creating low_stock_alerts table...');\n      await db.schema.createTable('low_stock_alerts', table => {\n        table.increments('id').primary();\n        table.integer('stock_item_id').unsigned();\n        table.integer('branch_id').unsigned();\n        table.decimal('current_quantity', 10, 2);\n        table.decimal('min_threshold', 10, 2);\n        table.boolean('is_resolved').defaultTo(false);\n        table.timestamp('resolved_at');\n        table.timestamps(true, true);\n        table.foreign('stock_item_id').references('id').inTable('stock_items');\n        table.foreign('branch_id').references('id').inTable('branches');\n      });\n      console.log('✅ low_stock_alerts table created');\n    } else {\n      console.log('✅ low_stock_alerts table already exists');\n    }\n    \n    console.log('✅ Schema update completed!');\n    process.exit(0);\n  } catch (error) {\n    console.error('❌ Schema update failed:', error);\n    process.exit(1);\n  }\n}\n\nupdateSchema();\n","size_bytes":1908},"frontend/src/pages/admin/InventoryHistoryTab.jsx":{"content":"import { useState, useEffect } from 'react'\nimport { inventoryAPI } from '../../services/api'\nimport { format } from 'date-fns'\nimport { \n  ArrowTrendingUpIcon, \n  ArrowTrendingDownIcon,\n  FunnelIcon\n} from '@heroicons/react/24/outline'\nimport toast from 'react-hot-toast'\n\nfunction InventoryHistoryTab() {\n  const [history, setHistory] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [filterType, setFilterType] = useState('all')\n\n  useEffect(() => {\n    loadHistory()\n  }, [filterType])\n\n  const loadHistory = async () => {\n    try {\n      setLoading(true)\n      const params = filterType !== 'all' ? { type: filterType } : {}\n      const response = await inventoryAPI.getInventoryHistory(params)\n      \n      if (response.data.success) {\n        setHistory(response.data.history || [])\n      }\n    } catch (error) {\n      toast.error('Failed to load inventory history')\n      console.error('History load error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const formatDate = (dateString) => {\n    try {\n      return format(new Date(dateString), 'MMM d, yyyy HH:mm')\n    } catch {\n      return dateString\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"text-center\">\n          <div className=\"loading-spinner mb-4\"></div>\n          <p className=\"text-gray-600\">Loading history...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Filter */}\n      <div className=\"flex items-center gap-4\">\n        <FunnelIcon className=\"h-5 w-5 text-gray-500\" />\n        <select\n          value={filterType}\n          onChange={(e) => setFilterType(e.target.value)}\n          className=\"input\"\n        >\n          <option value=\"all\">All Transactions</option>\n          <option value=\"manual\">Manual Adjustments</option>\n          <option value=\"order\">Order Deductions</option>\n        </select>\n      </div>\n\n      {/* History Table */}\n      <div className=\"card\">\n        <div className=\"card-body\">\n          {history.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-gray-500\">No history found</p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Date\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Item\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Change\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Type\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Reason\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      User\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {history.map((record) => (\n                    <tr key={record.id}>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {formatDate(record.created_at)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div>\n                          <div className=\"text-sm font-medium text-gray-900\">\n                            {record.stock_item_name || 'Unknown'}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            {record.sku || 'No SKU'}\n                          </div>\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"flex items-center\">\n                          {parseFloat(record.change) > 0 ? (\n                            <ArrowTrendingUpIcon className=\"h-4 w-4 text-green-500 mr-1\" />\n                          ) : (\n                            <ArrowTrendingDownIcon className=\"h-4 w-4 text-red-500 mr-1\" />\n                          )}\n                          <span className={`text-sm font-semibold ${\n                            parseFloat(record.change) > 0 ? 'text-green-600' : 'text-red-600'\n                          }`}>\n                            {parseFloat(record.change) > 0 ? '+' : ''}\n                            {record.change} {record.unit}\n                          </span>\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <span className={`badge ${\n                          record.type === 'order' \n                            ? 'bg-blue-100 text-blue-800' \n                            : 'bg-gray-100 text-gray-800'\n                        }`}>\n                          {record.type === 'order' ? 'Order' : 'Manual'}\n                        </span>\n                      </td>\n                      <td className=\"px-6 py-4 text-sm text-gray-900 max-w-xs truncate\">\n                        {record.reason}\n                        {record.order_code && (\n                          <span className=\"ml-2 text-blue-600\">\n                            ({record.order_code})\n                          </span>\n                        )}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {record.full_name || record.user_name || 'System'}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default InventoryHistoryTab\n","size_bytes":6381},"frontend/src/pages/admin/RecipesManagementTab.jsx":{"content":"import { useState, useEffect } from 'react'\nimport { inventoryAPI, menuAPI } from '../../services/api'\nimport { PlusIcon, TrashIcon } from '@heroicons/react/24/outline'\nimport RecipeForm from '../../components/RecipeForm'\nimport toast from 'react-hot-toast'\n\nfunction RecipesManagementTab() {\n  const [recipes, setRecipes] = useState([])\n  const [menuItems, setMenuItems] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [showRecipeForm, setShowRecipeForm] = useState(false)\n  const [groupedRecipes, setGroupedRecipes] = useState({})\n\n  useEffect(() => {\n    loadData()\n  }, [])\n\n  const loadData = async () => {\n    try {\n      setLoading(true)\n      const [recipesRes, menuRes] = await Promise.all([\n        inventoryAPI.getRecipes(),\n        menuAPI.getMenuItems()\n      ])\n      \n      if (recipesRes.data) {\n        const recipesData = recipesRes.data.recipes || []\n        setRecipes(recipesData)\n        \n        // Group recipes by menu item\n        const grouped = recipesData.reduce((acc, recipe) => {\n          const menuItemId = recipe.menu_item_id\n          if (!acc[menuItemId]) {\n            acc[menuItemId] = {\n              menuItem: recipe.menu_item_name,\n              ingredients: []\n            }\n          }\n          acc[menuItemId].ingredients.push(recipe)\n          return acc\n        }, {})\n        setGroupedRecipes(grouped)\n      }\n      \n      if (menuRes.data.success) {\n        setMenuItems(menuRes.data.items || [])\n      }\n    } catch (error) {\n      toast.error('Failed to load recipes')\n      console.error('Recipes load error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleDeleteRecipe = async (recipeId) => {\n    if (!window.confirm('Are you sure you want to delete this recipe ingredient?')) {\n      return\n    }\n\n    try {\n      await inventoryAPI.deleteRecipe(recipeId)\n      toast.success('Recipe ingredient deleted')\n      loadData()\n    } catch (error) {\n      console.error('Delete recipe error:', error)\n      toast.error('Failed to delete recipe ingredient')\n    }\n  }\n\n  const handleSaveRecipe = () => {\n    setShowRecipeForm(false)\n    loadData()\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"text-center\">\n          <div className=\"loading-spinner mb-4\"></div>\n          <p className=\"text-gray-600\">Loading recipes...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <p className=\"text-sm text-gray-600\">\n          Link menu items with their ingredients to enable automatic inventory deduction\n        </p>\n        <button\n          onClick={() => setShowRecipeForm(true)}\n          className=\"btn-primary\"\n        >\n          <PlusIcon className=\"h-5 w-5 mr-2\" />\n          Add Recipe\n        </button>\n      </div>\n\n      {Object.keys(groupedRecipes).length === 0 ? (\n        <div className=\"card\">\n          <div className=\"card-body text-center py-12\">\n            <p className=\"text-gray-500 mb-4\">No recipes configured yet</p>\n            <button\n              onClick={() => setShowRecipeForm(true)}\n              className=\"btn-primary\"\n            >\n              Create First Recipe\n            </button>\n          </div>\n        </div>\n      ) : (\n        <div className=\"space-y-4\">\n          {Object.entries(groupedRecipes).map(([menuItemId, data]) => (\n            <div key={menuItemId} className=\"card\">\n              <div className=\"card-header\">\n                <h3 className=\"text-lg font-semibold text-gray-900\">\n                  {data.menuItem}\n                </h3>\n              </div>\n              <div className=\"card-body\">\n                <div className=\"space-y-2\">\n                  {data.ingredients.map((recipe) => (\n                    <div \n                      key={recipe.id}\n                      className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\"\n                    >\n                      <div className=\"flex-1\">\n                        <span className=\"text-sm font-medium text-gray-900\">\n                          {recipe.stock_item_name}\n                        </span>\n                        <span className=\"mx-2 text-gray-400\">→</span>\n                        <span className=\"text-sm text-gray-700\">\n                          {recipe.qty_per_serving} {recipe.unit} per serving\n                        </span>\n                        {recipe.stock_item_sku && (\n                          <span className=\"ml-2 text-xs text-gray-500\">\n                            (SKU: {recipe.stock_item_sku})\n                          </span>\n                        )}\n                      </div>\n                      <button\n                        onClick={() => handleDeleteRecipe(recipe.id)}\n                        className=\"text-red-600 hover:text-red-800\"\n                      >\n                        <TrashIcon className=\"h-4 w-4\" />\n                      </button>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Recipe Form Modal */}\n      {showRecipeForm && (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"p-6\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h2 className=\"text-xl font-semibold text-gray-900\">\n                  Add Recipe\n                </h2>\n                <button\n                  onClick={() => setShowRecipeForm(false)}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  <span className=\"sr-only\">Close</span>\n                  <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                  </svg>\n                </button>\n              </div>\n\n              <RecipeForm\n                onSave={handleSaveRecipe}\n                onCancel={() => setShowRecipeForm(false)}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default RecipesManagementTab\n","size_bytes":6417},"frontend/src/components/templates/MinimalInvoice.jsx":{"content":"import React from 'react';\n\nconst MinimalInvoice = ({ order, businessInfo }) => {\n  // Check if order exists\n  if (!order || !businessInfo) {\n    return (\n      <div className=\"p-8 bg-white\" style={{ width: '210mm', minHeight: '297mm' }}>\n        <p className=\"text-center text-gray-500 mt-20\">Loading invoice data...</p>\n      </div>\n    );\n  }\n\n  const subtotal = (order.total || 0) - (order.tax || 0) - (order.service_charge || 0);\n\n  return (\n    <div className=\"invoice-minimal bg-white\" style={{ width: '210mm', minHeight: '297mm', fontFamily: 'system-ui, sans-serif' }}>\n      {/* Header */}\n      <div className=\"text-center pt-12 pb-8 px-8\">\n        {businessInfo.logoUrl && (\n          <img \n            src={businessInfo.logoUrl} \n            alt={businessInfo.name}\n            className=\"h-16 w-16 object-contain mx-auto mb-4\"\n          />\n        )}\n        <h1 className=\"text-3xl font-light tracking-wide text-gray-800 mb-2\">{businessInfo.name}</h1>\n        {businessInfo.address && <p className=\"text-xs text-gray-500\">{businessInfo.address}</p>}\n        <div className=\"flex justify-center gap-3 text-xs text-gray-500 mt-2\">\n          {businessInfo.phone && <span>{businessInfo.phone}</span>}\n          {businessInfo.email && <span>• {businessInfo.email}</span>}\n        </div>\n      </div>\n\n      {/* Divider */}\n      <div className=\"px-8\">\n        <div className=\"border-t border-gray-300\"></div>\n      </div>\n\n      {/* Invoice Info */}\n      <div className=\"px-8 py-6\">\n        <div className=\"flex justify-between items-start text-sm\">\n          <div>\n            <p className=\"text-xs text-gray-500 uppercase tracking-wide mb-1\">Invoice</p>\n            <p className=\"font-medium text-gray-800\">#{order.order_code || 'N/A'}</p>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-xs text-gray-500 uppercase tracking-wide mb-1\">Date</p>\n            <p className=\"font-medium text-gray-800\">\n              {order.created_at ? new Date(order.created_at).toLocaleDateString('en-US', { \n                month: 'short', \n                day: 'numeric', \n                year: 'numeric' \n              }) : 'N/A'}\n            </p>\n          </div>\n        </div>\n\n        {/* Customer Info */}\n        <div className=\"mt-6\">\n          <p className=\"text-xs text-gray-500 uppercase tracking-wide mb-2\">Billed To</p>\n          <p className=\"font-medium text-gray-800\">{order.customer_name || 'Walk-in Customer'}</p>\n          {order.table_number && (\n            <p className=\"text-sm text-gray-600 mt-1\">Table {order.table_number}</p>\n          )}\n        </div>\n      </div>\n\n      {/* Items */}\n      <div className=\"px-8 py-6\">\n        <div className=\"border-t border-b border-gray-300 py-4\">\n          {order.items && order.items.length > 0 ? order.items.map((item, index) => {\n            const itemTotal = ((item.unit_price || 0) * (item.quantity || 0)) + \n              (item.modifiers?.reduce((sum, mod) => sum + ((mod.extra_price || 0) * (item.quantity || 0)), 0) || 0);\n            \n            return (\n              <div key={index} className=\"flex justify-between py-3 border-b border-gray-100 last:border-b-0\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-baseline gap-2\">\n                    <span className=\"text-gray-500 text-sm\">{item.quantity}×</span>\n                    <span className=\"text-gray-800 font-medium\">{item.menu_item_name || item.item_name}</span>\n                  </div>\n                  {item.modifiers && item.modifiers.length > 0 && (\n                    <div className=\"ml-6 mt-1\">\n                      {item.modifiers.map((mod, idx) => (\n                        <p key={idx} className=\"text-xs text-gray-500\">\n                          + {mod.name} (+{mod.extra_price} {businessInfo.currency})\n                        </p>\n                      ))}\n                    </div>\n                  )}\n                  {item.note && (\n                    <p className=\"ml-6 mt-1 text-xs text-gray-500 italic\">{item.note}</p>\n                  )}\n                  <p className=\"ml-6 mt-1 text-xs text-gray-400\">\n                    {(item.unit_price || 0).toFixed(2)} {businessInfo.currency} each\n                  </p>\n                </div>\n                <div className=\"text-right ml-4\">\n                  <p className=\"font-medium text-gray-800\">{itemTotal.toFixed(2)}</p>\n                  <p className=\"text-xs text-gray-400\">{businessInfo.currency}</p>\n                </div>\n              </div>\n            );\n          }) : (\n            <p className=\"text-center py-4 text-gray-500 text-sm\">No items found</p>\n          )}\n        </div>\n      </div>\n\n      {/* Totals */}\n      <div className=\"px-8 pb-8\">\n        <div className=\"flex justify-end\">\n          <div className=\"w-72 space-y-2 text-sm\">\n            <div className=\"flex justify-between text-gray-600\">\n              <span>Subtotal</span>\n              <span>{subtotal.toFixed(2)} {businessInfo.currency}</span>\n            </div>\n            \n            {(order.tax || 0) > 0 && (\n              <div className=\"flex justify-between text-gray-600\">\n                <span>Tax {businessInfo.taxRate ? `(${businessInfo.taxRate}%)` : ''}</span>\n                <span>{(order.tax || 0).toFixed(2)} {businessInfo.currency}</span>\n              </div>\n            )}\n            \n            {(order.service_charge || 0) > 0 && (\n              <div className=\"flex justify-between text-gray-600\">\n                <span>Service {businessInfo.serviceCharge ? `(${businessInfo.serviceCharge}%)` : ''}</span>\n                <span>{(order.service_charge || 0).toFixed(2)} {businessInfo.currency}</span>\n              </div>\n            )}\n            \n            <div className=\"border-t border-gray-300 pt-3 mt-3\">\n              <div className=\"flex justify-between text-lg font-medium text-gray-900\">\n                <span>Total</span>\n                <span>{(order.total || 0).toFixed(2)} {businessInfo.currency}</span>\n              </div>\n            </div>\n\n            {/* Payment Status */}\n            <div className=\"pt-3 border-t border-gray-200 mt-3\">\n              {/* <div className=\"flex justify-between text-xs\">\n                <span className=\"text-gray-500\">Payment Status</span>\n                <span className=\"font-medium text-gray-700 capitalize\">{order.payment_status || 'Pending'}</span>\n              </div> */}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div className=\"px-8 pt-12 pb-12 text-center border-t border-gray-200 mt-8\">\n        {/* {businessInfo.welcomeMessage && (\n          <p className=\"text-sm text-gray-600 mb-3\">{businessInfo.welcomeMessage}</p>\n        )} */}\n        {businessInfo.logoUrl && (\n          <img \n            src={businessInfo.logoUrl} \n            alt={businessInfo.name}\n            className=\"h-10 w-10 object-contain mx-auto mb-3 opacity-40\"\n          />\n        )}\n        <p className=\"text-xs text-gray-400 tracking-wide\">\n          Your satisfaction is our priority\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default MinimalInvoice;","size_bytes":7159},"frontend/src/components/templates/ModernInvoice.jsx":{"content":"import React from 'react';\n\nconst ModernInvoice = ({ order, businessInfo }) => {\n  // Check if order exists\n  if (!order || !businessInfo) {\n    return (\n      <div className=\"p-8 bg-white\" style={{ width: '210mm', minHeight: '297mm' }}>\n        <p className=\"text-center text-gray-500 mt-20\">Loading invoice data...</p>\n      </div>\n    );\n  }\n\n  const subtotal = (order.total || 0) - (order.tax || 0) - (order.service_charge || 0);\n\n  return (\n    <div className=\"invoice-modern bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 p-8\" style={{ width: '210mm', minHeight: '297mm' }}>\n      <div className=\"bg-white rounded-3xl shadow-2xl overflow-hidden h-full\">\n        {/* Header with gradient accent */}\n        <div className=\"bg-gradient-to-r from-blue-600 to-indigo-600 text-white p-8\">\n          <div className=\"flex justify-between items-start\">\n            <div className=\"flex items-center gap-4\">\n              {businessInfo.logoUrl && (\n                <div className=\"bg-white rounded-xl p-2\">\n                  <img \n                    src={businessInfo.logoUrl} \n                    alt={businessInfo.name}\n                    className=\"h-14 w-14 object-contain\"\n                  />\n                </div>\n              )}\n              <div>\n                <h1 className=\"text-3xl font-bold mb-1\">{businessInfo.name}</h1>\n                {businessInfo.address && <p className=\"text-blue-100 text-sm\">{businessInfo.address}</p>}\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-blue-100 text-sm uppercase tracking-wider mb-1\">Invoice</p>\n              <p className=\"text-2xl font-bold\">#{order.order_code || 'N/A'}</p>\n              <p className=\"text-blue-100 text-sm mt-2\">\n                {order.created_at ? new Date(order.created_at).toLocaleDateString('en-US', { \n                  month: 'short', \n                  day: 'numeric', \n                  year: 'numeric' \n                }) : 'N/A'}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Business Contact Info Bar */}\n        <div className=\"bg-gray-50 px-8 py-3 flex justify-center gap-6 text-sm text-gray-600 border-b border-gray-200\">\n          {businessInfo.phone && (\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-blue-600\">📞</span>\n              <span>{businessInfo.phone}</span>\n            </div>\n          )}\n          {businessInfo.email && (\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-blue-600\">✉️</span>\n              <span>{businessInfo.email}</span>\n            </div>\n          )}\n        </div>\n\n        <div className=\"p-8\">\n          {/* Bill To Section */}\n          <div className=\"grid grid-cols-2 gap-8 mb-8\">\n            <div className=\"bg-gradient-to-br from-blue-50 to-indigo-50 rounded-xl p-5\">\n              <p className=\"text-xs font-semibold text-blue-600 uppercase tracking-wider mb-3\">Bill To</p>\n              <p className=\"text-lg font-bold text-gray-900\">{order.customer_name || 'Walk-in Customer'}</p>\n              {order.table_number && (\n                <p className=\"text-sm text-gray-600 mt-2\">Table {order.table_number}</p>\n              )}\n              {order.pin && (\n                <p className=\"text-sm text-gray-600\">PIN: {order.pin}</p>\n              )}\n            </div>\n\n            <div className=\"bg-gradient-to-br from-purple-50 to-pink-50 rounded-xl p-5\">\n              <p className=\"text-xs font-semibold text-purple-600 uppercase tracking-wider mb-3\">Invoice Date</p>\n              <p className=\"text-lg font-bold text-gray-900\">\n                {order.created_at ? new Date(order.created_at).toLocaleDateString('en-US', { \n                  weekday: 'long',\n                  year: 'numeric', \n                  month: 'long', \n                  day: 'numeric' \n                }) : 'N/A'}\n              </p>\n              <p className=\"text-sm text-gray-600 mt-2\">\n                {order.created_at ? new Date(order.created_at).toLocaleTimeString('en-US', { \n                  hour: '2-digit', \n                  minute: '2-digit'\n                }) : 'N/A'}\n              </p>\n            </div>\n          </div>\n\n          {/* Items Table */}\n          <div className=\"mb-8\">\n            <div className=\"bg-gray-50 rounded-xl overflow-hidden\">\n              <div className=\"bg-gradient-to-r from-gray-800 to-gray-700 text-white px-6 py-3 grid grid-cols-12 gap-4 text-sm font-semibold\">\n                <div className=\"col-span-6\">ITEM DESCRIPTION</div>\n                <div className=\"col-span-2 text-center\">QTY</div>\n                <div className=\"col-span-2 text-right\">UNIT PRICE</div>\n                <div className=\"col-span-2 text-right\">AMOUNT</div>\n              </div>\n              \n              <div className=\"divide-y divide-gray-200\">\n                {order.items && order.items.length > 0 ? order.items.map((item, index) => {\n                  const itemTotal = ((item.unit_price || 0) * (item.quantity || 0)) + \n                    (item.modifiers?.reduce((sum, mod) => sum + ((mod.extra_price || 0) * (item.quantity || 0)), 0) || 0);\n                  \n                  return (\n                    <div key={index} className=\"px-6 py-4 grid grid-cols-12 gap-4 items-center hover:bg-blue-50 transition-colors\">\n                      <div className=\"col-span-6\">\n                        <p className=\"font-semibold text-gray-900\">{item.menu_item_name || item.item_name}</p>\n                        {item.modifiers && item.modifiers.length > 0 && (\n                          <div className=\"mt-1 space-y-1\">\n                            {item.modifiers.map((mod, idx) => (\n                              <p key={idx} className=\"text-xs text-gray-500 ml-2\">\n                                + {mod.name} (+{mod.extra_price} {businessInfo.currency})\n                              </p>\n                            ))}\n                          </div>\n                        )}\n                        {item.note && (\n                          <p className=\"text-xs text-gray-500 italic mt-1\">{item.note}</p>\n                        )}\n                      </div>\n                      <div className=\"col-span-2 text-center\">\n                        <span className=\"inline-flex items-center justify-center bg-blue-100 text-blue-800 font-semibold rounded-lg px-3 py-1\">\n                          {item.quantity}\n                        </span>\n                      </div>\n                      <div className=\"col-span-2 text-right text-gray-700\">\n                        {(item.unit_price || 0).toFixed(2)} {businessInfo.currency}\n                      </div>\n                      <div className=\"col-span-2 text-right font-bold text-gray-900\">\n                        {itemTotal.toFixed(2)} {businessInfo.currency}\n                      </div>\n                    </div>\n                  );\n                }) : (\n                  <div className=\"px-6 py-8 text-center text-gray-500\">\n                    No items found\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Totals Section */}\n          <div className=\"flex justify-end mb-8\">\n            <div className=\"w-96\">\n              <div className=\"bg-gradient-to-br from-gray-50 to-blue-50 rounded-xl p-6 space-y-3\">\n                <div className=\"flex justify-between text-gray-700\">\n                  <span className=\"font-medium\">Subtotal</span>\n                  <span className=\"font-semibold\">{subtotal.toFixed(2)} {businessInfo.currency}</span>\n                </div>\n                \n                {(order.tax || 0) > 0 && (\n                  <div className=\"flex justify-between text-gray-700\">\n                    <span className=\"font-medium\">Tax {businessInfo.taxRate ? `(${businessInfo.taxRate}%)` : ''}</span>\n                    <span className=\"font-semibold\">{(order.tax || 0).toFixed(2)} {businessInfo.currency}</span>\n                  </div>\n                )}\n                \n                {(order.service_charge || 0) > 0 && (\n                  <div className=\"flex justify-between text-gray-700\">\n                    <span className=\"font-medium\">Service Charge {businessInfo.serviceCharge ? `(${businessInfo.serviceCharge}%)` : ''}</span>\n                    <span className=\"font-semibold\">{(order.service_charge || 0).toFixed(2)} {businessInfo.currency}</span>\n                  </div>\n                )}\n                \n                <div className=\"border-t-2 border-blue-200 pt-3 mt-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-xl font-bold text-gray-900\">TOTAL</span>\n                    <span className=\"text-2xl font-bold text-blue-600\">{(order.total || 0).toFixed(2)} {businessInfo.currency}</span>\n                  </div>\n                </div>\n\n                {/* Payment Status Badge */}\n                <div className=\"pt-3 border-t border-blue-200\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Payment Status</span>\n                    <span className=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold bg-green-100 text-green-800 capitalize\">\n                      {order.payment_status || 'Pending'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"bg-gradient-to-r from-gray-50 to-blue-50 px-8 py-6 border-t border-gray-200\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              {businessInfo.welcomeMessage && (\n                <p className=\"text-gray-700 font-medium mb-2\">{businessInfo.welcomeMessage}</p>\n              )}\n              <p className=\"text-sm text-gray-500\">\n                Questions? Contact us at {businessInfo.email || businessInfo.phone || 'our support desk'}\n              </p>\n            </div>\n            {businessInfo.logoUrl && (\n              <div className=\"bg-white rounded-xl p-3 shadow-md\">\n                <img \n                  src={businessInfo.logoUrl} \n                  alt={businessInfo.name}\n                  className=\"h-12 w-12 object-contain\"\n                />\n              </div>\n            )}\n          </div>\n          <div className=\"mt-4 pt-4 border-t border-gray-300 text-center\">\n            <p className=\"text-xs text-gray-500\">\n              This is a computer-generated invoice. Thank you for choosing {businessInfo.name}\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ModernInvoice;","size_bytes":10805},"frontend/src/components/templates/DefaultInvoice.jsx":{"content":"import React from 'react';\n\nconst DefaultInvoice = ({ order, businessInfo }) => {\n  console.log('🟢 Rendering DefaultInvoice with businessInfo:', businessInfo);\n  \n  // Check if order exists\n  if (!order || !businessInfo) {\n    return (\n      <div className=\"p-8 bg-white\" style={{ width: '210mm', minHeight: '297mm' }}>\n        <p className=\"text-center text-gray-500 mt-20\">Loading invoice data...</p>\n      </div>\n    );\n  }\n  \n  // Calculate subtotal\n  const subtotal = (order.total || 0) - (order.tax || 0) - (order.service_charge || 0);\n  \n  return (\n    <div className=\"invoice-default bg-white\" style={{ width: '210mm', minHeight: '297mm', fontFamily: 'Arial, sans-serif' }}>\n      {/* Header Section */}\n      <div className=\"flex justify-between items-start p-8 pb-6\">\n        {/* Business Info - Left */}\n        <div className=\"flex items-start gap-4\">\n          {businessInfo.logoUrl && (\n            <img \n              src={businessInfo.logoUrl} \n              alt={businessInfo.name}\n              className=\"h-20 w-20 object-contain\"\n            />\n          )}\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-1\">{businessInfo.name}</h1>\n            {businessInfo.address && <p className=\"text-sm text-gray-600\">{businessInfo.address}</p>}\n            {businessInfo.phone && <p className=\"text-sm text-gray-600\">{businessInfo.phone}</p>}\n            {businessInfo.email && <p className=\"text-sm text-gray-600\">{businessInfo.email}</p>}\n          </div>\n        </div>\n        \n        {/* Invoice Title - Right */}\n        <div className=\"text-right\">\n          <h2 className=\"text-4xl font-bold text-gray-800 mb-2\">INVOICE</h2>\n          <div className=\"text-sm text-gray-600\">\n            <p className=\"font-semibold text-gray-800\">#{order.order_code || 'N/A'}</p>\n            <p>{order.created_at ? new Date(order.created_at).toLocaleDateString('en-US', { \n              year: 'numeric', \n              month: 'long', \n              day: 'numeric' \n            }) : 'N/A'}</p>\n            <p>{order.created_at ? new Date(order.created_at).toLocaleTimeString('en-US', { \n              hour: '2-digit', \n              minute: '2-digit'\n            }) : 'N/A'}</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"px-8\">\n        <div className=\"border-t-2 border-gray-800\"></div>\n      </div>\n\n      {/* Customer Information */}\n      <div className=\"px-8 pt-6 pb-4\">\n        <div className=\"bg-gray-50 p-4 rounded\">\n          <h3 className=\"text-xs font-semibold text-gray-500 uppercase mb-2\">Bill To</h3>\n          <p className=\"text-base font-semibold text-gray-900\">{order.customer_name || 'Walk-in Customer'}</p>\n          {order.table_number && (\n            <p className=\"text-sm text-gray-600\">Table: {order.table_number}</p>\n          )}\n          {order.pin && (\n            <p className=\"text-sm text-gray-600\">PIN: {order.pin}</p>\n          )}\n        </div>\n      </div>\n\n      {/* Items Table */}\n      <div className=\"px-8 pb-6\">\n        <table className=\"w-full\">\n          <thead>\n            <tr className=\"border-b-2 border-gray-800\">\n              <th className=\"text-left py-3 text-sm font-semibold text-gray-700 uppercase\">Description</th>\n              <th className=\"text-center py-3 text-sm font-semibold text-gray-700 uppercase w-20\">Qty</th>\n              <th className=\"text-right py-3 text-sm font-semibold text-gray-700 uppercase w-28\">Unit Price</th>\n              <th className=\"text-right py-3 text-sm font-semibold text-gray-700 uppercase w-32\">Amount</th>\n            </tr>\n          </thead>\n          <tbody>\n            {order.items && order.items.length > 0 ? order.items.map((item, index) => {\n              const itemTotal = (item.unit_price * item.quantity) + \n                (item.modifiers?.reduce((sum, mod) => sum + (mod.extra_price * item.quantity), 0) || 0);\n              \n              return (\n                <tr key={index} className=\"border-b border-gray-200\">\n                  <td className=\"py-3\">\n                    <p className=\"font-medium text-gray-900\">{item.menu_item_name || item.item_name}</p>\n                    {item.modifiers?.map((mod, idx) => (\n                      <p key={idx} className=\"text-xs text-gray-500 ml-2\">\n                        • {mod.name} (+{mod.extra_price} {businessInfo.currency})\n                      </p>\n                    ))}\n                    {item.note && (\n                      <p className=\"text-xs text-gray-500 italic mt-1\">Note: {item.note}</p>\n                    )}\n                  </td>\n                  <td className=\"text-center py-3 text-gray-700\">{item.quantity}</td>\n                  <td className=\"text-right py-3 text-gray-700\">\n                    {item.unit_price?.toFixed(2)} {businessInfo.currency}\n                  </td>\n                  <td className=\"text-right py-3 text-gray-900 font-medium\">\n                    {itemTotal.toFixed(2)} {businessInfo.currency}\n                  </td>\n                </tr>\n              );\n            }) : (\n              <tr>\n                <td colSpan=\"4\" className=\"text-center py-4 text-gray-500\">\n                  No items found\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Totals Section */}\n      <div className=\"px-8 pb-8\">\n        <div className=\"flex justify-end\">\n          <div className=\"w-80\">\n            {/* Subtotal */}\n            <div className=\"flex justify-between py-2 text-gray-700\">\n              <span>Subtotal:</span>\n              <span>{subtotal.toFixed(2)} {businessInfo.currency}</span>\n            </div>\n            \n            {/* Tax */}\n            {order.tax > 0 && (\n              <div className=\"flex justify-between py-2 text-gray-700\">\n                <span>Tax {businessInfo.taxRate ? `(${businessInfo.taxRate}%)` : ''}:</span>\n                <span>{order.tax.toFixed(2)} {businessInfo.currency}</span>\n              </div>\n            )}\n            \n            {/* Service Charge */}\n            {order.service_charge > 0 && (\n              <div className=\"flex justify-between py-2 text-gray-700\">\n                <span>Service Charge {businessInfo.serviceCharge ? `(${businessInfo.serviceCharge}%)` : ''}:</span>\n                <span>{order.service_charge.toFixed(2)} {businessInfo.currency}</span>\n              </div>\n            )}\n            \n            {/* Total */}\n            <div className=\"border-t-2 border-gray-800 mt-2 pt-3\">\n              <div className=\"flex justify-between text-xl font-bold text-gray-900\">\n                <span>TOTAL:</span>\n                <span>{order.total?.toFixed(2)} {businessInfo.currency}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Payment Status */}\n      <div className=\"px-8 pb-6\">\n        <div className=\"bg-gray-50 p-4 rounded\">\n          {/* <div>\n            <p className=\"text-sm text-gray-600\">Payment Status</p>\n            <p className=\"font-semibold text-gray-900 capitalize\">{order.payment_status || 'Pending'}</p>\n          </div> */}\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div className=\"px-8 pt-8 pb-8 border-t border-gray-300\">\n        {/* {businessInfo.welcomeMessage && (\n          <p className=\"text-center text-gray-600 text-sm mb-2\">{businessInfo.welcomeMessage}</p>\n        )} */}\n        <p className=\"text-center text-gray-500 text-xs\">\n          We appreciate your patronage and look forward to serving you again.\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default DefaultInvoice;","size_bytes":7602},"frontend/src/components/InvoiceRender.jsx":{"content":"import React, { useRef } from 'react';\nimport { useReactToPrint } from 'react-to-print';\nimport DefaultInvoice from './templates/DefaultInvoice';\nimport MinimalInvoice from './templates/MinimalInvoice';\nimport ModernInvoice from './templates/ModernInvoice';\n\nconst InvoiceRenderer = ({ \n  order, \n  template = 'default', \n  onClose,\n  businessInfo \n}) => {\n  const componentRef = useRef();\n    const [selectedTemplate, setSelectedTemplate] = React.useState(template);\n  const handlePrint = useReactToPrint({\n    content: () => componentRef.current,\n    documentTitle: `Invoice-${order.order_code}`,\n    onAfterPrint: () => console.log('Printed successfully!'),\n  });\n\n  const renderTemplate = () => {\n    const templates = {\n      default: DefaultInvoice,\n      minimal: MinimalInvoice,\n      modern: ModernInvoice,\n    };\n\n    const TemplateComponent = templates[selectedTemplate] || DefaultInvoice;\n    \n    return (\n      <TemplateComponent \n        order={order} \n        businessInfo={businessInfo}\n      />\n    );\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden flex flex-col\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center p-6 border-b border-gray-200\">\n          <div>\n            <h2 className=\"text-xl font-bold\">Print Invoice</h2>\n            <p className=\"text-gray-600\">Order #{order.order_code}</p>\n          </div>\n          <div className=\"flex gap-3\">\n            <select \n              className=\"form-select border border-gray-300 rounded-lg px-3 py-2\"\n              onChange={(e) => {setSelectedTemplate(e.target.value)}}\n              defaultValue={template}\n            >\n              <option value=\"default\">Default Template</option>\n              <option value=\"minimal\">Minimal Template</option>\n              <option value=\"modern\">Modern Template</option>\n            </select>\n            <button\n              onClick={handlePrint}\n              className=\"btn-primary flex items-center gap-2 rounded-lg px-4 py-2\"\n            >\n              <PrinterIcon className=\"h-5 w-5\" />\n              Print Invoice\n            </button>\n            <button\n              onClick={onClose}\n              className=\"btn-outline flex items-center gap-2 rounded-lg px-4 py-2\"\n            >\n              Close\n            </button>\n          </div>\n        </div>\n\n        {/* Invoice Preview */}\n        <div className=\"flex-1 overflow-auto p-4 bg-gray-100\">\n          <div \n            ref={componentRef}\n            className=\"bg-white mx-auto shadow-lg\"\n            style={{ \n              transform: 'scale(0.8)',\n              transformOrigin: 'top center'\n            }}\n          >\n            {renderTemplate()}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Add PrinterIcon if not available\nconst PrinterIcon = ({ className }) => (\n  <svg className={className} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z\" />\n  </svg>\n);\n\nexport default InvoiceRenderer;","size_bytes":3354},"frontend/src/components/RecipeForm.jsx":{"content":"import { useState, useEffect } from 'react'\nimport { menuAPI, inventoryAPI } from '../services/api'\nimport toast from 'react-hot-toast'\n\nfunction RecipeForm({ onSave, onCancel }) {\n  const [menuItems, setMenuItems] = useState([])\n  const [stockItems, setStockItems] = useState([])\n  const [selectedMenuItem, setSelectedMenuItem] = useState('')\n  const [ingredients, setIngredients] = useState([{ stockItemId: '', quantity: '' }])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    loadData()\n  }, [])\n\n  const loadData = async () => {\n    try {\n      setLoading(true)\n      const [menuRes, stockRes] = await Promise.all([\n        menuAPI.getMenuItems(),\n        inventoryAPI.getStockItems()\n      ])\n      \n      if (menuRes.data.success) {\n        setMenuItems(menuRes.data.items || [])\n      }\n      if (stockRes.data.success) {\n        setStockItems(stockRes.data.items || [])\n      }\n    } catch (error) {\n      toast.error('Failed to load data')\n      console.error('Recipe form load error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleAddIngredient = () => {\n    setIngredients([...ingredients, { stockItemId: '', quantity: '' }])\n  }\n\n  const handleRemoveIngredient = (index) => {\n    setIngredients(ingredients.filter((_, i) => i !== index))\n  }\n\n  const handleIngredientChange = (index, field, value) => {\n    const newIngredients = [...ingredients]\n    newIngredients[index][field] = value\n    setIngredients(newIngredients)\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n\n    if (!selectedMenuItem) {\n      toast.error('Please select a menu item')\n      return\n    }\n\n    const validIngredients = ingredients.filter(\n      ing => ing.stockItemId && ing.quantity && parseFloat(ing.quantity) > 0\n    )\n\n    if (validIngredients.length === 0) {\n      toast.error('Please add at least one ingredient')\n      return\n    }\n\n    try {\n      for (const ingredient of validIngredients) {\n        await inventoryAPI.createRecipe({\n          menuItemId: selectedMenuItem,\n          stockItemId: ingredient.stockItemId,\n          qtyPerServing: parseFloat(ingredient.quantity)\n        })\n      }\n      \n      toast.success('Recipe saved successfully')\n      onSave()\n    } catch (error) {\n      console.error('Recipe save error:', error)\n      toast.error(error.response?.data?.error || 'Failed to save recipe')\n    }\n  }\n\n  if (loading) {\n    return <div className=\"text-center py-4\">Loading...</div>\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n          Menu Item\n        </label>\n        <select\n          value={selectedMenuItem}\n          onChange={(e) => setSelectedMenuItem(e.target.value)}\n          className=\"input\"\n          required\n        >\n          <option value=\"\">Select a menu item</option>\n          {menuItems.map((item) => (\n            <option key={item.id} value={item.id}>\n              {item.name} - {item.price} MAD\n            </option>\n          ))}\n        </select>\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n          Ingredients\n        </label>\n        <div className=\"space-y-2\">\n          {ingredients.map((ingredient, index) => (\n            <div key={index} className=\"flex gap-2\">\n              <select\n                value={ingredient.stockItemId}\n                onChange={(e) => handleIngredientChange(index, 'stockItemId', e.target.value)}\n                className=\"input flex-1\"\n                required\n              >\n                <option value=\"\">Select ingredient</option>\n                {stockItems.map((item) => (\n                  <option key={item.id} value={item.id}>\n                    {item.name} ({item.unit})\n                  </option>\n                ))}\n              </select>\n              <input\n                type=\"number\"\n                step=\"0.01\"\n                min=\"0.01\"\n                value={ingredient.quantity}\n                onChange={(e) => handleIngredientChange(index, 'quantity', e.target.value)}\n                placeholder=\"Quantity\"\n                className=\"input w-32\"\n                required\n              />\n              {ingredients.length > 1 && (\n                <button\n                  type=\"button\"\n                  onClick={() => handleRemoveIngredient(index)}\n                  className=\"btn-secondary text-red-600 hover:text-red-700\"\n                >\n                  Remove\n                </button>\n              )}\n            </div>\n          ))}\n        </div>\n        <button\n          type=\"button\"\n          onClick={handleAddIngredient}\n          className=\"btn-secondary mt-2\"\n        >\n          + Add Ingredient\n        </button>\n      </div>\n\n      <div className=\"flex gap-2 pt-4\">\n        <button type=\"submit\" className=\"btn-primary flex-1\">\n          Save Recipe\n        </button>\n        <button type=\"button\" onClick={onCancel} className=\"btn-secondary flex-1\">\n          Cancel\n        </button>\n      </div>\n    </form>\n  )\n}\n\nexport default RecipeForm\n","size_bytes":5126}},"version":2}